/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 接口信息
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class Info implements org.apache.thrift.TBase<Info, Info._Fields>, java.io.Serializable, Cloneable, Comparable<Info> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Info");

  private static final org.apache.thrift.protocol.TField CRYPTOKI_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("cryptokiVersion", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MANUFACTURER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("manufacturerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIBRARY_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libraryDescription", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LIBRARY_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("libraryVersion", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Version cryptokiVersion; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String manufacturerID; // required
  public int flags; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String libraryDescription; // required
  public @org.apache.thrift.annotation.Nullable Version libraryVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CRYPTOKI_VERSION((short)1, "cryptokiVersion"),
    MANUFACTURER_ID((short)2, "manufacturerID"),
    FLAGS((short)3, "flags"),
    LIBRARY_DESCRIPTION((short)4, "libraryDescription"),
    LIBRARY_VERSION((short)5, "libraryVersion");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CRYPTOKI_VERSION
          return CRYPTOKI_VERSION;
        case 2: // MANUFACTURER_ID
          return MANUFACTURER_ID;
        case 3: // FLAGS
          return FLAGS;
        case 4: // LIBRARY_DESCRIPTION
          return LIBRARY_DESCRIPTION;
        case 5: // LIBRARY_VERSION
          return LIBRARY_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLAGS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CRYPTOKI_VERSION, new org.apache.thrift.meta_data.FieldMetaData("cryptokiVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Version.class)));
    tmpMap.put(_Fields.MANUFACTURER_ID, new org.apache.thrift.meta_data.FieldMetaData("manufacturerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIBRARY_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("libraryDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIBRARY_VERSION, new org.apache.thrift.meta_data.FieldMetaData("libraryVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Version.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Info.class, metaDataMap);
  }

  public Info() {
  }

  public Info(
    Version cryptokiVersion,
    java.lang.String manufacturerID,
    int flags,
    java.lang.String libraryDescription,
    Version libraryVersion)
  {
    this();
    this.cryptokiVersion = cryptokiVersion;
    this.manufacturerID = manufacturerID;
    this.flags = flags;
    setFlagsIsSet(true);
    this.libraryDescription = libraryDescription;
    this.libraryVersion = libraryVersion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Info(Info other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCryptokiVersion()) {
      this.cryptokiVersion = new Version(other.cryptokiVersion);
    }
    if (other.isSetManufacturerID()) {
      this.manufacturerID = other.manufacturerID;
    }
    this.flags = other.flags;
    if (other.isSetLibraryDescription()) {
      this.libraryDescription = other.libraryDescription;
    }
    if (other.isSetLibraryVersion()) {
      this.libraryVersion = new Version(other.libraryVersion);
    }
  }

  @Override
  public Info deepCopy() {
    return new Info(this);
  }

  @Override
  public void clear() {
    this.cryptokiVersion = null;
    this.manufacturerID = null;
    setFlagsIsSet(false);
    this.flags = 0;
    this.libraryDescription = null;
    this.libraryVersion = null;
  }

  @org.apache.thrift.annotation.Nullable
  public Version getCryptokiVersion() {
    return this.cryptokiVersion;
  }

  public Info setCryptokiVersion(@org.apache.thrift.annotation.Nullable Version cryptokiVersion) {
    this.cryptokiVersion = cryptokiVersion;
    return this;
  }

  public void unsetCryptokiVersion() {
    this.cryptokiVersion = null;
  }

  /** Returns true if field cryptokiVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetCryptokiVersion() {
    return this.cryptokiVersion != null;
  }

  public void setCryptokiVersionIsSet(boolean value) {
    if (!value) {
      this.cryptokiVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getManufacturerID() {
    return this.manufacturerID;
  }

  public Info setManufacturerID(@org.apache.thrift.annotation.Nullable java.lang.String manufacturerID) {
    this.manufacturerID = manufacturerID;
    return this;
  }

  public void unsetManufacturerID() {
    this.manufacturerID = null;
  }

  /** Returns true if field manufacturerID is set (has been assigned a value) and false otherwise */
  public boolean isSetManufacturerID() {
    return this.manufacturerID != null;
  }

  public void setManufacturerIDIsSet(boolean value) {
    if (!value) {
      this.manufacturerID = null;
    }
  }

  public int getFlags() {
    return this.flags;
  }

  public Info setFlags(int flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLibraryDescription() {
    return this.libraryDescription;
  }

  public Info setLibraryDescription(@org.apache.thrift.annotation.Nullable java.lang.String libraryDescription) {
    this.libraryDescription = libraryDescription;
    return this;
  }

  public void unsetLibraryDescription() {
    this.libraryDescription = null;
  }

  /** Returns true if field libraryDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetLibraryDescription() {
    return this.libraryDescription != null;
  }

  public void setLibraryDescriptionIsSet(boolean value) {
    if (!value) {
      this.libraryDescription = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Version getLibraryVersion() {
    return this.libraryVersion;
  }

  public Info setLibraryVersion(@org.apache.thrift.annotation.Nullable Version libraryVersion) {
    this.libraryVersion = libraryVersion;
    return this;
  }

  public void unsetLibraryVersion() {
    this.libraryVersion = null;
  }

  /** Returns true if field libraryVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetLibraryVersion() {
    return this.libraryVersion != null;
  }

  public void setLibraryVersionIsSet(boolean value) {
    if (!value) {
      this.libraryVersion = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CRYPTOKI_VERSION:
      if (value == null) {
        unsetCryptokiVersion();
      } else {
        setCryptokiVersion((Version)value);
      }
      break;

    case MANUFACTURER_ID:
      if (value == null) {
        unsetManufacturerID();
      } else {
        setManufacturerID((java.lang.String)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((java.lang.Integer)value);
      }
      break;

    case LIBRARY_DESCRIPTION:
      if (value == null) {
        unsetLibraryDescription();
      } else {
        setLibraryDescription((java.lang.String)value);
      }
      break;

    case LIBRARY_VERSION:
      if (value == null) {
        unsetLibraryVersion();
      } else {
        setLibraryVersion((Version)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CRYPTOKI_VERSION:
      return getCryptokiVersion();

    case MANUFACTURER_ID:
      return getManufacturerID();

    case FLAGS:
      return getFlags();

    case LIBRARY_DESCRIPTION:
      return getLibraryDescription();

    case LIBRARY_VERSION:
      return getLibraryVersion();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CRYPTOKI_VERSION:
      return isSetCryptokiVersion();
    case MANUFACTURER_ID:
      return isSetManufacturerID();
    case FLAGS:
      return isSetFlags();
    case LIBRARY_DESCRIPTION:
      return isSetLibraryDescription();
    case LIBRARY_VERSION:
      return isSetLibraryVersion();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Info)
      return this.equals((Info)that);
    return false;
  }

  public boolean equals(Info that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cryptokiVersion = true && this.isSetCryptokiVersion();
    boolean that_present_cryptokiVersion = true && that.isSetCryptokiVersion();
    if (this_present_cryptokiVersion || that_present_cryptokiVersion) {
      if (!(this_present_cryptokiVersion && that_present_cryptokiVersion))
        return false;
      if (!this.cryptokiVersion.equals(that.cryptokiVersion))
        return false;
    }

    boolean this_present_manufacturerID = true && this.isSetManufacturerID();
    boolean that_present_manufacturerID = true && that.isSetManufacturerID();
    if (this_present_manufacturerID || that_present_manufacturerID) {
      if (!(this_present_manufacturerID && that_present_manufacturerID))
        return false;
      if (!this.manufacturerID.equals(that.manufacturerID))
        return false;
    }

    boolean this_present_flags = true;
    boolean that_present_flags = true;
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    boolean this_present_libraryDescription = true && this.isSetLibraryDescription();
    boolean that_present_libraryDescription = true && that.isSetLibraryDescription();
    if (this_present_libraryDescription || that_present_libraryDescription) {
      if (!(this_present_libraryDescription && that_present_libraryDescription))
        return false;
      if (!this.libraryDescription.equals(that.libraryDescription))
        return false;
    }

    boolean this_present_libraryVersion = true && this.isSetLibraryVersion();
    boolean that_present_libraryVersion = true && that.isSetLibraryVersion();
    if (this_present_libraryVersion || that_present_libraryVersion) {
      if (!(this_present_libraryVersion && that_present_libraryVersion))
        return false;
      if (!this.libraryVersion.equals(that.libraryVersion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCryptokiVersion()) ? 131071 : 524287);
    if (isSetCryptokiVersion())
      hashCode = hashCode * 8191 + cryptokiVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetManufacturerID()) ? 131071 : 524287);
    if (isSetManufacturerID())
      hashCode = hashCode * 8191 + manufacturerID.hashCode();

    hashCode = hashCode * 8191 + flags;

    hashCode = hashCode * 8191 + ((isSetLibraryDescription()) ? 131071 : 524287);
    if (isSetLibraryDescription())
      hashCode = hashCode * 8191 + libraryDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetLibraryVersion()) ? 131071 : 524287);
    if (isSetLibraryVersion())
      hashCode = hashCode * 8191 + libraryVersion.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Info other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCryptokiVersion(), other.isSetCryptokiVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCryptokiVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cryptokiVersion, other.cryptokiVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetManufacturerID(), other.isSetManufacturerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufacturerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufacturerID, other.manufacturerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlags(), other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLibraryDescription(), other.isSetLibraryDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibraryDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libraryDescription, other.libraryDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLibraryVersion(), other.isSetLibraryVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibraryVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libraryVersion, other.libraryVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Info(");
    boolean first = true;

    sb.append("cryptokiVersion:");
    if (this.cryptokiVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.cryptokiVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manufacturerID:");
    if (this.manufacturerID == null) {
      sb.append("null");
    } else {
      sb.append(this.manufacturerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    sb.append(this.flags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("libraryDescription:");
    if (this.libraryDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.libraryDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("libraryVersion:");
    if (this.libraryVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.libraryVersion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cryptokiVersion != null) {
      cryptokiVersion.validate();
    }
    if (libraryVersion != null) {
      libraryVersion.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public InfoStandardScheme getScheme() {
      return new InfoStandardScheme();
    }
  }

  private static class InfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<Info> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Info struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CRYPTOKI_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cryptokiVersion = new Version();
              struct.cryptokiVersion.read(iprot);
              struct.setCryptokiVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MANUFACTURER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manufacturerID = iprot.readString();
              struct.setManufacturerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flags = iprot.readI32();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIBRARY_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.libraryDescription = iprot.readString();
              struct.setLibraryDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIBRARY_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.libraryVersion = new Version();
              struct.libraryVersion.read(iprot);
              struct.setLibraryVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Info struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cryptokiVersion != null) {
        oprot.writeFieldBegin(CRYPTOKI_VERSION_FIELD_DESC);
        struct.cryptokiVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.manufacturerID != null) {
        oprot.writeFieldBegin(MANUFACTURER_ID_FIELD_DESC);
        oprot.writeString(struct.manufacturerID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(struct.flags);
      oprot.writeFieldEnd();
      if (struct.libraryDescription != null) {
        oprot.writeFieldBegin(LIBRARY_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.libraryDescription);
        oprot.writeFieldEnd();
      }
      if (struct.libraryVersion != null) {
        oprot.writeFieldBegin(LIBRARY_VERSION_FIELD_DESC);
        struct.libraryVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public InfoTupleScheme getScheme() {
      return new InfoTupleScheme();
    }
  }

  private static class InfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<Info> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Info struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCryptokiVersion()) {
        optionals.set(0);
      }
      if (struct.isSetManufacturerID()) {
        optionals.set(1);
      }
      if (struct.isSetFlags()) {
        optionals.set(2);
      }
      if (struct.isSetLibraryDescription()) {
        optionals.set(3);
      }
      if (struct.isSetLibraryVersion()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCryptokiVersion()) {
        struct.cryptokiVersion.write(oprot);
      }
      if (struct.isSetManufacturerID()) {
        oprot.writeString(struct.manufacturerID);
      }
      if (struct.isSetFlags()) {
        oprot.writeI32(struct.flags);
      }
      if (struct.isSetLibraryDescription()) {
        oprot.writeString(struct.libraryDescription);
      }
      if (struct.isSetLibraryVersion()) {
        struct.libraryVersion.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Info struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.cryptokiVersion = new Version();
        struct.cryptokiVersion.read(iprot);
        struct.setCryptokiVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.manufacturerID = iprot.readString();
        struct.setManufacturerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.flags = iprot.readI32();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.libraryDescription = iprot.readString();
        struct.setLibraryDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.libraryVersion = new Version();
        struct.libraryVersion.read(iprot);
        struct.setLibraryVersionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

