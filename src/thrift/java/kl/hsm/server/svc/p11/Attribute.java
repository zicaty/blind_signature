/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 属性对象，支持下列关键属性
 * i32类型属性值为-1，binary类型属性值为空时表示无效
 * bool类型的属性用i8表示, 取值如下:
 * 1:真 0:假 -1:无效
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class Attribute implements org.apache.thrift.TBase<Attribute, Attribute._Fields>, java.io.Serializable, Cloneable, Comparable<Attribute> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Attribute");

  private static final org.apache.thrift.protocol.TField CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("CLASS", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEY__TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("KEY_TYPE", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("LABEL", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("LOCAL", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("TOKEN", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField PRIVATE_FIELD_DESC = new org.apache.thrift.protocol.TField("PRIVATE", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField ENCRYPT_FIELD_DESC = new org.apache.thrift.protocol.TField("ENCRYPT", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField DECRYPT_FIELD_DESC = new org.apache.thrift.protocol.TField("DECRYPT", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField DERIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("DERIVE", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField MODIFIABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("MODIFIABLE", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField DESTROYABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("DESTROYABLE", org.apache.thrift.protocol.TType.BYTE, (short)12);
  private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("SIGN", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField SIGN__RECOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("SIGN_RECOVER", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField VERIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("VERIFY", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField VERIFY__RECOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("VERIFY_RECOVER", org.apache.thrift.protocol.TType.BYTE, (short)16);
  private static final org.apache.thrift.protocol.TField WRAP_FIELD_DESC = new org.apache.thrift.protocol.TField("WRAP", org.apache.thrift.protocol.TType.BYTE, (short)17);
  private static final org.apache.thrift.protocol.TField UNWRAP_FIELD_DESC = new org.apache.thrift.protocol.TField("UNWRAP", org.apache.thrift.protocol.TType.BYTE, (short)18);
  private static final org.apache.thrift.protocol.TField SENSITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("SENSITIVE", org.apache.thrift.protocol.TType.BYTE, (short)19);
  private static final org.apache.thrift.protocol.TField ALWAYS__SENSITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("ALWAYS_SENSITIVE", org.apache.thrift.protocol.TType.BYTE, (short)20);
  private static final org.apache.thrift.protocol.TField EXTRACTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("EXTRACTABLE", org.apache.thrift.protocol.TType.BYTE, (short)21);
  private static final org.apache.thrift.protocol.TField NEVER__EXTRACTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("NEVER_EXTRACTABLE", org.apache.thrift.protocol.TType.BYTE, (short)22);
  private static final org.apache.thrift.protocol.TField MODULUS_FIELD_DESC = new org.apache.thrift.protocol.TField("MODULUS", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField MODULUS__BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("MODULUS_BITS", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField PRIME_1_FIELD_DESC = new org.apache.thrift.protocol.TField("PRIME_1", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField PRIME_2_FIELD_DESC = new org.apache.thrift.protocol.TField("PRIME_2", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField COEFFICIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("COEFFICIENT", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField EXPONENT_1_FIELD_DESC = new org.apache.thrift.protocol.TField("EXPONENT_1", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField EXPONENT_2_FIELD_DESC = new org.apache.thrift.protocol.TField("EXPONENT_2", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField PRIVATE__EXPONENT_FIELD_DESC = new org.apache.thrift.protocol.TField("PRIVATE_EXPONENT", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField PUBLIC__EXPONENT_FIELD_DESC = new org.apache.thrift.protocol.TField("PUBLIC_EXPONENT", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField EC__PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("EC_PARAMS", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField EC__POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("EC_POINT", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("VALUE", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField VALUE__LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("VALUE_LEN", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField CHECK__VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("CHECK_VALUE", org.apache.thrift.protocol.TType.STRING, (short)36);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AttributeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AttributeTupleSchemeFactory();

  public int CLASS; // required
  public int KEY_TYPE; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer LABEL; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer ID; // required
  public byte LOCAL; // required
  public byte TOKEN; // required
  public byte PRIVATE; // required
  public byte ENCRYPT; // required
  public byte DECRYPT; // required
  public byte DERIVE; // required
  public byte MODIFIABLE; // required
  public byte DESTROYABLE; // required
  public byte SIGN; // required
  public byte SIGN_RECOVER; // required
  public byte VERIFY; // required
  public byte VERIFY_RECOVER; // required
  public byte WRAP; // required
  public byte UNWRAP; // required
  public byte SENSITIVE; // required
  public byte ALWAYS_SENSITIVE; // required
  public byte EXTRACTABLE; // required
  public byte NEVER_EXTRACTABLE; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer MODULUS; // required
  public int MODULUS_BITS; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer PRIME_1; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer PRIME_2; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer COEFFICIENT; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer EXPONENT_1; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer EXPONENT_2; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer PRIVATE_EXPONENT; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer PUBLIC_EXPONENT; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer EC_PARAMS; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer EC_POINT; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer VALUE; // required
  public int VALUE_LEN; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer CHECK_VALUE; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLASS((short)1, "CLASS"),
    KEY__TYPE((short)2, "KEY_TYPE"),
    LABEL((short)3, "LABEL"),
    ID((short)4, "ID"),
    LOCAL((short)5, "LOCAL"),
    TOKEN((short)6, "TOKEN"),
    PRIVATE((short)7, "PRIVATE"),
    ENCRYPT((short)8, "ENCRYPT"),
    DECRYPT((short)9, "DECRYPT"),
    DERIVE((short)10, "DERIVE"),
    MODIFIABLE((short)11, "MODIFIABLE"),
    DESTROYABLE((short)12, "DESTROYABLE"),
    SIGN((short)13, "SIGN"),
    SIGN__RECOVER((short)14, "SIGN_RECOVER"),
    VERIFY((short)15, "VERIFY"),
    VERIFY__RECOVER((short)16, "VERIFY_RECOVER"),
    WRAP((short)17, "WRAP"),
    UNWRAP((short)18, "UNWRAP"),
    SENSITIVE((short)19, "SENSITIVE"),
    ALWAYS__SENSITIVE((short)20, "ALWAYS_SENSITIVE"),
    EXTRACTABLE((short)21, "EXTRACTABLE"),
    NEVER__EXTRACTABLE((short)22, "NEVER_EXTRACTABLE"),
    MODULUS((short)23, "MODULUS"),
    MODULUS__BITS((short)24, "MODULUS_BITS"),
    PRIME_1((short)25, "PRIME_1"),
    PRIME_2((short)26, "PRIME_2"),
    COEFFICIENT((short)27, "COEFFICIENT"),
    EXPONENT_1((short)28, "EXPONENT_1"),
    EXPONENT_2((short)29, "EXPONENT_2"),
    PRIVATE__EXPONENT((short)30, "PRIVATE_EXPONENT"),
    PUBLIC__EXPONENT((short)31, "PUBLIC_EXPONENT"),
    EC__PARAMS((short)32, "EC_PARAMS"),
    EC__POINT((short)33, "EC_POINT"),
    VALUE((short)34, "VALUE"),
    VALUE__LEN((short)35, "VALUE_LEN"),
    CHECK__VALUE((short)36, "CHECK_VALUE");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLASS
          return CLASS;
        case 2: // KEY__TYPE
          return KEY__TYPE;
        case 3: // LABEL
          return LABEL;
        case 4: // ID
          return ID;
        case 5: // LOCAL
          return LOCAL;
        case 6: // TOKEN
          return TOKEN;
        case 7: // PRIVATE
          return PRIVATE;
        case 8: // ENCRYPT
          return ENCRYPT;
        case 9: // DECRYPT
          return DECRYPT;
        case 10: // DERIVE
          return DERIVE;
        case 11: // MODIFIABLE
          return MODIFIABLE;
        case 12: // DESTROYABLE
          return DESTROYABLE;
        case 13: // SIGN
          return SIGN;
        case 14: // SIGN__RECOVER
          return SIGN__RECOVER;
        case 15: // VERIFY
          return VERIFY;
        case 16: // VERIFY__RECOVER
          return VERIFY__RECOVER;
        case 17: // WRAP
          return WRAP;
        case 18: // UNWRAP
          return UNWRAP;
        case 19: // SENSITIVE
          return SENSITIVE;
        case 20: // ALWAYS__SENSITIVE
          return ALWAYS__SENSITIVE;
        case 21: // EXTRACTABLE
          return EXTRACTABLE;
        case 22: // NEVER__EXTRACTABLE
          return NEVER__EXTRACTABLE;
        case 23: // MODULUS
          return MODULUS;
        case 24: // MODULUS__BITS
          return MODULUS__BITS;
        case 25: // PRIME_1
          return PRIME_1;
        case 26: // PRIME_2
          return PRIME_2;
        case 27: // COEFFICIENT
          return COEFFICIENT;
        case 28: // EXPONENT_1
          return EXPONENT_1;
        case 29: // EXPONENT_2
          return EXPONENT_2;
        case 30: // PRIVATE__EXPONENT
          return PRIVATE__EXPONENT;
        case 31: // PUBLIC__EXPONENT
          return PUBLIC__EXPONENT;
        case 32: // EC__PARAMS
          return EC__PARAMS;
        case 33: // EC__POINT
          return EC__POINT;
        case 34: // VALUE
          return VALUE;
        case 35: // VALUE__LEN
          return VALUE__LEN;
        case 36: // CHECK__VALUE
          return CHECK__VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLASS_ISSET_ID = 0;
  private static final int __KEY_TYPE_ISSET_ID = 1;
  private static final int __LOCAL_ISSET_ID = 2;
  private static final int __TOKEN_ISSET_ID = 3;
  private static final int __PRIVATE_ISSET_ID = 4;
  private static final int __ENCRYPT_ISSET_ID = 5;
  private static final int __DECRYPT_ISSET_ID = 6;
  private static final int __DERIVE_ISSET_ID = 7;
  private static final int __MODIFIABLE_ISSET_ID = 8;
  private static final int __DESTROYABLE_ISSET_ID = 9;
  private static final int __SIGN_ISSET_ID = 10;
  private static final int __SIGN_RECOVER_ISSET_ID = 11;
  private static final int __VERIFY_ISSET_ID = 12;
  private static final int __VERIFY_RECOVER_ISSET_ID = 13;
  private static final int __WRAP_ISSET_ID = 14;
  private static final int __UNWRAP_ISSET_ID = 15;
  private static final int __SENSITIVE_ISSET_ID = 16;
  private static final int __ALWAYS_SENSITIVE_ISSET_ID = 17;
  private static final int __EXTRACTABLE_ISSET_ID = 18;
  private static final int __NEVER_EXTRACTABLE_ISSET_ID = 19;
  private static final int __MODULUS_BITS_ISSET_ID = 20;
  private static final int __VALUE_LEN_ISSET_ID = 21;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLASS, new org.apache.thrift.meta_data.FieldMetaData("CLASS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KEY__TYPE, new org.apache.thrift.meta_data.FieldMetaData("KEY_TYPE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("LABEL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.LOCAL, new org.apache.thrift.meta_data.FieldMetaData("LOCAL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("TOKEN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PRIVATE, new org.apache.thrift.meta_data.FieldMetaData("PRIVATE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ENCRYPT, new org.apache.thrift.meta_data.FieldMetaData("ENCRYPT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DECRYPT, new org.apache.thrift.meta_data.FieldMetaData("DECRYPT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DERIVE, new org.apache.thrift.meta_data.FieldMetaData("DERIVE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MODIFIABLE, new org.apache.thrift.meta_data.FieldMetaData("MODIFIABLE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DESTROYABLE, new org.apache.thrift.meta_data.FieldMetaData("DESTROYABLE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("SIGN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SIGN__RECOVER, new org.apache.thrift.meta_data.FieldMetaData("SIGN_RECOVER", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.VERIFY, new org.apache.thrift.meta_data.FieldMetaData("VERIFY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.VERIFY__RECOVER, new org.apache.thrift.meta_data.FieldMetaData("VERIFY_RECOVER", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.WRAP, new org.apache.thrift.meta_data.FieldMetaData("WRAP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.UNWRAP, new org.apache.thrift.meta_data.FieldMetaData("UNWRAP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SENSITIVE, new org.apache.thrift.meta_data.FieldMetaData("SENSITIVE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ALWAYS__SENSITIVE, new org.apache.thrift.meta_data.FieldMetaData("ALWAYS_SENSITIVE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.EXTRACTABLE, new org.apache.thrift.meta_data.FieldMetaData("EXTRACTABLE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NEVER__EXTRACTABLE, new org.apache.thrift.meta_data.FieldMetaData("NEVER_EXTRACTABLE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MODULUS, new org.apache.thrift.meta_data.FieldMetaData("MODULUS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.MODULUS__BITS, new org.apache.thrift.meta_data.FieldMetaData("MODULUS_BITS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIME_1, new org.apache.thrift.meta_data.FieldMetaData("PRIME_1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PRIME_2, new org.apache.thrift.meta_data.FieldMetaData("PRIME_2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COEFFICIENT, new org.apache.thrift.meta_data.FieldMetaData("COEFFICIENT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EXPONENT_1, new org.apache.thrift.meta_data.FieldMetaData("EXPONENT_1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EXPONENT_2, new org.apache.thrift.meta_data.FieldMetaData("EXPONENT_2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PRIVATE__EXPONENT, new org.apache.thrift.meta_data.FieldMetaData("PRIVATE_EXPONENT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PUBLIC__EXPONENT, new org.apache.thrift.meta_data.FieldMetaData("PUBLIC_EXPONENT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EC__PARAMS, new org.apache.thrift.meta_data.FieldMetaData("EC_PARAMS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EC__POINT, new org.apache.thrift.meta_data.FieldMetaData("EC_POINT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("VALUE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUE__LEN, new org.apache.thrift.meta_data.FieldMetaData("VALUE_LEN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK__VALUE, new org.apache.thrift.meta_data.FieldMetaData("CHECK_VALUE", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Attribute.class, metaDataMap);
  }

  public Attribute() {
    this.CLASS = -1;

    this.KEY_TYPE = -1;

    this.LOCAL = (byte)-1;

    this.TOKEN = (byte)-1;

    this.PRIVATE = (byte)-1;

    this.ENCRYPT = (byte)-1;

    this.DECRYPT = (byte)-1;

    this.DERIVE = (byte)-1;

    this.MODIFIABLE = (byte)-1;

    this.DESTROYABLE = (byte)-1;

    this.SIGN = (byte)-1;

    this.SIGN_RECOVER = (byte)-1;

    this.VERIFY = (byte)-1;

    this.VERIFY_RECOVER = (byte)-1;

    this.WRAP = (byte)-1;

    this.UNWRAP = (byte)-1;

    this.SENSITIVE = (byte)-1;

    this.ALWAYS_SENSITIVE = (byte)-1;

    this.EXTRACTABLE = (byte)-1;

    this.NEVER_EXTRACTABLE = (byte)-1;

    this.MODULUS_BITS = -1;

    this.VALUE_LEN = -1;

  }

  public Attribute(
    int CLASS,
    int KEY_TYPE,
    java.nio.ByteBuffer LABEL,
    java.nio.ByteBuffer ID,
    byte LOCAL,
    byte TOKEN,
    byte PRIVATE,
    byte ENCRYPT,
    byte DECRYPT,
    byte DERIVE,
    byte MODIFIABLE,
    byte DESTROYABLE,
    byte SIGN,
    byte SIGN_RECOVER,
    byte VERIFY,
    byte VERIFY_RECOVER,
    byte WRAP,
    byte UNWRAP,
    byte SENSITIVE,
    byte ALWAYS_SENSITIVE,
    byte EXTRACTABLE,
    byte NEVER_EXTRACTABLE,
    java.nio.ByteBuffer MODULUS,
    int MODULUS_BITS,
    java.nio.ByteBuffer PRIME_1,
    java.nio.ByteBuffer PRIME_2,
    java.nio.ByteBuffer COEFFICIENT,
    java.nio.ByteBuffer EXPONENT_1,
    java.nio.ByteBuffer EXPONENT_2,
    java.nio.ByteBuffer PRIVATE_EXPONENT,
    java.nio.ByteBuffer PUBLIC_EXPONENT,
    java.nio.ByteBuffer EC_PARAMS,
    java.nio.ByteBuffer EC_POINT,
    java.nio.ByteBuffer VALUE,
    int VALUE_LEN,
    java.nio.ByteBuffer CHECK_VALUE)
  {
    this();
    this.CLASS = CLASS;
    setCLASSIsSet(true);
    this.KEY_TYPE = KEY_TYPE;
    setKEY_TYPEIsSet(true);
    this.LABEL = org.apache.thrift.TBaseHelper.copyBinary(LABEL);
    this.ID = org.apache.thrift.TBaseHelper.copyBinary(ID);
    this.LOCAL = LOCAL;
    setLOCALIsSet(true);
    this.TOKEN = TOKEN;
    setTOKENIsSet(true);
    this.PRIVATE = PRIVATE;
    setPRIVATEIsSet(true);
    this.ENCRYPT = ENCRYPT;
    setENCRYPTIsSet(true);
    this.DECRYPT = DECRYPT;
    setDECRYPTIsSet(true);
    this.DERIVE = DERIVE;
    setDERIVEIsSet(true);
    this.MODIFIABLE = MODIFIABLE;
    setMODIFIABLEIsSet(true);
    this.DESTROYABLE = DESTROYABLE;
    setDESTROYABLEIsSet(true);
    this.SIGN = SIGN;
    setSIGNIsSet(true);
    this.SIGN_RECOVER = SIGN_RECOVER;
    setSIGN_RECOVERIsSet(true);
    this.VERIFY = VERIFY;
    setVERIFYIsSet(true);
    this.VERIFY_RECOVER = VERIFY_RECOVER;
    setVERIFY_RECOVERIsSet(true);
    this.WRAP = WRAP;
    setWRAPIsSet(true);
    this.UNWRAP = UNWRAP;
    setUNWRAPIsSet(true);
    this.SENSITIVE = SENSITIVE;
    setSENSITIVEIsSet(true);
    this.ALWAYS_SENSITIVE = ALWAYS_SENSITIVE;
    setALWAYS_SENSITIVEIsSet(true);
    this.EXTRACTABLE = EXTRACTABLE;
    setEXTRACTABLEIsSet(true);
    this.NEVER_EXTRACTABLE = NEVER_EXTRACTABLE;
    setNEVER_EXTRACTABLEIsSet(true);
    this.MODULUS = org.apache.thrift.TBaseHelper.copyBinary(MODULUS);
    this.MODULUS_BITS = MODULUS_BITS;
    setMODULUS_BITSIsSet(true);
    this.PRIME_1 = org.apache.thrift.TBaseHelper.copyBinary(PRIME_1);
    this.PRIME_2 = org.apache.thrift.TBaseHelper.copyBinary(PRIME_2);
    this.COEFFICIENT = org.apache.thrift.TBaseHelper.copyBinary(COEFFICIENT);
    this.EXPONENT_1 = org.apache.thrift.TBaseHelper.copyBinary(EXPONENT_1);
    this.EXPONENT_2 = org.apache.thrift.TBaseHelper.copyBinary(EXPONENT_2);
    this.PRIVATE_EXPONENT = org.apache.thrift.TBaseHelper.copyBinary(PRIVATE_EXPONENT);
    this.PUBLIC_EXPONENT = org.apache.thrift.TBaseHelper.copyBinary(PUBLIC_EXPONENT);
    this.EC_PARAMS = org.apache.thrift.TBaseHelper.copyBinary(EC_PARAMS);
    this.EC_POINT = org.apache.thrift.TBaseHelper.copyBinary(EC_POINT);
    this.VALUE = org.apache.thrift.TBaseHelper.copyBinary(VALUE);
    this.VALUE_LEN = VALUE_LEN;
    setVALUE_LENIsSet(true);
    this.CHECK_VALUE = org.apache.thrift.TBaseHelper.copyBinary(CHECK_VALUE);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Attribute(Attribute other) {
    __isset_bitfield = other.__isset_bitfield;
    this.CLASS = other.CLASS;
    this.KEY_TYPE = other.KEY_TYPE;
    if (other.isSetLABEL()) {
      this.LABEL = org.apache.thrift.TBaseHelper.copyBinary(other.LABEL);
    }
    if (other.isSetID()) {
      this.ID = org.apache.thrift.TBaseHelper.copyBinary(other.ID);
    }
    this.LOCAL = other.LOCAL;
    this.TOKEN = other.TOKEN;
    this.PRIVATE = other.PRIVATE;
    this.ENCRYPT = other.ENCRYPT;
    this.DECRYPT = other.DECRYPT;
    this.DERIVE = other.DERIVE;
    this.MODIFIABLE = other.MODIFIABLE;
    this.DESTROYABLE = other.DESTROYABLE;
    this.SIGN = other.SIGN;
    this.SIGN_RECOVER = other.SIGN_RECOVER;
    this.VERIFY = other.VERIFY;
    this.VERIFY_RECOVER = other.VERIFY_RECOVER;
    this.WRAP = other.WRAP;
    this.UNWRAP = other.UNWRAP;
    this.SENSITIVE = other.SENSITIVE;
    this.ALWAYS_SENSITIVE = other.ALWAYS_SENSITIVE;
    this.EXTRACTABLE = other.EXTRACTABLE;
    this.NEVER_EXTRACTABLE = other.NEVER_EXTRACTABLE;
    if (other.isSetMODULUS()) {
      this.MODULUS = org.apache.thrift.TBaseHelper.copyBinary(other.MODULUS);
    }
    this.MODULUS_BITS = other.MODULUS_BITS;
    if (other.isSetPRIME_1()) {
      this.PRIME_1 = org.apache.thrift.TBaseHelper.copyBinary(other.PRIME_1);
    }
    if (other.isSetPRIME_2()) {
      this.PRIME_2 = org.apache.thrift.TBaseHelper.copyBinary(other.PRIME_2);
    }
    if (other.isSetCOEFFICIENT()) {
      this.COEFFICIENT = org.apache.thrift.TBaseHelper.copyBinary(other.COEFFICIENT);
    }
    if (other.isSetEXPONENT_1()) {
      this.EXPONENT_1 = org.apache.thrift.TBaseHelper.copyBinary(other.EXPONENT_1);
    }
    if (other.isSetEXPONENT_2()) {
      this.EXPONENT_2 = org.apache.thrift.TBaseHelper.copyBinary(other.EXPONENT_2);
    }
    if (other.isSetPRIVATE_EXPONENT()) {
      this.PRIVATE_EXPONENT = org.apache.thrift.TBaseHelper.copyBinary(other.PRIVATE_EXPONENT);
    }
    if (other.isSetPUBLIC_EXPONENT()) {
      this.PUBLIC_EXPONENT = org.apache.thrift.TBaseHelper.copyBinary(other.PUBLIC_EXPONENT);
    }
    if (other.isSetEC_PARAMS()) {
      this.EC_PARAMS = org.apache.thrift.TBaseHelper.copyBinary(other.EC_PARAMS);
    }
    if (other.isSetEC_POINT()) {
      this.EC_POINT = org.apache.thrift.TBaseHelper.copyBinary(other.EC_POINT);
    }
    if (other.isSetVALUE()) {
      this.VALUE = org.apache.thrift.TBaseHelper.copyBinary(other.VALUE);
    }
    this.VALUE_LEN = other.VALUE_LEN;
    if (other.isSetCHECK_VALUE()) {
      this.CHECK_VALUE = org.apache.thrift.TBaseHelper.copyBinary(other.CHECK_VALUE);
    }
  }

  @Override
  public Attribute deepCopy() {
    return new Attribute(this);
  }

  @Override
  public void clear() {
    this.CLASS = -1;

    this.KEY_TYPE = -1;

    this.LABEL = null;
    this.ID = null;
    this.LOCAL = (byte)-1;

    this.TOKEN = (byte)-1;

    this.PRIVATE = (byte)-1;

    this.ENCRYPT = (byte)-1;

    this.DECRYPT = (byte)-1;

    this.DERIVE = (byte)-1;

    this.MODIFIABLE = (byte)-1;

    this.DESTROYABLE = (byte)-1;

    this.SIGN = (byte)-1;

    this.SIGN_RECOVER = (byte)-1;

    this.VERIFY = (byte)-1;

    this.VERIFY_RECOVER = (byte)-1;

    this.WRAP = (byte)-1;

    this.UNWRAP = (byte)-1;

    this.SENSITIVE = (byte)-1;

    this.ALWAYS_SENSITIVE = (byte)-1;

    this.EXTRACTABLE = (byte)-1;

    this.NEVER_EXTRACTABLE = (byte)-1;

    this.MODULUS = null;
    this.MODULUS_BITS = -1;

    this.PRIME_1 = null;
    this.PRIME_2 = null;
    this.COEFFICIENT = null;
    this.EXPONENT_1 = null;
    this.EXPONENT_2 = null;
    this.PRIVATE_EXPONENT = null;
    this.PUBLIC_EXPONENT = null;
    this.EC_PARAMS = null;
    this.EC_POINT = null;
    this.VALUE = null;
    this.VALUE_LEN = -1;

    this.CHECK_VALUE = null;
  }

  public int getCLASS() {
    return this.CLASS;
  }

  public Attribute setCLASS(int CLASS) {
    this.CLASS = CLASS;
    setCLASSIsSet(true);
    return this;
  }

  public void unsetCLASS() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLASS_ISSET_ID);
  }

  /** Returns true if field CLASS is set (has been assigned a value) and false otherwise */
  public boolean isSetCLASS() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLASS_ISSET_ID);
  }

  public void setCLASSIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLASS_ISSET_ID, value);
  }

  public int getKEY_TYPE() {
    return this.KEY_TYPE;
  }

  public Attribute setKEY_TYPE(int KEY_TYPE) {
    this.KEY_TYPE = KEY_TYPE;
    setKEY_TYPEIsSet(true);
    return this;
  }

  public void unsetKEY_TYPE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_TYPE_ISSET_ID);
  }

  /** Returns true if field KEY_TYPE is set (has been assigned a value) and false otherwise */
  public boolean isSetKEY_TYPE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_TYPE_ISSET_ID);
  }

  public void setKEY_TYPEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_TYPE_ISSET_ID, value);
  }

  public byte[] getLABEL() {
    setLABEL(org.apache.thrift.TBaseHelper.rightSize(LABEL));
    return LABEL == null ? null : LABEL.array();
  }

  public java.nio.ByteBuffer bufferForLABEL() {
    return org.apache.thrift.TBaseHelper.copyBinary(LABEL);
  }

  public Attribute setLABEL(byte[] LABEL) {
    this.LABEL = LABEL == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(LABEL.clone());
    return this;
  }

  public Attribute setLABEL(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer LABEL) {
    this.LABEL = org.apache.thrift.TBaseHelper.copyBinary(LABEL);
    return this;
  }

  public void unsetLABEL() {
    this.LABEL = null;
  }

  /** Returns true if field LABEL is set (has been assigned a value) and false otherwise */
  public boolean isSetLABEL() {
    return this.LABEL != null;
  }

  public void setLABELIsSet(boolean value) {
    if (!value) {
      this.LABEL = null;
    }
  }

  public byte[] getID() {
    setID(org.apache.thrift.TBaseHelper.rightSize(ID));
    return ID == null ? null : ID.array();
  }

  public java.nio.ByteBuffer bufferForID() {
    return org.apache.thrift.TBaseHelper.copyBinary(ID);
  }

  public Attribute setID(byte[] ID) {
    this.ID = ID == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(ID.clone());
    return this;
  }

  public Attribute setID(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer ID) {
    this.ID = org.apache.thrift.TBaseHelper.copyBinary(ID);
    return this;
  }

  public void unsetID() {
    this.ID = null;
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return this.ID != null;
  }

  public void setIDIsSet(boolean value) {
    if (!value) {
      this.ID = null;
    }
  }

  public byte getLOCAL() {
    return this.LOCAL;
  }

  public Attribute setLOCAL(byte LOCAL) {
    this.LOCAL = LOCAL;
    setLOCALIsSet(true);
    return this;
  }

  public void unsetLOCAL() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCAL_ISSET_ID);
  }

  /** Returns true if field LOCAL is set (has been assigned a value) and false otherwise */
  public boolean isSetLOCAL() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCAL_ISSET_ID);
  }

  public void setLOCALIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCAL_ISSET_ID, value);
  }

  public byte getTOKEN() {
    return this.TOKEN;
  }

  public Attribute setTOKEN(byte TOKEN) {
    this.TOKEN = TOKEN;
    setTOKENIsSet(true);
    return this;
  }

  public void unsetTOKEN() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKEN_ISSET_ID);
  }

  /** Returns true if field TOKEN is set (has been assigned a value) and false otherwise */
  public boolean isSetTOKEN() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKEN_ISSET_ID);
  }

  public void setTOKENIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKEN_ISSET_ID, value);
  }

  public byte getPRIVATE() {
    return this.PRIVATE;
  }

  public Attribute setPRIVATE(byte PRIVATE) {
    this.PRIVATE = PRIVATE;
    setPRIVATEIsSet(true);
    return this;
  }

  public void unsetPRIVATE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVATE_ISSET_ID);
  }

  /** Returns true if field PRIVATE is set (has been assigned a value) and false otherwise */
  public boolean isSetPRIVATE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVATE_ISSET_ID);
  }

  public void setPRIVATEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVATE_ISSET_ID, value);
  }

  public byte getENCRYPT() {
    return this.ENCRYPT;
  }

  public Attribute setENCRYPT(byte ENCRYPT) {
    this.ENCRYPT = ENCRYPT;
    setENCRYPTIsSet(true);
    return this;
  }

  public void unsetENCRYPT() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCRYPT_ISSET_ID);
  }

  /** Returns true if field ENCRYPT is set (has been assigned a value) and false otherwise */
  public boolean isSetENCRYPT() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCRYPT_ISSET_ID);
  }

  public void setENCRYPTIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCRYPT_ISSET_ID, value);
  }

  public byte getDECRYPT() {
    return this.DECRYPT;
  }

  public Attribute setDECRYPT(byte DECRYPT) {
    this.DECRYPT = DECRYPT;
    setDECRYPTIsSet(true);
    return this;
  }

  public void unsetDECRYPT() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DECRYPT_ISSET_ID);
  }

  /** Returns true if field DECRYPT is set (has been assigned a value) and false otherwise */
  public boolean isSetDECRYPT() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DECRYPT_ISSET_ID);
  }

  public void setDECRYPTIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DECRYPT_ISSET_ID, value);
  }

  public byte getDERIVE() {
    return this.DERIVE;
  }

  public Attribute setDERIVE(byte DERIVE) {
    this.DERIVE = DERIVE;
    setDERIVEIsSet(true);
    return this;
  }

  public void unsetDERIVE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DERIVE_ISSET_ID);
  }

  /** Returns true if field DERIVE is set (has been assigned a value) and false otherwise */
  public boolean isSetDERIVE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DERIVE_ISSET_ID);
  }

  public void setDERIVEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DERIVE_ISSET_ID, value);
  }

  public byte getMODIFIABLE() {
    return this.MODIFIABLE;
  }

  public Attribute setMODIFIABLE(byte MODIFIABLE) {
    this.MODIFIABLE = MODIFIABLE;
    setMODIFIABLEIsSet(true);
    return this;
  }

  public void unsetMODIFIABLE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIABLE_ISSET_ID);
  }

  /** Returns true if field MODIFIABLE is set (has been assigned a value) and false otherwise */
  public boolean isSetMODIFIABLE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIABLE_ISSET_ID);
  }

  public void setMODIFIABLEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIABLE_ISSET_ID, value);
  }

  public byte getDESTROYABLE() {
    return this.DESTROYABLE;
  }

  public Attribute setDESTROYABLE(byte DESTROYABLE) {
    this.DESTROYABLE = DESTROYABLE;
    setDESTROYABLEIsSet(true);
    return this;
  }

  public void unsetDESTROYABLE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DESTROYABLE_ISSET_ID);
  }

  /** Returns true if field DESTROYABLE is set (has been assigned a value) and false otherwise */
  public boolean isSetDESTROYABLE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DESTROYABLE_ISSET_ID);
  }

  public void setDESTROYABLEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DESTROYABLE_ISSET_ID, value);
  }

  public byte getSIGN() {
    return this.SIGN;
  }

  public Attribute setSIGN(byte SIGN) {
    this.SIGN = SIGN;
    setSIGNIsSet(true);
    return this;
  }

  public void unsetSIGN() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGN_ISSET_ID);
  }

  /** Returns true if field SIGN is set (has been assigned a value) and false otherwise */
  public boolean isSetSIGN() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGN_ISSET_ID);
  }

  public void setSIGNIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGN_ISSET_ID, value);
  }

  public byte getSIGN_RECOVER() {
    return this.SIGN_RECOVER;
  }

  public Attribute setSIGN_RECOVER(byte SIGN_RECOVER) {
    this.SIGN_RECOVER = SIGN_RECOVER;
    setSIGN_RECOVERIsSet(true);
    return this;
  }

  public void unsetSIGN_RECOVER() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGN_RECOVER_ISSET_ID);
  }

  /** Returns true if field SIGN_RECOVER is set (has been assigned a value) and false otherwise */
  public boolean isSetSIGN_RECOVER() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGN_RECOVER_ISSET_ID);
  }

  public void setSIGN_RECOVERIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGN_RECOVER_ISSET_ID, value);
  }

  public byte getVERIFY() {
    return this.VERIFY;
  }

  public Attribute setVERIFY(byte VERIFY) {
    this.VERIFY = VERIFY;
    setVERIFYIsSet(true);
    return this;
  }

  public void unsetVERIFY() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERIFY_ISSET_ID);
  }

  /** Returns true if field VERIFY is set (has been assigned a value) and false otherwise */
  public boolean isSetVERIFY() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERIFY_ISSET_ID);
  }

  public void setVERIFYIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERIFY_ISSET_ID, value);
  }

  public byte getVERIFY_RECOVER() {
    return this.VERIFY_RECOVER;
  }

  public Attribute setVERIFY_RECOVER(byte VERIFY_RECOVER) {
    this.VERIFY_RECOVER = VERIFY_RECOVER;
    setVERIFY_RECOVERIsSet(true);
    return this;
  }

  public void unsetVERIFY_RECOVER() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERIFY_RECOVER_ISSET_ID);
  }

  /** Returns true if field VERIFY_RECOVER is set (has been assigned a value) and false otherwise */
  public boolean isSetVERIFY_RECOVER() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERIFY_RECOVER_ISSET_ID);
  }

  public void setVERIFY_RECOVERIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERIFY_RECOVER_ISSET_ID, value);
  }

  public byte getWRAP() {
    return this.WRAP;
  }

  public Attribute setWRAP(byte WRAP) {
    this.WRAP = WRAP;
    setWRAPIsSet(true);
    return this;
  }

  public void unsetWRAP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRAP_ISSET_ID);
  }

  /** Returns true if field WRAP is set (has been assigned a value) and false otherwise */
  public boolean isSetWRAP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRAP_ISSET_ID);
  }

  public void setWRAPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRAP_ISSET_ID, value);
  }

  public byte getUNWRAP() {
    return this.UNWRAP;
  }

  public Attribute setUNWRAP(byte UNWRAP) {
    this.UNWRAP = UNWRAP;
    setUNWRAPIsSet(true);
    return this;
  }

  public void unsetUNWRAP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNWRAP_ISSET_ID);
  }

  /** Returns true if field UNWRAP is set (has been assigned a value) and false otherwise */
  public boolean isSetUNWRAP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNWRAP_ISSET_ID);
  }

  public void setUNWRAPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNWRAP_ISSET_ID, value);
  }

  public byte getSENSITIVE() {
    return this.SENSITIVE;
  }

  public Attribute setSENSITIVE(byte SENSITIVE) {
    this.SENSITIVE = SENSITIVE;
    setSENSITIVEIsSet(true);
    return this;
  }

  public void unsetSENSITIVE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENSITIVE_ISSET_ID);
  }

  /** Returns true if field SENSITIVE is set (has been assigned a value) and false otherwise */
  public boolean isSetSENSITIVE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENSITIVE_ISSET_ID);
  }

  public void setSENSITIVEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENSITIVE_ISSET_ID, value);
  }

  public byte getALWAYS_SENSITIVE() {
    return this.ALWAYS_SENSITIVE;
  }

  public Attribute setALWAYS_SENSITIVE(byte ALWAYS_SENSITIVE) {
    this.ALWAYS_SENSITIVE = ALWAYS_SENSITIVE;
    setALWAYS_SENSITIVEIsSet(true);
    return this;
  }

  public void unsetALWAYS_SENSITIVE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALWAYS_SENSITIVE_ISSET_ID);
  }

  /** Returns true if field ALWAYS_SENSITIVE is set (has been assigned a value) and false otherwise */
  public boolean isSetALWAYS_SENSITIVE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALWAYS_SENSITIVE_ISSET_ID);
  }

  public void setALWAYS_SENSITIVEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALWAYS_SENSITIVE_ISSET_ID, value);
  }

  public byte getEXTRACTABLE() {
    return this.EXTRACTABLE;
  }

  public Attribute setEXTRACTABLE(byte EXTRACTABLE) {
    this.EXTRACTABLE = EXTRACTABLE;
    setEXTRACTABLEIsSet(true);
    return this;
  }

  public void unsetEXTRACTABLE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXTRACTABLE_ISSET_ID);
  }

  /** Returns true if field EXTRACTABLE is set (has been assigned a value) and false otherwise */
  public boolean isSetEXTRACTABLE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXTRACTABLE_ISSET_ID);
  }

  public void setEXTRACTABLEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXTRACTABLE_ISSET_ID, value);
  }

  public byte getNEVER_EXTRACTABLE() {
    return this.NEVER_EXTRACTABLE;
  }

  public Attribute setNEVER_EXTRACTABLE(byte NEVER_EXTRACTABLE) {
    this.NEVER_EXTRACTABLE = NEVER_EXTRACTABLE;
    setNEVER_EXTRACTABLEIsSet(true);
    return this;
  }

  public void unsetNEVER_EXTRACTABLE() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEVER_EXTRACTABLE_ISSET_ID);
  }

  /** Returns true if field NEVER_EXTRACTABLE is set (has been assigned a value) and false otherwise */
  public boolean isSetNEVER_EXTRACTABLE() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEVER_EXTRACTABLE_ISSET_ID);
  }

  public void setNEVER_EXTRACTABLEIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEVER_EXTRACTABLE_ISSET_ID, value);
  }

  public byte[] getMODULUS() {
    setMODULUS(org.apache.thrift.TBaseHelper.rightSize(MODULUS));
    return MODULUS == null ? null : MODULUS.array();
  }

  public java.nio.ByteBuffer bufferForMODULUS() {
    return org.apache.thrift.TBaseHelper.copyBinary(MODULUS);
  }

  public Attribute setMODULUS(byte[] MODULUS) {
    this.MODULUS = MODULUS == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(MODULUS.clone());
    return this;
  }

  public Attribute setMODULUS(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer MODULUS) {
    this.MODULUS = org.apache.thrift.TBaseHelper.copyBinary(MODULUS);
    return this;
  }

  public void unsetMODULUS() {
    this.MODULUS = null;
  }

  /** Returns true if field MODULUS is set (has been assigned a value) and false otherwise */
  public boolean isSetMODULUS() {
    return this.MODULUS != null;
  }

  public void setMODULUSIsSet(boolean value) {
    if (!value) {
      this.MODULUS = null;
    }
  }

  public int getMODULUS_BITS() {
    return this.MODULUS_BITS;
  }

  public Attribute setMODULUS_BITS(int MODULUS_BITS) {
    this.MODULUS_BITS = MODULUS_BITS;
    setMODULUS_BITSIsSet(true);
    return this;
  }

  public void unsetMODULUS_BITS() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODULUS_BITS_ISSET_ID);
  }

  /** Returns true if field MODULUS_BITS is set (has been assigned a value) and false otherwise */
  public boolean isSetMODULUS_BITS() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODULUS_BITS_ISSET_ID);
  }

  public void setMODULUS_BITSIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODULUS_BITS_ISSET_ID, value);
  }

  public byte[] getPRIME_1() {
    setPRIME_1(org.apache.thrift.TBaseHelper.rightSize(PRIME_1));
    return PRIME_1 == null ? null : PRIME_1.array();
  }

  public java.nio.ByteBuffer bufferForPRIME_1() {
    return org.apache.thrift.TBaseHelper.copyBinary(PRIME_1);
  }

  public Attribute setPRIME_1(byte[] PRIME_1) {
    this.PRIME_1 = PRIME_1 == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(PRIME_1.clone());
    return this;
  }

  public Attribute setPRIME_1(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer PRIME_1) {
    this.PRIME_1 = org.apache.thrift.TBaseHelper.copyBinary(PRIME_1);
    return this;
  }

  public void unsetPRIME_1() {
    this.PRIME_1 = null;
  }

  /** Returns true if field PRIME_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPRIME_1() {
    return this.PRIME_1 != null;
  }

  public void setPRIME_1IsSet(boolean value) {
    if (!value) {
      this.PRIME_1 = null;
    }
  }

  public byte[] getPRIME_2() {
    setPRIME_2(org.apache.thrift.TBaseHelper.rightSize(PRIME_2));
    return PRIME_2 == null ? null : PRIME_2.array();
  }

  public java.nio.ByteBuffer bufferForPRIME_2() {
    return org.apache.thrift.TBaseHelper.copyBinary(PRIME_2);
  }

  public Attribute setPRIME_2(byte[] PRIME_2) {
    this.PRIME_2 = PRIME_2 == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(PRIME_2.clone());
    return this;
  }

  public Attribute setPRIME_2(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer PRIME_2) {
    this.PRIME_2 = org.apache.thrift.TBaseHelper.copyBinary(PRIME_2);
    return this;
  }

  public void unsetPRIME_2() {
    this.PRIME_2 = null;
  }

  /** Returns true if field PRIME_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPRIME_2() {
    return this.PRIME_2 != null;
  }

  public void setPRIME_2IsSet(boolean value) {
    if (!value) {
      this.PRIME_2 = null;
    }
  }

  public byte[] getCOEFFICIENT() {
    setCOEFFICIENT(org.apache.thrift.TBaseHelper.rightSize(COEFFICIENT));
    return COEFFICIENT == null ? null : COEFFICIENT.array();
  }

  public java.nio.ByteBuffer bufferForCOEFFICIENT() {
    return org.apache.thrift.TBaseHelper.copyBinary(COEFFICIENT);
  }

  public Attribute setCOEFFICIENT(byte[] COEFFICIENT) {
    this.COEFFICIENT = COEFFICIENT == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(COEFFICIENT.clone());
    return this;
  }

  public Attribute setCOEFFICIENT(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer COEFFICIENT) {
    this.COEFFICIENT = org.apache.thrift.TBaseHelper.copyBinary(COEFFICIENT);
    return this;
  }

  public void unsetCOEFFICIENT() {
    this.COEFFICIENT = null;
  }

  /** Returns true if field COEFFICIENT is set (has been assigned a value) and false otherwise */
  public boolean isSetCOEFFICIENT() {
    return this.COEFFICIENT != null;
  }

  public void setCOEFFICIENTIsSet(boolean value) {
    if (!value) {
      this.COEFFICIENT = null;
    }
  }

  public byte[] getEXPONENT_1() {
    setEXPONENT_1(org.apache.thrift.TBaseHelper.rightSize(EXPONENT_1));
    return EXPONENT_1 == null ? null : EXPONENT_1.array();
  }

  public java.nio.ByteBuffer bufferForEXPONENT_1() {
    return org.apache.thrift.TBaseHelper.copyBinary(EXPONENT_1);
  }

  public Attribute setEXPONENT_1(byte[] EXPONENT_1) {
    this.EXPONENT_1 = EXPONENT_1 == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(EXPONENT_1.clone());
    return this;
  }

  public Attribute setEXPONENT_1(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer EXPONENT_1) {
    this.EXPONENT_1 = org.apache.thrift.TBaseHelper.copyBinary(EXPONENT_1);
    return this;
  }

  public void unsetEXPONENT_1() {
    this.EXPONENT_1 = null;
  }

  /** Returns true if field EXPONENT_1 is set (has been assigned a value) and false otherwise */
  public boolean isSetEXPONENT_1() {
    return this.EXPONENT_1 != null;
  }

  public void setEXPONENT_1IsSet(boolean value) {
    if (!value) {
      this.EXPONENT_1 = null;
    }
  }

  public byte[] getEXPONENT_2() {
    setEXPONENT_2(org.apache.thrift.TBaseHelper.rightSize(EXPONENT_2));
    return EXPONENT_2 == null ? null : EXPONENT_2.array();
  }

  public java.nio.ByteBuffer bufferForEXPONENT_2() {
    return org.apache.thrift.TBaseHelper.copyBinary(EXPONENT_2);
  }

  public Attribute setEXPONENT_2(byte[] EXPONENT_2) {
    this.EXPONENT_2 = EXPONENT_2 == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(EXPONENT_2.clone());
    return this;
  }

  public Attribute setEXPONENT_2(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer EXPONENT_2) {
    this.EXPONENT_2 = org.apache.thrift.TBaseHelper.copyBinary(EXPONENT_2);
    return this;
  }

  public void unsetEXPONENT_2() {
    this.EXPONENT_2 = null;
  }

  /** Returns true if field EXPONENT_2 is set (has been assigned a value) and false otherwise */
  public boolean isSetEXPONENT_2() {
    return this.EXPONENT_2 != null;
  }

  public void setEXPONENT_2IsSet(boolean value) {
    if (!value) {
      this.EXPONENT_2 = null;
    }
  }

  public byte[] getPRIVATE_EXPONENT() {
    setPRIVATE_EXPONENT(org.apache.thrift.TBaseHelper.rightSize(PRIVATE_EXPONENT));
    return PRIVATE_EXPONENT == null ? null : PRIVATE_EXPONENT.array();
  }

  public java.nio.ByteBuffer bufferForPRIVATE_EXPONENT() {
    return org.apache.thrift.TBaseHelper.copyBinary(PRIVATE_EXPONENT);
  }

  public Attribute setPRIVATE_EXPONENT(byte[] PRIVATE_EXPONENT) {
    this.PRIVATE_EXPONENT = PRIVATE_EXPONENT == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(PRIVATE_EXPONENT.clone());
    return this;
  }

  public Attribute setPRIVATE_EXPONENT(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer PRIVATE_EXPONENT) {
    this.PRIVATE_EXPONENT = org.apache.thrift.TBaseHelper.copyBinary(PRIVATE_EXPONENT);
    return this;
  }

  public void unsetPRIVATE_EXPONENT() {
    this.PRIVATE_EXPONENT = null;
  }

  /** Returns true if field PRIVATE_EXPONENT is set (has been assigned a value) and false otherwise */
  public boolean isSetPRIVATE_EXPONENT() {
    return this.PRIVATE_EXPONENT != null;
  }

  public void setPRIVATE_EXPONENTIsSet(boolean value) {
    if (!value) {
      this.PRIVATE_EXPONENT = null;
    }
  }

  public byte[] getPUBLIC_EXPONENT() {
    setPUBLIC_EXPONENT(org.apache.thrift.TBaseHelper.rightSize(PUBLIC_EXPONENT));
    return PUBLIC_EXPONENT == null ? null : PUBLIC_EXPONENT.array();
  }

  public java.nio.ByteBuffer bufferForPUBLIC_EXPONENT() {
    return org.apache.thrift.TBaseHelper.copyBinary(PUBLIC_EXPONENT);
  }

  public Attribute setPUBLIC_EXPONENT(byte[] PUBLIC_EXPONENT) {
    this.PUBLIC_EXPONENT = PUBLIC_EXPONENT == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(PUBLIC_EXPONENT.clone());
    return this;
  }

  public Attribute setPUBLIC_EXPONENT(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer PUBLIC_EXPONENT) {
    this.PUBLIC_EXPONENT = org.apache.thrift.TBaseHelper.copyBinary(PUBLIC_EXPONENT);
    return this;
  }

  public void unsetPUBLIC_EXPONENT() {
    this.PUBLIC_EXPONENT = null;
  }

  /** Returns true if field PUBLIC_EXPONENT is set (has been assigned a value) and false otherwise */
  public boolean isSetPUBLIC_EXPONENT() {
    return this.PUBLIC_EXPONENT != null;
  }

  public void setPUBLIC_EXPONENTIsSet(boolean value) {
    if (!value) {
      this.PUBLIC_EXPONENT = null;
    }
  }

  public byte[] getEC_PARAMS() {
    setEC_PARAMS(org.apache.thrift.TBaseHelper.rightSize(EC_PARAMS));
    return EC_PARAMS == null ? null : EC_PARAMS.array();
  }

  public java.nio.ByteBuffer bufferForEC_PARAMS() {
    return org.apache.thrift.TBaseHelper.copyBinary(EC_PARAMS);
  }

  public Attribute setEC_PARAMS(byte[] EC_PARAMS) {
    this.EC_PARAMS = EC_PARAMS == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(EC_PARAMS.clone());
    return this;
  }

  public Attribute setEC_PARAMS(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer EC_PARAMS) {
    this.EC_PARAMS = org.apache.thrift.TBaseHelper.copyBinary(EC_PARAMS);
    return this;
  }

  public void unsetEC_PARAMS() {
    this.EC_PARAMS = null;
  }

  /** Returns true if field EC_PARAMS is set (has been assigned a value) and false otherwise */
  public boolean isSetEC_PARAMS() {
    return this.EC_PARAMS != null;
  }

  public void setEC_PARAMSIsSet(boolean value) {
    if (!value) {
      this.EC_PARAMS = null;
    }
  }

  public byte[] getEC_POINT() {
    setEC_POINT(org.apache.thrift.TBaseHelper.rightSize(EC_POINT));
    return EC_POINT == null ? null : EC_POINT.array();
  }

  public java.nio.ByteBuffer bufferForEC_POINT() {
    return org.apache.thrift.TBaseHelper.copyBinary(EC_POINT);
  }

  public Attribute setEC_POINT(byte[] EC_POINT) {
    this.EC_POINT = EC_POINT == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(EC_POINT.clone());
    return this;
  }

  public Attribute setEC_POINT(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer EC_POINT) {
    this.EC_POINT = org.apache.thrift.TBaseHelper.copyBinary(EC_POINT);
    return this;
  }

  public void unsetEC_POINT() {
    this.EC_POINT = null;
  }

  /** Returns true if field EC_POINT is set (has been assigned a value) and false otherwise */
  public boolean isSetEC_POINT() {
    return this.EC_POINT != null;
  }

  public void setEC_POINTIsSet(boolean value) {
    if (!value) {
      this.EC_POINT = null;
    }
  }

  public byte[] getVALUE() {
    setVALUE(org.apache.thrift.TBaseHelper.rightSize(VALUE));
    return VALUE == null ? null : VALUE.array();
  }

  public java.nio.ByteBuffer bufferForVALUE() {
    return org.apache.thrift.TBaseHelper.copyBinary(VALUE);
  }

  public Attribute setVALUE(byte[] VALUE) {
    this.VALUE = VALUE == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(VALUE.clone());
    return this;
  }

  public Attribute setVALUE(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer VALUE) {
    this.VALUE = org.apache.thrift.TBaseHelper.copyBinary(VALUE);
    return this;
  }

  public void unsetVALUE() {
    this.VALUE = null;
  }

  /** Returns true if field VALUE is set (has been assigned a value) and false otherwise */
  public boolean isSetVALUE() {
    return this.VALUE != null;
  }

  public void setVALUEIsSet(boolean value) {
    if (!value) {
      this.VALUE = null;
    }
  }

  public int getVALUE_LEN() {
    return this.VALUE_LEN;
  }

  public Attribute setVALUE_LEN(int VALUE_LEN) {
    this.VALUE_LEN = VALUE_LEN;
    setVALUE_LENIsSet(true);
    return this;
  }

  public void unsetVALUE_LEN() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALUE_LEN_ISSET_ID);
  }

  /** Returns true if field VALUE_LEN is set (has been assigned a value) and false otherwise */
  public boolean isSetVALUE_LEN() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALUE_LEN_ISSET_ID);
  }

  public void setVALUE_LENIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALUE_LEN_ISSET_ID, value);
  }

  public byte[] getCHECK_VALUE() {
    setCHECK_VALUE(org.apache.thrift.TBaseHelper.rightSize(CHECK_VALUE));
    return CHECK_VALUE == null ? null : CHECK_VALUE.array();
  }

  public java.nio.ByteBuffer bufferForCHECK_VALUE() {
    return org.apache.thrift.TBaseHelper.copyBinary(CHECK_VALUE);
  }

  public Attribute setCHECK_VALUE(byte[] CHECK_VALUE) {
    this.CHECK_VALUE = CHECK_VALUE == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(CHECK_VALUE.clone());
    return this;
  }

  public Attribute setCHECK_VALUE(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer CHECK_VALUE) {
    this.CHECK_VALUE = org.apache.thrift.TBaseHelper.copyBinary(CHECK_VALUE);
    return this;
  }

  public void unsetCHECK_VALUE() {
    this.CHECK_VALUE = null;
  }

  /** Returns true if field CHECK_VALUE is set (has been assigned a value) and false otherwise */
  public boolean isSetCHECK_VALUE() {
    return this.CHECK_VALUE != null;
  }

  public void setCHECK_VALUEIsSet(boolean value) {
    if (!value) {
      this.CHECK_VALUE = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CLASS:
      if (value == null) {
        unsetCLASS();
      } else {
        setCLASS((java.lang.Integer)value);
      }
      break;

    case KEY__TYPE:
      if (value == null) {
        unsetKEY_TYPE();
      } else {
        setKEY_TYPE((java.lang.Integer)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLABEL();
      } else {
        if (value instanceof byte[]) {
          setLABEL((byte[])value);
        } else {
          setLABEL((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ID:
      if (value == null) {
        unsetID();
      } else {
        if (value instanceof byte[]) {
          setID((byte[])value);
        } else {
          setID((java.nio.ByteBuffer)value);
        }
      }
      break;

    case LOCAL:
      if (value == null) {
        unsetLOCAL();
      } else {
        setLOCAL((java.lang.Byte)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetTOKEN();
      } else {
        setTOKEN((java.lang.Byte)value);
      }
      break;

    case PRIVATE:
      if (value == null) {
        unsetPRIVATE();
      } else {
        setPRIVATE((java.lang.Byte)value);
      }
      break;

    case ENCRYPT:
      if (value == null) {
        unsetENCRYPT();
      } else {
        setENCRYPT((java.lang.Byte)value);
      }
      break;

    case DECRYPT:
      if (value == null) {
        unsetDECRYPT();
      } else {
        setDECRYPT((java.lang.Byte)value);
      }
      break;

    case DERIVE:
      if (value == null) {
        unsetDERIVE();
      } else {
        setDERIVE((java.lang.Byte)value);
      }
      break;

    case MODIFIABLE:
      if (value == null) {
        unsetMODIFIABLE();
      } else {
        setMODIFIABLE((java.lang.Byte)value);
      }
      break;

    case DESTROYABLE:
      if (value == null) {
        unsetDESTROYABLE();
      } else {
        setDESTROYABLE((java.lang.Byte)value);
      }
      break;

    case SIGN:
      if (value == null) {
        unsetSIGN();
      } else {
        setSIGN((java.lang.Byte)value);
      }
      break;

    case SIGN__RECOVER:
      if (value == null) {
        unsetSIGN_RECOVER();
      } else {
        setSIGN_RECOVER((java.lang.Byte)value);
      }
      break;

    case VERIFY:
      if (value == null) {
        unsetVERIFY();
      } else {
        setVERIFY((java.lang.Byte)value);
      }
      break;

    case VERIFY__RECOVER:
      if (value == null) {
        unsetVERIFY_RECOVER();
      } else {
        setVERIFY_RECOVER((java.lang.Byte)value);
      }
      break;

    case WRAP:
      if (value == null) {
        unsetWRAP();
      } else {
        setWRAP((java.lang.Byte)value);
      }
      break;

    case UNWRAP:
      if (value == null) {
        unsetUNWRAP();
      } else {
        setUNWRAP((java.lang.Byte)value);
      }
      break;

    case SENSITIVE:
      if (value == null) {
        unsetSENSITIVE();
      } else {
        setSENSITIVE((java.lang.Byte)value);
      }
      break;

    case ALWAYS__SENSITIVE:
      if (value == null) {
        unsetALWAYS_SENSITIVE();
      } else {
        setALWAYS_SENSITIVE((java.lang.Byte)value);
      }
      break;

    case EXTRACTABLE:
      if (value == null) {
        unsetEXTRACTABLE();
      } else {
        setEXTRACTABLE((java.lang.Byte)value);
      }
      break;

    case NEVER__EXTRACTABLE:
      if (value == null) {
        unsetNEVER_EXTRACTABLE();
      } else {
        setNEVER_EXTRACTABLE((java.lang.Byte)value);
      }
      break;

    case MODULUS:
      if (value == null) {
        unsetMODULUS();
      } else {
        if (value instanceof byte[]) {
          setMODULUS((byte[])value);
        } else {
          setMODULUS((java.nio.ByteBuffer)value);
        }
      }
      break;

    case MODULUS__BITS:
      if (value == null) {
        unsetMODULUS_BITS();
      } else {
        setMODULUS_BITS((java.lang.Integer)value);
      }
      break;

    case PRIME_1:
      if (value == null) {
        unsetPRIME_1();
      } else {
        if (value instanceof byte[]) {
          setPRIME_1((byte[])value);
        } else {
          setPRIME_1((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PRIME_2:
      if (value == null) {
        unsetPRIME_2();
      } else {
        if (value instanceof byte[]) {
          setPRIME_2((byte[])value);
        } else {
          setPRIME_2((java.nio.ByteBuffer)value);
        }
      }
      break;

    case COEFFICIENT:
      if (value == null) {
        unsetCOEFFICIENT();
      } else {
        if (value instanceof byte[]) {
          setCOEFFICIENT((byte[])value);
        } else {
          setCOEFFICIENT((java.nio.ByteBuffer)value);
        }
      }
      break;

    case EXPONENT_1:
      if (value == null) {
        unsetEXPONENT_1();
      } else {
        if (value instanceof byte[]) {
          setEXPONENT_1((byte[])value);
        } else {
          setEXPONENT_1((java.nio.ByteBuffer)value);
        }
      }
      break;

    case EXPONENT_2:
      if (value == null) {
        unsetEXPONENT_2();
      } else {
        if (value instanceof byte[]) {
          setEXPONENT_2((byte[])value);
        } else {
          setEXPONENT_2((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PRIVATE__EXPONENT:
      if (value == null) {
        unsetPRIVATE_EXPONENT();
      } else {
        if (value instanceof byte[]) {
          setPRIVATE_EXPONENT((byte[])value);
        } else {
          setPRIVATE_EXPONENT((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PUBLIC__EXPONENT:
      if (value == null) {
        unsetPUBLIC_EXPONENT();
      } else {
        if (value instanceof byte[]) {
          setPUBLIC_EXPONENT((byte[])value);
        } else {
          setPUBLIC_EXPONENT((java.nio.ByteBuffer)value);
        }
      }
      break;

    case EC__PARAMS:
      if (value == null) {
        unsetEC_PARAMS();
      } else {
        if (value instanceof byte[]) {
          setEC_PARAMS((byte[])value);
        } else {
          setEC_PARAMS((java.nio.ByteBuffer)value);
        }
      }
      break;

    case EC__POINT:
      if (value == null) {
        unsetEC_POINT();
      } else {
        if (value instanceof byte[]) {
          setEC_POINT((byte[])value);
        } else {
          setEC_POINT((java.nio.ByteBuffer)value);
        }
      }
      break;

    case VALUE:
      if (value == null) {
        unsetVALUE();
      } else {
        if (value instanceof byte[]) {
          setVALUE((byte[])value);
        } else {
          setVALUE((java.nio.ByteBuffer)value);
        }
      }
      break;

    case VALUE__LEN:
      if (value == null) {
        unsetVALUE_LEN();
      } else {
        setVALUE_LEN((java.lang.Integer)value);
      }
      break;

    case CHECK__VALUE:
      if (value == null) {
        unsetCHECK_VALUE();
      } else {
        if (value instanceof byte[]) {
          setCHECK_VALUE((byte[])value);
        } else {
          setCHECK_VALUE((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLASS:
      return getCLASS();

    case KEY__TYPE:
      return getKEY_TYPE();

    case LABEL:
      return getLABEL();

    case ID:
      return getID();

    case LOCAL:
      return getLOCAL();

    case TOKEN:
      return getTOKEN();

    case PRIVATE:
      return getPRIVATE();

    case ENCRYPT:
      return getENCRYPT();

    case DECRYPT:
      return getDECRYPT();

    case DERIVE:
      return getDERIVE();

    case MODIFIABLE:
      return getMODIFIABLE();

    case DESTROYABLE:
      return getDESTROYABLE();

    case SIGN:
      return getSIGN();

    case SIGN__RECOVER:
      return getSIGN_RECOVER();

    case VERIFY:
      return getVERIFY();

    case VERIFY__RECOVER:
      return getVERIFY_RECOVER();

    case WRAP:
      return getWRAP();

    case UNWRAP:
      return getUNWRAP();

    case SENSITIVE:
      return getSENSITIVE();

    case ALWAYS__SENSITIVE:
      return getALWAYS_SENSITIVE();

    case EXTRACTABLE:
      return getEXTRACTABLE();

    case NEVER__EXTRACTABLE:
      return getNEVER_EXTRACTABLE();

    case MODULUS:
      return getMODULUS();

    case MODULUS__BITS:
      return getMODULUS_BITS();

    case PRIME_1:
      return getPRIME_1();

    case PRIME_2:
      return getPRIME_2();

    case COEFFICIENT:
      return getCOEFFICIENT();

    case EXPONENT_1:
      return getEXPONENT_1();

    case EXPONENT_2:
      return getEXPONENT_2();

    case PRIVATE__EXPONENT:
      return getPRIVATE_EXPONENT();

    case PUBLIC__EXPONENT:
      return getPUBLIC_EXPONENT();

    case EC__PARAMS:
      return getEC_PARAMS();

    case EC__POINT:
      return getEC_POINT();

    case VALUE:
      return getVALUE();

    case VALUE__LEN:
      return getVALUE_LEN();

    case CHECK__VALUE:
      return getCHECK_VALUE();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLASS:
      return isSetCLASS();
    case KEY__TYPE:
      return isSetKEY_TYPE();
    case LABEL:
      return isSetLABEL();
    case ID:
      return isSetID();
    case LOCAL:
      return isSetLOCAL();
    case TOKEN:
      return isSetTOKEN();
    case PRIVATE:
      return isSetPRIVATE();
    case ENCRYPT:
      return isSetENCRYPT();
    case DECRYPT:
      return isSetDECRYPT();
    case DERIVE:
      return isSetDERIVE();
    case MODIFIABLE:
      return isSetMODIFIABLE();
    case DESTROYABLE:
      return isSetDESTROYABLE();
    case SIGN:
      return isSetSIGN();
    case SIGN__RECOVER:
      return isSetSIGN_RECOVER();
    case VERIFY:
      return isSetVERIFY();
    case VERIFY__RECOVER:
      return isSetVERIFY_RECOVER();
    case WRAP:
      return isSetWRAP();
    case UNWRAP:
      return isSetUNWRAP();
    case SENSITIVE:
      return isSetSENSITIVE();
    case ALWAYS__SENSITIVE:
      return isSetALWAYS_SENSITIVE();
    case EXTRACTABLE:
      return isSetEXTRACTABLE();
    case NEVER__EXTRACTABLE:
      return isSetNEVER_EXTRACTABLE();
    case MODULUS:
      return isSetMODULUS();
    case MODULUS__BITS:
      return isSetMODULUS_BITS();
    case PRIME_1:
      return isSetPRIME_1();
    case PRIME_2:
      return isSetPRIME_2();
    case COEFFICIENT:
      return isSetCOEFFICIENT();
    case EXPONENT_1:
      return isSetEXPONENT_1();
    case EXPONENT_2:
      return isSetEXPONENT_2();
    case PRIVATE__EXPONENT:
      return isSetPRIVATE_EXPONENT();
    case PUBLIC__EXPONENT:
      return isSetPUBLIC_EXPONENT();
    case EC__PARAMS:
      return isSetEC_PARAMS();
    case EC__POINT:
      return isSetEC_POINT();
    case VALUE:
      return isSetVALUE();
    case VALUE__LEN:
      return isSetVALUE_LEN();
    case CHECK__VALUE:
      return isSetCHECK_VALUE();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Attribute)
      return this.equals((Attribute)that);
    return false;
  }

  public boolean equals(Attribute that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_CLASS = true;
    boolean that_present_CLASS = true;
    if (this_present_CLASS || that_present_CLASS) {
      if (!(this_present_CLASS && that_present_CLASS))
        return false;
      if (this.CLASS != that.CLASS)
        return false;
    }

    boolean this_present_KEY_TYPE = true;
    boolean that_present_KEY_TYPE = true;
    if (this_present_KEY_TYPE || that_present_KEY_TYPE) {
      if (!(this_present_KEY_TYPE && that_present_KEY_TYPE))
        return false;
      if (this.KEY_TYPE != that.KEY_TYPE)
        return false;
    }

    boolean this_present_LABEL = true && this.isSetLABEL();
    boolean that_present_LABEL = true && that.isSetLABEL();
    if (this_present_LABEL || that_present_LABEL) {
      if (!(this_present_LABEL && that_present_LABEL))
        return false;
      if (!this.LABEL.equals(that.LABEL))
        return false;
    }

    boolean this_present_ID = true && this.isSetID();
    boolean that_present_ID = true && that.isSetID();
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (!this.ID.equals(that.ID))
        return false;
    }

    boolean this_present_LOCAL = true;
    boolean that_present_LOCAL = true;
    if (this_present_LOCAL || that_present_LOCAL) {
      if (!(this_present_LOCAL && that_present_LOCAL))
        return false;
      if (this.LOCAL != that.LOCAL)
        return false;
    }

    boolean this_present_TOKEN = true;
    boolean that_present_TOKEN = true;
    if (this_present_TOKEN || that_present_TOKEN) {
      if (!(this_present_TOKEN && that_present_TOKEN))
        return false;
      if (this.TOKEN != that.TOKEN)
        return false;
    }

    boolean this_present_PRIVATE = true;
    boolean that_present_PRIVATE = true;
    if (this_present_PRIVATE || that_present_PRIVATE) {
      if (!(this_present_PRIVATE && that_present_PRIVATE))
        return false;
      if (this.PRIVATE != that.PRIVATE)
        return false;
    }

    boolean this_present_ENCRYPT = true;
    boolean that_present_ENCRYPT = true;
    if (this_present_ENCRYPT || that_present_ENCRYPT) {
      if (!(this_present_ENCRYPT && that_present_ENCRYPT))
        return false;
      if (this.ENCRYPT != that.ENCRYPT)
        return false;
    }

    boolean this_present_DECRYPT = true;
    boolean that_present_DECRYPT = true;
    if (this_present_DECRYPT || that_present_DECRYPT) {
      if (!(this_present_DECRYPT && that_present_DECRYPT))
        return false;
      if (this.DECRYPT != that.DECRYPT)
        return false;
    }

    boolean this_present_DERIVE = true;
    boolean that_present_DERIVE = true;
    if (this_present_DERIVE || that_present_DERIVE) {
      if (!(this_present_DERIVE && that_present_DERIVE))
        return false;
      if (this.DERIVE != that.DERIVE)
        return false;
    }

    boolean this_present_MODIFIABLE = true;
    boolean that_present_MODIFIABLE = true;
    if (this_present_MODIFIABLE || that_present_MODIFIABLE) {
      if (!(this_present_MODIFIABLE && that_present_MODIFIABLE))
        return false;
      if (this.MODIFIABLE != that.MODIFIABLE)
        return false;
    }

    boolean this_present_DESTROYABLE = true;
    boolean that_present_DESTROYABLE = true;
    if (this_present_DESTROYABLE || that_present_DESTROYABLE) {
      if (!(this_present_DESTROYABLE && that_present_DESTROYABLE))
        return false;
      if (this.DESTROYABLE != that.DESTROYABLE)
        return false;
    }

    boolean this_present_SIGN = true;
    boolean that_present_SIGN = true;
    if (this_present_SIGN || that_present_SIGN) {
      if (!(this_present_SIGN && that_present_SIGN))
        return false;
      if (this.SIGN != that.SIGN)
        return false;
    }

    boolean this_present_SIGN_RECOVER = true;
    boolean that_present_SIGN_RECOVER = true;
    if (this_present_SIGN_RECOVER || that_present_SIGN_RECOVER) {
      if (!(this_present_SIGN_RECOVER && that_present_SIGN_RECOVER))
        return false;
      if (this.SIGN_RECOVER != that.SIGN_RECOVER)
        return false;
    }

    boolean this_present_VERIFY = true;
    boolean that_present_VERIFY = true;
    if (this_present_VERIFY || that_present_VERIFY) {
      if (!(this_present_VERIFY && that_present_VERIFY))
        return false;
      if (this.VERIFY != that.VERIFY)
        return false;
    }

    boolean this_present_VERIFY_RECOVER = true;
    boolean that_present_VERIFY_RECOVER = true;
    if (this_present_VERIFY_RECOVER || that_present_VERIFY_RECOVER) {
      if (!(this_present_VERIFY_RECOVER && that_present_VERIFY_RECOVER))
        return false;
      if (this.VERIFY_RECOVER != that.VERIFY_RECOVER)
        return false;
    }

    boolean this_present_WRAP = true;
    boolean that_present_WRAP = true;
    if (this_present_WRAP || that_present_WRAP) {
      if (!(this_present_WRAP && that_present_WRAP))
        return false;
      if (this.WRAP != that.WRAP)
        return false;
    }

    boolean this_present_UNWRAP = true;
    boolean that_present_UNWRAP = true;
    if (this_present_UNWRAP || that_present_UNWRAP) {
      if (!(this_present_UNWRAP && that_present_UNWRAP))
        return false;
      if (this.UNWRAP != that.UNWRAP)
        return false;
    }

    boolean this_present_SENSITIVE = true;
    boolean that_present_SENSITIVE = true;
    if (this_present_SENSITIVE || that_present_SENSITIVE) {
      if (!(this_present_SENSITIVE && that_present_SENSITIVE))
        return false;
      if (this.SENSITIVE != that.SENSITIVE)
        return false;
    }

    boolean this_present_ALWAYS_SENSITIVE = true;
    boolean that_present_ALWAYS_SENSITIVE = true;
    if (this_present_ALWAYS_SENSITIVE || that_present_ALWAYS_SENSITIVE) {
      if (!(this_present_ALWAYS_SENSITIVE && that_present_ALWAYS_SENSITIVE))
        return false;
      if (this.ALWAYS_SENSITIVE != that.ALWAYS_SENSITIVE)
        return false;
    }

    boolean this_present_EXTRACTABLE = true;
    boolean that_present_EXTRACTABLE = true;
    if (this_present_EXTRACTABLE || that_present_EXTRACTABLE) {
      if (!(this_present_EXTRACTABLE && that_present_EXTRACTABLE))
        return false;
      if (this.EXTRACTABLE != that.EXTRACTABLE)
        return false;
    }

    boolean this_present_NEVER_EXTRACTABLE = true;
    boolean that_present_NEVER_EXTRACTABLE = true;
    if (this_present_NEVER_EXTRACTABLE || that_present_NEVER_EXTRACTABLE) {
      if (!(this_present_NEVER_EXTRACTABLE && that_present_NEVER_EXTRACTABLE))
        return false;
      if (this.NEVER_EXTRACTABLE != that.NEVER_EXTRACTABLE)
        return false;
    }

    boolean this_present_MODULUS = true && this.isSetMODULUS();
    boolean that_present_MODULUS = true && that.isSetMODULUS();
    if (this_present_MODULUS || that_present_MODULUS) {
      if (!(this_present_MODULUS && that_present_MODULUS))
        return false;
      if (!this.MODULUS.equals(that.MODULUS))
        return false;
    }

    boolean this_present_MODULUS_BITS = true;
    boolean that_present_MODULUS_BITS = true;
    if (this_present_MODULUS_BITS || that_present_MODULUS_BITS) {
      if (!(this_present_MODULUS_BITS && that_present_MODULUS_BITS))
        return false;
      if (this.MODULUS_BITS != that.MODULUS_BITS)
        return false;
    }

    boolean this_present_PRIME_1 = true && this.isSetPRIME_1();
    boolean that_present_PRIME_1 = true && that.isSetPRIME_1();
    if (this_present_PRIME_1 || that_present_PRIME_1) {
      if (!(this_present_PRIME_1 && that_present_PRIME_1))
        return false;
      if (!this.PRIME_1.equals(that.PRIME_1))
        return false;
    }

    boolean this_present_PRIME_2 = true && this.isSetPRIME_2();
    boolean that_present_PRIME_2 = true && that.isSetPRIME_2();
    if (this_present_PRIME_2 || that_present_PRIME_2) {
      if (!(this_present_PRIME_2 && that_present_PRIME_2))
        return false;
      if (!this.PRIME_2.equals(that.PRIME_2))
        return false;
    }

    boolean this_present_COEFFICIENT = true && this.isSetCOEFFICIENT();
    boolean that_present_COEFFICIENT = true && that.isSetCOEFFICIENT();
    if (this_present_COEFFICIENT || that_present_COEFFICIENT) {
      if (!(this_present_COEFFICIENT && that_present_COEFFICIENT))
        return false;
      if (!this.COEFFICIENT.equals(that.COEFFICIENT))
        return false;
    }

    boolean this_present_EXPONENT_1 = true && this.isSetEXPONENT_1();
    boolean that_present_EXPONENT_1 = true && that.isSetEXPONENT_1();
    if (this_present_EXPONENT_1 || that_present_EXPONENT_1) {
      if (!(this_present_EXPONENT_1 && that_present_EXPONENT_1))
        return false;
      if (!this.EXPONENT_1.equals(that.EXPONENT_1))
        return false;
    }

    boolean this_present_EXPONENT_2 = true && this.isSetEXPONENT_2();
    boolean that_present_EXPONENT_2 = true && that.isSetEXPONENT_2();
    if (this_present_EXPONENT_2 || that_present_EXPONENT_2) {
      if (!(this_present_EXPONENT_2 && that_present_EXPONENT_2))
        return false;
      if (!this.EXPONENT_2.equals(that.EXPONENT_2))
        return false;
    }

    boolean this_present_PRIVATE_EXPONENT = true && this.isSetPRIVATE_EXPONENT();
    boolean that_present_PRIVATE_EXPONENT = true && that.isSetPRIVATE_EXPONENT();
    if (this_present_PRIVATE_EXPONENT || that_present_PRIVATE_EXPONENT) {
      if (!(this_present_PRIVATE_EXPONENT && that_present_PRIVATE_EXPONENT))
        return false;
      if (!this.PRIVATE_EXPONENT.equals(that.PRIVATE_EXPONENT))
        return false;
    }

    boolean this_present_PUBLIC_EXPONENT = true && this.isSetPUBLIC_EXPONENT();
    boolean that_present_PUBLIC_EXPONENT = true && that.isSetPUBLIC_EXPONENT();
    if (this_present_PUBLIC_EXPONENT || that_present_PUBLIC_EXPONENT) {
      if (!(this_present_PUBLIC_EXPONENT && that_present_PUBLIC_EXPONENT))
        return false;
      if (!this.PUBLIC_EXPONENT.equals(that.PUBLIC_EXPONENT))
        return false;
    }

    boolean this_present_EC_PARAMS = true && this.isSetEC_PARAMS();
    boolean that_present_EC_PARAMS = true && that.isSetEC_PARAMS();
    if (this_present_EC_PARAMS || that_present_EC_PARAMS) {
      if (!(this_present_EC_PARAMS && that_present_EC_PARAMS))
        return false;
      if (!this.EC_PARAMS.equals(that.EC_PARAMS))
        return false;
    }

    boolean this_present_EC_POINT = true && this.isSetEC_POINT();
    boolean that_present_EC_POINT = true && that.isSetEC_POINT();
    if (this_present_EC_POINT || that_present_EC_POINT) {
      if (!(this_present_EC_POINT && that_present_EC_POINT))
        return false;
      if (!this.EC_POINT.equals(that.EC_POINT))
        return false;
    }

    boolean this_present_VALUE = true && this.isSetVALUE();
    boolean that_present_VALUE = true && that.isSetVALUE();
    if (this_present_VALUE || that_present_VALUE) {
      if (!(this_present_VALUE && that_present_VALUE))
        return false;
      if (!this.VALUE.equals(that.VALUE))
        return false;
    }

    boolean this_present_VALUE_LEN = true;
    boolean that_present_VALUE_LEN = true;
    if (this_present_VALUE_LEN || that_present_VALUE_LEN) {
      if (!(this_present_VALUE_LEN && that_present_VALUE_LEN))
        return false;
      if (this.VALUE_LEN != that.VALUE_LEN)
        return false;
    }

    boolean this_present_CHECK_VALUE = true && this.isSetCHECK_VALUE();
    boolean that_present_CHECK_VALUE = true && that.isSetCHECK_VALUE();
    if (this_present_CHECK_VALUE || that_present_CHECK_VALUE) {
      if (!(this_present_CHECK_VALUE && that_present_CHECK_VALUE))
        return false;
      if (!this.CHECK_VALUE.equals(that.CHECK_VALUE))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + CLASS;

    hashCode = hashCode * 8191 + KEY_TYPE;

    hashCode = hashCode * 8191 + ((isSetLABEL()) ? 131071 : 524287);
    if (isSetLABEL())
      hashCode = hashCode * 8191 + LABEL.hashCode();

    hashCode = hashCode * 8191 + ((isSetID()) ? 131071 : 524287);
    if (isSetID())
      hashCode = hashCode * 8191 + ID.hashCode();

    hashCode = hashCode * 8191 + (int) (LOCAL);

    hashCode = hashCode * 8191 + (int) (TOKEN);

    hashCode = hashCode * 8191 + (int) (PRIVATE);

    hashCode = hashCode * 8191 + (int) (ENCRYPT);

    hashCode = hashCode * 8191 + (int) (DECRYPT);

    hashCode = hashCode * 8191 + (int) (DERIVE);

    hashCode = hashCode * 8191 + (int) (MODIFIABLE);

    hashCode = hashCode * 8191 + (int) (DESTROYABLE);

    hashCode = hashCode * 8191 + (int) (SIGN);

    hashCode = hashCode * 8191 + (int) (SIGN_RECOVER);

    hashCode = hashCode * 8191 + (int) (VERIFY);

    hashCode = hashCode * 8191 + (int) (VERIFY_RECOVER);

    hashCode = hashCode * 8191 + (int) (WRAP);

    hashCode = hashCode * 8191 + (int) (UNWRAP);

    hashCode = hashCode * 8191 + (int) (SENSITIVE);

    hashCode = hashCode * 8191 + (int) (ALWAYS_SENSITIVE);

    hashCode = hashCode * 8191 + (int) (EXTRACTABLE);

    hashCode = hashCode * 8191 + (int) (NEVER_EXTRACTABLE);

    hashCode = hashCode * 8191 + ((isSetMODULUS()) ? 131071 : 524287);
    if (isSetMODULUS())
      hashCode = hashCode * 8191 + MODULUS.hashCode();

    hashCode = hashCode * 8191 + MODULUS_BITS;

    hashCode = hashCode * 8191 + ((isSetPRIME_1()) ? 131071 : 524287);
    if (isSetPRIME_1())
      hashCode = hashCode * 8191 + PRIME_1.hashCode();

    hashCode = hashCode * 8191 + ((isSetPRIME_2()) ? 131071 : 524287);
    if (isSetPRIME_2())
      hashCode = hashCode * 8191 + PRIME_2.hashCode();

    hashCode = hashCode * 8191 + ((isSetCOEFFICIENT()) ? 131071 : 524287);
    if (isSetCOEFFICIENT())
      hashCode = hashCode * 8191 + COEFFICIENT.hashCode();

    hashCode = hashCode * 8191 + ((isSetEXPONENT_1()) ? 131071 : 524287);
    if (isSetEXPONENT_1())
      hashCode = hashCode * 8191 + EXPONENT_1.hashCode();

    hashCode = hashCode * 8191 + ((isSetEXPONENT_2()) ? 131071 : 524287);
    if (isSetEXPONENT_2())
      hashCode = hashCode * 8191 + EXPONENT_2.hashCode();

    hashCode = hashCode * 8191 + ((isSetPRIVATE_EXPONENT()) ? 131071 : 524287);
    if (isSetPRIVATE_EXPONENT())
      hashCode = hashCode * 8191 + PRIVATE_EXPONENT.hashCode();

    hashCode = hashCode * 8191 + ((isSetPUBLIC_EXPONENT()) ? 131071 : 524287);
    if (isSetPUBLIC_EXPONENT())
      hashCode = hashCode * 8191 + PUBLIC_EXPONENT.hashCode();

    hashCode = hashCode * 8191 + ((isSetEC_PARAMS()) ? 131071 : 524287);
    if (isSetEC_PARAMS())
      hashCode = hashCode * 8191 + EC_PARAMS.hashCode();

    hashCode = hashCode * 8191 + ((isSetEC_POINT()) ? 131071 : 524287);
    if (isSetEC_POINT())
      hashCode = hashCode * 8191 + EC_POINT.hashCode();

    hashCode = hashCode * 8191 + ((isSetVALUE()) ? 131071 : 524287);
    if (isSetVALUE())
      hashCode = hashCode * 8191 + VALUE.hashCode();

    hashCode = hashCode * 8191 + VALUE_LEN;

    hashCode = hashCode * 8191 + ((isSetCHECK_VALUE()) ? 131071 : 524287);
    if (isSetCHECK_VALUE())
      hashCode = hashCode * 8191 + CHECK_VALUE.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Attribute other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCLASS(), other.isSetCLASS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCLASS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CLASS, other.CLASS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKEY_TYPE(), other.isSetKEY_TYPE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKEY_TYPE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KEY_TYPE, other.KEY_TYPE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLABEL(), other.isSetLABEL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLABEL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LABEL, other.LABEL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetID(), other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLOCAL(), other.isSetLOCAL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLOCAL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LOCAL, other.LOCAL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTOKEN(), other.isSetTOKEN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTOKEN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TOKEN, other.TOKEN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPRIVATE(), other.isSetPRIVATE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRIVATE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRIVATE, other.PRIVATE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetENCRYPT(), other.isSetENCRYPT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetENCRYPT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ENCRYPT, other.ENCRYPT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDECRYPT(), other.isSetDECRYPT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDECRYPT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DECRYPT, other.DECRYPT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDERIVE(), other.isSetDERIVE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDERIVE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DERIVE, other.DERIVE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMODIFIABLE(), other.isSetMODIFIABLE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMODIFIABLE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MODIFIABLE, other.MODIFIABLE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDESTROYABLE(), other.isSetDESTROYABLE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDESTROYABLE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DESTROYABLE, other.DESTROYABLE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSIGN(), other.isSetSIGN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSIGN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SIGN, other.SIGN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSIGN_RECOVER(), other.isSetSIGN_RECOVER());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSIGN_RECOVER()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SIGN_RECOVER, other.SIGN_RECOVER);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVERIFY(), other.isSetVERIFY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVERIFY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VERIFY, other.VERIFY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVERIFY_RECOVER(), other.isSetVERIFY_RECOVER());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVERIFY_RECOVER()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VERIFY_RECOVER, other.VERIFY_RECOVER);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWRAP(), other.isSetWRAP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWRAP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WRAP, other.WRAP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUNWRAP(), other.isSetUNWRAP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUNWRAP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UNWRAP, other.UNWRAP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSENSITIVE(), other.isSetSENSITIVE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSENSITIVE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SENSITIVE, other.SENSITIVE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetALWAYS_SENSITIVE(), other.isSetALWAYS_SENSITIVE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetALWAYS_SENSITIVE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ALWAYS_SENSITIVE, other.ALWAYS_SENSITIVE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEXTRACTABLE(), other.isSetEXTRACTABLE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEXTRACTABLE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXTRACTABLE, other.EXTRACTABLE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNEVER_EXTRACTABLE(), other.isSetNEVER_EXTRACTABLE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNEVER_EXTRACTABLE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NEVER_EXTRACTABLE, other.NEVER_EXTRACTABLE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMODULUS(), other.isSetMODULUS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMODULUS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MODULUS, other.MODULUS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMODULUS_BITS(), other.isSetMODULUS_BITS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMODULUS_BITS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MODULUS_BITS, other.MODULUS_BITS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPRIME_1(), other.isSetPRIME_1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRIME_1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRIME_1, other.PRIME_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPRIME_2(), other.isSetPRIME_2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRIME_2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRIME_2, other.PRIME_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCOEFFICIENT(), other.isSetCOEFFICIENT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCOEFFICIENT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.COEFFICIENT, other.COEFFICIENT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEXPONENT_1(), other.isSetEXPONENT_1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEXPONENT_1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXPONENT_1, other.EXPONENT_1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEXPONENT_2(), other.isSetEXPONENT_2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEXPONENT_2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EXPONENT_2, other.EXPONENT_2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPRIVATE_EXPONENT(), other.isSetPRIVATE_EXPONENT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRIVATE_EXPONENT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRIVATE_EXPONENT, other.PRIVATE_EXPONENT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPUBLIC_EXPONENT(), other.isSetPUBLIC_EXPONENT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPUBLIC_EXPONENT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PUBLIC_EXPONENT, other.PUBLIC_EXPONENT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEC_PARAMS(), other.isSetEC_PARAMS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEC_PARAMS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EC_PARAMS, other.EC_PARAMS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEC_POINT(), other.isSetEC_POINT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEC_POINT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EC_POINT, other.EC_POINT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVALUE(), other.isSetVALUE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVALUE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VALUE, other.VALUE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVALUE_LEN(), other.isSetVALUE_LEN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVALUE_LEN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VALUE_LEN, other.VALUE_LEN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCHECK_VALUE(), other.isSetCHECK_VALUE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCHECK_VALUE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CHECK_VALUE, other.CHECK_VALUE);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Attribute(");
    boolean first = true;

    sb.append("CLASS:");
    sb.append(this.CLASS);
    first = false;
    if (!first) sb.append(", ");
    sb.append("KEY_TYPE:");
    sb.append(this.KEY_TYPE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("LABEL:");
    if (this.LABEL == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.LABEL, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ID:");
    if (this.ID == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.ID, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LOCAL:");
    sb.append(this.LOCAL);
    first = false;
    if (!first) sb.append(", ");
    sb.append("TOKEN:");
    sb.append(this.TOKEN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PRIVATE:");
    sb.append(this.PRIVATE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ENCRYPT:");
    sb.append(this.ENCRYPT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DECRYPT:");
    sb.append(this.DECRYPT);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DERIVE:");
    sb.append(this.DERIVE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MODIFIABLE:");
    sb.append(this.MODIFIABLE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DESTROYABLE:");
    sb.append(this.DESTROYABLE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SIGN:");
    sb.append(this.SIGN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SIGN_RECOVER:");
    sb.append(this.SIGN_RECOVER);
    first = false;
    if (!first) sb.append(", ");
    sb.append("VERIFY:");
    sb.append(this.VERIFY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("VERIFY_RECOVER:");
    sb.append(this.VERIFY_RECOVER);
    first = false;
    if (!first) sb.append(", ");
    sb.append("WRAP:");
    sb.append(this.WRAP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("UNWRAP:");
    sb.append(this.UNWRAP);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SENSITIVE:");
    sb.append(this.SENSITIVE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ALWAYS_SENSITIVE:");
    sb.append(this.ALWAYS_SENSITIVE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("EXTRACTABLE:");
    sb.append(this.EXTRACTABLE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("NEVER_EXTRACTABLE:");
    sb.append(this.NEVER_EXTRACTABLE);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MODULUS:");
    if (this.MODULUS == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.MODULUS, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MODULUS_BITS:");
    sb.append(this.MODULUS_BITS);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PRIME_1:");
    if (this.PRIME_1 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.PRIME_1, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PRIME_2:");
    if (this.PRIME_2 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.PRIME_2, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("COEFFICIENT:");
    if (this.COEFFICIENT == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.COEFFICIENT, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EXPONENT_1:");
    if (this.EXPONENT_1 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.EXPONENT_1, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EXPONENT_2:");
    if (this.EXPONENT_2 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.EXPONENT_2, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PRIVATE_EXPONENT:");
    if (this.PRIVATE_EXPONENT == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.PRIVATE_EXPONENT, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PUBLIC_EXPONENT:");
    if (this.PUBLIC_EXPONENT == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.PUBLIC_EXPONENT, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EC_PARAMS:");
    if (this.EC_PARAMS == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.EC_PARAMS, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EC_POINT:");
    if (this.EC_POINT == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.EC_POINT, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("VALUE:");
    if (this.VALUE == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.VALUE, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("VALUE_LEN:");
    sb.append(this.VALUE_LEN);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CHECK_VALUE:");
    if (this.CHECK_VALUE == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.CHECK_VALUE, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AttributeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AttributeStandardScheme getScheme() {
      return new AttributeStandardScheme();
    }
  }

  private static class AttributeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Attribute> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Attribute struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.CLASS = iprot.readI32();
              struct.setCLASSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY__TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.KEY_TYPE = iprot.readI32();
              struct.setKEY_TYPEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.LABEL = iprot.readBinary();
              struct.setLABELIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ID = iprot.readBinary();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.LOCAL = iprot.readByte();
              struct.setLOCALIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.TOKEN = iprot.readByte();
              struct.setTOKENIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRIVATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.PRIVATE = iprot.readByte();
              struct.setPRIVATEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENCRYPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.ENCRYPT = iprot.readByte();
              struct.setENCRYPTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DECRYPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.DECRYPT = iprot.readByte();
              struct.setDECRYPTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DERIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.DERIVE = iprot.readByte();
              struct.setDERIVEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MODIFIABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.MODIFIABLE = iprot.readByte();
              struct.setMODIFIABLEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DESTROYABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.DESTROYABLE = iprot.readByte();
              struct.setDESTROYABLEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.SIGN = iprot.readByte();
              struct.setSIGNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SIGN__RECOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.SIGN_RECOVER = iprot.readByte();
              struct.setSIGN_RECOVERIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VERIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.VERIFY = iprot.readByte();
              struct.setVERIFYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // VERIFY__RECOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.VERIFY_RECOVER = iprot.readByte();
              struct.setVERIFY_RECOVERIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // WRAP
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.WRAP = iprot.readByte();
              struct.setWRAPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UNWRAP
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.UNWRAP = iprot.readByte();
              struct.setUNWRAPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SENSITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.SENSITIVE = iprot.readByte();
              struct.setSENSITIVEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ALWAYS__SENSITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.ALWAYS_SENSITIVE = iprot.readByte();
              struct.setALWAYS_SENSITIVEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXTRACTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.EXTRACTABLE = iprot.readByte();
              struct.setEXTRACTABLEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // NEVER__EXTRACTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.NEVER_EXTRACTABLE = iprot.readByte();
              struct.setNEVER_EXTRACTABLEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MODULUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MODULUS = iprot.readBinary();
              struct.setMODULUSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MODULUS__BITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.MODULUS_BITS = iprot.readI32();
              struct.setMODULUS_BITSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PRIME_1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PRIME_1 = iprot.readBinary();
              struct.setPRIME_1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PRIME_2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PRIME_2 = iprot.readBinary();
              struct.setPRIME_2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // COEFFICIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.COEFFICIENT = iprot.readBinary();
              struct.setCOEFFICIENTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // EXPONENT_1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EXPONENT_1 = iprot.readBinary();
              struct.setEXPONENT_1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // EXPONENT_2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EXPONENT_2 = iprot.readBinary();
              struct.setEXPONENT_2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PRIVATE__EXPONENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PRIVATE_EXPONENT = iprot.readBinary();
              struct.setPRIVATE_EXPONENTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PUBLIC__EXPONENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PUBLIC_EXPONENT = iprot.readBinary();
              struct.setPUBLIC_EXPONENTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // EC__PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EC_PARAMS = iprot.readBinary();
              struct.setEC_PARAMSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // EC__POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.EC_POINT = iprot.readBinary();
              struct.setEC_POINTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.VALUE = iprot.readBinary();
              struct.setVALUEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // VALUE__LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.VALUE_LEN = iprot.readI32();
              struct.setVALUE_LENIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // CHECK__VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CHECK_VALUE = iprot.readBinary();
              struct.setCHECK_VALUEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Attribute struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLASS_FIELD_DESC);
      oprot.writeI32(struct.CLASS);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KEY__TYPE_FIELD_DESC);
      oprot.writeI32(struct.KEY_TYPE);
      oprot.writeFieldEnd();
      if (struct.LABEL != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeBinary(struct.LABEL);
        oprot.writeFieldEnd();
      }
      if (struct.ID != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeBinary(struct.ID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOCAL_FIELD_DESC);
      oprot.writeByte(struct.LOCAL);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeByte(struct.TOKEN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVATE_FIELD_DESC);
      oprot.writeByte(struct.PRIVATE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENCRYPT_FIELD_DESC);
      oprot.writeByte(struct.ENCRYPT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DECRYPT_FIELD_DESC);
      oprot.writeByte(struct.DECRYPT);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DERIVE_FIELD_DESC);
      oprot.writeByte(struct.DERIVE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODIFIABLE_FIELD_DESC);
      oprot.writeByte(struct.MODIFIABLE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DESTROYABLE_FIELD_DESC);
      oprot.writeByte(struct.DESTROYABLE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGN_FIELD_DESC);
      oprot.writeByte(struct.SIGN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGN__RECOVER_FIELD_DESC);
      oprot.writeByte(struct.SIGN_RECOVER);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERIFY_FIELD_DESC);
      oprot.writeByte(struct.VERIFY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERIFY__RECOVER_FIELD_DESC);
      oprot.writeByte(struct.VERIFY_RECOVER);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRAP_FIELD_DESC);
      oprot.writeByte(struct.WRAP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNWRAP_FIELD_DESC);
      oprot.writeByte(struct.UNWRAP);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENSITIVE_FIELD_DESC);
      oprot.writeByte(struct.SENSITIVE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALWAYS__SENSITIVE_FIELD_DESC);
      oprot.writeByte(struct.ALWAYS_SENSITIVE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTRACTABLE_FIELD_DESC);
      oprot.writeByte(struct.EXTRACTABLE);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEVER__EXTRACTABLE_FIELD_DESC);
      oprot.writeByte(struct.NEVER_EXTRACTABLE);
      oprot.writeFieldEnd();
      if (struct.MODULUS != null) {
        oprot.writeFieldBegin(MODULUS_FIELD_DESC);
        oprot.writeBinary(struct.MODULUS);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MODULUS__BITS_FIELD_DESC);
      oprot.writeI32(struct.MODULUS_BITS);
      oprot.writeFieldEnd();
      if (struct.PRIME_1 != null) {
        oprot.writeFieldBegin(PRIME_1_FIELD_DESC);
        oprot.writeBinary(struct.PRIME_1);
        oprot.writeFieldEnd();
      }
      if (struct.PRIME_2 != null) {
        oprot.writeFieldBegin(PRIME_2_FIELD_DESC);
        oprot.writeBinary(struct.PRIME_2);
        oprot.writeFieldEnd();
      }
      if (struct.COEFFICIENT != null) {
        oprot.writeFieldBegin(COEFFICIENT_FIELD_DESC);
        oprot.writeBinary(struct.COEFFICIENT);
        oprot.writeFieldEnd();
      }
      if (struct.EXPONENT_1 != null) {
        oprot.writeFieldBegin(EXPONENT_1_FIELD_DESC);
        oprot.writeBinary(struct.EXPONENT_1);
        oprot.writeFieldEnd();
      }
      if (struct.EXPONENT_2 != null) {
        oprot.writeFieldBegin(EXPONENT_2_FIELD_DESC);
        oprot.writeBinary(struct.EXPONENT_2);
        oprot.writeFieldEnd();
      }
      if (struct.PRIVATE_EXPONENT != null) {
        oprot.writeFieldBegin(PRIVATE__EXPONENT_FIELD_DESC);
        oprot.writeBinary(struct.PRIVATE_EXPONENT);
        oprot.writeFieldEnd();
      }
      if (struct.PUBLIC_EXPONENT != null) {
        oprot.writeFieldBegin(PUBLIC__EXPONENT_FIELD_DESC);
        oprot.writeBinary(struct.PUBLIC_EXPONENT);
        oprot.writeFieldEnd();
      }
      if (struct.EC_PARAMS != null) {
        oprot.writeFieldBegin(EC__PARAMS_FIELD_DESC);
        oprot.writeBinary(struct.EC_PARAMS);
        oprot.writeFieldEnd();
      }
      if (struct.EC_POINT != null) {
        oprot.writeFieldBegin(EC__POINT_FIELD_DESC);
        oprot.writeBinary(struct.EC_POINT);
        oprot.writeFieldEnd();
      }
      if (struct.VALUE != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBinary(struct.VALUE);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALUE__LEN_FIELD_DESC);
      oprot.writeI32(struct.VALUE_LEN);
      oprot.writeFieldEnd();
      if (struct.CHECK_VALUE != null) {
        oprot.writeFieldBegin(CHECK__VALUE_FIELD_DESC);
        oprot.writeBinary(struct.CHECK_VALUE);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AttributeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AttributeTupleScheme getScheme() {
      return new AttributeTupleScheme();
    }
  }

  private static class AttributeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Attribute> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Attribute struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCLASS()) {
        optionals.set(0);
      }
      if (struct.isSetKEY_TYPE()) {
        optionals.set(1);
      }
      if (struct.isSetLABEL()) {
        optionals.set(2);
      }
      if (struct.isSetID()) {
        optionals.set(3);
      }
      if (struct.isSetLOCAL()) {
        optionals.set(4);
      }
      if (struct.isSetTOKEN()) {
        optionals.set(5);
      }
      if (struct.isSetPRIVATE()) {
        optionals.set(6);
      }
      if (struct.isSetENCRYPT()) {
        optionals.set(7);
      }
      if (struct.isSetDECRYPT()) {
        optionals.set(8);
      }
      if (struct.isSetDERIVE()) {
        optionals.set(9);
      }
      if (struct.isSetMODIFIABLE()) {
        optionals.set(10);
      }
      if (struct.isSetDESTROYABLE()) {
        optionals.set(11);
      }
      if (struct.isSetSIGN()) {
        optionals.set(12);
      }
      if (struct.isSetSIGN_RECOVER()) {
        optionals.set(13);
      }
      if (struct.isSetVERIFY()) {
        optionals.set(14);
      }
      if (struct.isSetVERIFY_RECOVER()) {
        optionals.set(15);
      }
      if (struct.isSetWRAP()) {
        optionals.set(16);
      }
      if (struct.isSetUNWRAP()) {
        optionals.set(17);
      }
      if (struct.isSetSENSITIVE()) {
        optionals.set(18);
      }
      if (struct.isSetALWAYS_SENSITIVE()) {
        optionals.set(19);
      }
      if (struct.isSetEXTRACTABLE()) {
        optionals.set(20);
      }
      if (struct.isSetNEVER_EXTRACTABLE()) {
        optionals.set(21);
      }
      if (struct.isSetMODULUS()) {
        optionals.set(22);
      }
      if (struct.isSetMODULUS_BITS()) {
        optionals.set(23);
      }
      if (struct.isSetPRIME_1()) {
        optionals.set(24);
      }
      if (struct.isSetPRIME_2()) {
        optionals.set(25);
      }
      if (struct.isSetCOEFFICIENT()) {
        optionals.set(26);
      }
      if (struct.isSetEXPONENT_1()) {
        optionals.set(27);
      }
      if (struct.isSetEXPONENT_2()) {
        optionals.set(28);
      }
      if (struct.isSetPRIVATE_EXPONENT()) {
        optionals.set(29);
      }
      if (struct.isSetPUBLIC_EXPONENT()) {
        optionals.set(30);
      }
      if (struct.isSetEC_PARAMS()) {
        optionals.set(31);
      }
      if (struct.isSetEC_POINT()) {
        optionals.set(32);
      }
      if (struct.isSetVALUE()) {
        optionals.set(33);
      }
      if (struct.isSetVALUE_LEN()) {
        optionals.set(34);
      }
      if (struct.isSetCHECK_VALUE()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetCLASS()) {
        oprot.writeI32(struct.CLASS);
      }
      if (struct.isSetKEY_TYPE()) {
        oprot.writeI32(struct.KEY_TYPE);
      }
      if (struct.isSetLABEL()) {
        oprot.writeBinary(struct.LABEL);
      }
      if (struct.isSetID()) {
        oprot.writeBinary(struct.ID);
      }
      if (struct.isSetLOCAL()) {
        oprot.writeByte(struct.LOCAL);
      }
      if (struct.isSetTOKEN()) {
        oprot.writeByte(struct.TOKEN);
      }
      if (struct.isSetPRIVATE()) {
        oprot.writeByte(struct.PRIVATE);
      }
      if (struct.isSetENCRYPT()) {
        oprot.writeByte(struct.ENCRYPT);
      }
      if (struct.isSetDECRYPT()) {
        oprot.writeByte(struct.DECRYPT);
      }
      if (struct.isSetDERIVE()) {
        oprot.writeByte(struct.DERIVE);
      }
      if (struct.isSetMODIFIABLE()) {
        oprot.writeByte(struct.MODIFIABLE);
      }
      if (struct.isSetDESTROYABLE()) {
        oprot.writeByte(struct.DESTROYABLE);
      }
      if (struct.isSetSIGN()) {
        oprot.writeByte(struct.SIGN);
      }
      if (struct.isSetSIGN_RECOVER()) {
        oprot.writeByte(struct.SIGN_RECOVER);
      }
      if (struct.isSetVERIFY()) {
        oprot.writeByte(struct.VERIFY);
      }
      if (struct.isSetVERIFY_RECOVER()) {
        oprot.writeByte(struct.VERIFY_RECOVER);
      }
      if (struct.isSetWRAP()) {
        oprot.writeByte(struct.WRAP);
      }
      if (struct.isSetUNWRAP()) {
        oprot.writeByte(struct.UNWRAP);
      }
      if (struct.isSetSENSITIVE()) {
        oprot.writeByte(struct.SENSITIVE);
      }
      if (struct.isSetALWAYS_SENSITIVE()) {
        oprot.writeByte(struct.ALWAYS_SENSITIVE);
      }
      if (struct.isSetEXTRACTABLE()) {
        oprot.writeByte(struct.EXTRACTABLE);
      }
      if (struct.isSetNEVER_EXTRACTABLE()) {
        oprot.writeByte(struct.NEVER_EXTRACTABLE);
      }
      if (struct.isSetMODULUS()) {
        oprot.writeBinary(struct.MODULUS);
      }
      if (struct.isSetMODULUS_BITS()) {
        oprot.writeI32(struct.MODULUS_BITS);
      }
      if (struct.isSetPRIME_1()) {
        oprot.writeBinary(struct.PRIME_1);
      }
      if (struct.isSetPRIME_2()) {
        oprot.writeBinary(struct.PRIME_2);
      }
      if (struct.isSetCOEFFICIENT()) {
        oprot.writeBinary(struct.COEFFICIENT);
      }
      if (struct.isSetEXPONENT_1()) {
        oprot.writeBinary(struct.EXPONENT_1);
      }
      if (struct.isSetEXPONENT_2()) {
        oprot.writeBinary(struct.EXPONENT_2);
      }
      if (struct.isSetPRIVATE_EXPONENT()) {
        oprot.writeBinary(struct.PRIVATE_EXPONENT);
      }
      if (struct.isSetPUBLIC_EXPONENT()) {
        oprot.writeBinary(struct.PUBLIC_EXPONENT);
      }
      if (struct.isSetEC_PARAMS()) {
        oprot.writeBinary(struct.EC_PARAMS);
      }
      if (struct.isSetEC_POINT()) {
        oprot.writeBinary(struct.EC_POINT);
      }
      if (struct.isSetVALUE()) {
        oprot.writeBinary(struct.VALUE);
      }
      if (struct.isSetVALUE_LEN()) {
        oprot.writeI32(struct.VALUE_LEN);
      }
      if (struct.isSetCHECK_VALUE()) {
        oprot.writeBinary(struct.CHECK_VALUE);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Attribute struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        struct.CLASS = iprot.readI32();
        struct.setCLASSIsSet(true);
      }
      if (incoming.get(1)) {
        struct.KEY_TYPE = iprot.readI32();
        struct.setKEY_TYPEIsSet(true);
      }
      if (incoming.get(2)) {
        struct.LABEL = iprot.readBinary();
        struct.setLABELIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ID = iprot.readBinary();
        struct.setIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.LOCAL = iprot.readByte();
        struct.setLOCALIsSet(true);
      }
      if (incoming.get(5)) {
        struct.TOKEN = iprot.readByte();
        struct.setTOKENIsSet(true);
      }
      if (incoming.get(6)) {
        struct.PRIVATE = iprot.readByte();
        struct.setPRIVATEIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ENCRYPT = iprot.readByte();
        struct.setENCRYPTIsSet(true);
      }
      if (incoming.get(8)) {
        struct.DECRYPT = iprot.readByte();
        struct.setDECRYPTIsSet(true);
      }
      if (incoming.get(9)) {
        struct.DERIVE = iprot.readByte();
        struct.setDERIVEIsSet(true);
      }
      if (incoming.get(10)) {
        struct.MODIFIABLE = iprot.readByte();
        struct.setMODIFIABLEIsSet(true);
      }
      if (incoming.get(11)) {
        struct.DESTROYABLE = iprot.readByte();
        struct.setDESTROYABLEIsSet(true);
      }
      if (incoming.get(12)) {
        struct.SIGN = iprot.readByte();
        struct.setSIGNIsSet(true);
      }
      if (incoming.get(13)) {
        struct.SIGN_RECOVER = iprot.readByte();
        struct.setSIGN_RECOVERIsSet(true);
      }
      if (incoming.get(14)) {
        struct.VERIFY = iprot.readByte();
        struct.setVERIFYIsSet(true);
      }
      if (incoming.get(15)) {
        struct.VERIFY_RECOVER = iprot.readByte();
        struct.setVERIFY_RECOVERIsSet(true);
      }
      if (incoming.get(16)) {
        struct.WRAP = iprot.readByte();
        struct.setWRAPIsSet(true);
      }
      if (incoming.get(17)) {
        struct.UNWRAP = iprot.readByte();
        struct.setUNWRAPIsSet(true);
      }
      if (incoming.get(18)) {
        struct.SENSITIVE = iprot.readByte();
        struct.setSENSITIVEIsSet(true);
      }
      if (incoming.get(19)) {
        struct.ALWAYS_SENSITIVE = iprot.readByte();
        struct.setALWAYS_SENSITIVEIsSet(true);
      }
      if (incoming.get(20)) {
        struct.EXTRACTABLE = iprot.readByte();
        struct.setEXTRACTABLEIsSet(true);
      }
      if (incoming.get(21)) {
        struct.NEVER_EXTRACTABLE = iprot.readByte();
        struct.setNEVER_EXTRACTABLEIsSet(true);
      }
      if (incoming.get(22)) {
        struct.MODULUS = iprot.readBinary();
        struct.setMODULUSIsSet(true);
      }
      if (incoming.get(23)) {
        struct.MODULUS_BITS = iprot.readI32();
        struct.setMODULUS_BITSIsSet(true);
      }
      if (incoming.get(24)) {
        struct.PRIME_1 = iprot.readBinary();
        struct.setPRIME_1IsSet(true);
      }
      if (incoming.get(25)) {
        struct.PRIME_2 = iprot.readBinary();
        struct.setPRIME_2IsSet(true);
      }
      if (incoming.get(26)) {
        struct.COEFFICIENT = iprot.readBinary();
        struct.setCOEFFICIENTIsSet(true);
      }
      if (incoming.get(27)) {
        struct.EXPONENT_1 = iprot.readBinary();
        struct.setEXPONENT_1IsSet(true);
      }
      if (incoming.get(28)) {
        struct.EXPONENT_2 = iprot.readBinary();
        struct.setEXPONENT_2IsSet(true);
      }
      if (incoming.get(29)) {
        struct.PRIVATE_EXPONENT = iprot.readBinary();
        struct.setPRIVATE_EXPONENTIsSet(true);
      }
      if (incoming.get(30)) {
        struct.PUBLIC_EXPONENT = iprot.readBinary();
        struct.setPUBLIC_EXPONENTIsSet(true);
      }
      if (incoming.get(31)) {
        struct.EC_PARAMS = iprot.readBinary();
        struct.setEC_PARAMSIsSet(true);
      }
      if (incoming.get(32)) {
        struct.EC_POINT = iprot.readBinary();
        struct.setEC_POINTIsSet(true);
      }
      if (incoming.get(33)) {
        struct.VALUE = iprot.readBinary();
        struct.setVALUEIsSet(true);
      }
      if (incoming.get(34)) {
        struct.VALUE_LEN = iprot.readI32();
        struct.setVALUE_LENIsSet(true);
      }
      if (incoming.get(35)) {
        struct.CHECK_VALUE = iprot.readBinary();
        struct.setCHECK_VALUEIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

