/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 对数据增加一个长度值，主要用于客户端调用传空指针的情况
 * 根据数据Operation, 当使用NORMAL操作时, 返回加密/签名/摘要处理后数据
 * 当使用GET_LENGTH操作时, 服务端仅返回加密/签名/摘要后数据长度, data为空
 * 附加和保留字段用于CBC/GCM等特定算法还需要返回IV/TAG等值的情况
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class Data implements org.apache.thrift.TBase<Data, Data._Fields>, java.io.Serializable, Cloneable, Comparable<Data> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Data");

  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("dataLen", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESERVED_FIELD_DESC = new org.apache.thrift.protocol.TField("reserved", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer data; // required
  public int dataLen; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer extra; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer reserved; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA((short)1, "data"),
    DATA_LEN((short)2, "dataLen"),
    EXTRA((short)3, "extra"),
    RESERVED((short)4, "reserved");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA
          return DATA;
        case 2: // DATA_LEN
          return DATA_LEN;
        case 3: // EXTRA
          return EXTRA;
        case 4: // RESERVED
          return RESERVED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATALEN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXTRA,_Fields.RESERVED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DATA_LEN, new org.apache.thrift.meta_data.FieldMetaData("dataLen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.RESERVED, new org.apache.thrift.meta_data.FieldMetaData("reserved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Data.class, metaDataMap);
  }

  public Data() {
  }

  public Data(
    java.nio.ByteBuffer data,
    int dataLen)
  {
    this();
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    this.dataLen = dataLen;
    setDataLenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data(Data other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
    }
    this.dataLen = other.dataLen;
    if (other.isSetExtra()) {
      this.extra = org.apache.thrift.TBaseHelper.copyBinary(other.extra);
    }
    if (other.isSetReserved()) {
      this.reserved = org.apache.thrift.TBaseHelper.copyBinary(other.reserved);
    }
  }

  @Override
  public Data deepCopy() {
    return new Data(this);
  }

  @Override
  public void clear() {
    this.data = null;
    setDataLenIsSet(false);
    this.dataLen = 0;
    this.extra = null;
    this.reserved = null;
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public java.nio.ByteBuffer bufferForData() {
    return org.apache.thrift.TBaseHelper.copyBinary(data);
  }

  public Data setData(byte[] data) {
    this.data = data == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(data.clone());
    return this;
  }

  public Data setData(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer data) {
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getDataLen() {
    return this.dataLen;
  }

  public Data setDataLen(int dataLen) {
    this.dataLen = dataLen;
    setDataLenIsSet(true);
    return this;
  }

  public void unsetDataLen() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATALEN_ISSET_ID);
  }

  /** Returns true if field dataLen is set (has been assigned a value) and false otherwise */
  public boolean isSetDataLen() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATALEN_ISSET_ID);
  }

  public void setDataLenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATALEN_ISSET_ID, value);
  }

  public byte[] getExtra() {
    setExtra(org.apache.thrift.TBaseHelper.rightSize(extra));
    return extra == null ? null : extra.array();
  }

  public java.nio.ByteBuffer bufferForExtra() {
    return org.apache.thrift.TBaseHelper.copyBinary(extra);
  }

  public Data setExtra(byte[] extra) {
    this.extra = extra == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(extra.clone());
    return this;
  }

  public Data setExtra(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer extra) {
    this.extra = org.apache.thrift.TBaseHelper.copyBinary(extra);
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  public byte[] getReserved() {
    setReserved(org.apache.thrift.TBaseHelper.rightSize(reserved));
    return reserved == null ? null : reserved.array();
  }

  public java.nio.ByteBuffer bufferForReserved() {
    return org.apache.thrift.TBaseHelper.copyBinary(reserved);
  }

  public Data setReserved(byte[] reserved) {
    this.reserved = reserved == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(reserved.clone());
    return this;
  }

  public Data setReserved(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer reserved) {
    this.reserved = org.apache.thrift.TBaseHelper.copyBinary(reserved);
    return this;
  }

  public void unsetReserved() {
    this.reserved = null;
  }

  /** Returns true if field reserved is set (has been assigned a value) and false otherwise */
  public boolean isSetReserved() {
    return this.reserved != null;
  }

  public void setReservedIsSet(boolean value) {
    if (!value) {
      this.reserved = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DATA:
      if (value == null) {
        unsetData();
      } else {
        if (value instanceof byte[]) {
          setData((byte[])value);
        } else {
          setData((java.nio.ByteBuffer)value);
        }
      }
      break;

    case DATA_LEN:
      if (value == null) {
        unsetDataLen();
      } else {
        setDataLen((java.lang.Integer)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        if (value instanceof byte[]) {
          setExtra((byte[])value);
        } else {
          setExtra((java.nio.ByteBuffer)value);
        }
      }
      break;

    case RESERVED:
      if (value == null) {
        unsetReserved();
      } else {
        if (value instanceof byte[]) {
          setReserved((byte[])value);
        } else {
          setReserved((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA:
      return getData();

    case DATA_LEN:
      return getDataLen();

    case EXTRA:
      return getExtra();

    case RESERVED:
      return getReserved();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DATA:
      return isSetData();
    case DATA_LEN:
      return isSetDataLen();
    case EXTRA:
      return isSetExtra();
    case RESERVED:
      return isSetReserved();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Data)
      return this.equals((Data)that);
    return false;
  }

  public boolean equals(Data that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_dataLen = true;
    boolean that_present_dataLen = true;
    if (this_present_dataLen || that_present_dataLen) {
      if (!(this_present_dataLen && that_present_dataLen))
        return false;
      if (this.dataLen != that.dataLen)
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    boolean this_present_reserved = true && this.isSetReserved();
    boolean that_present_reserved = true && that.isSetReserved();
    if (this_present_reserved || that_present_reserved) {
      if (!(this_present_reserved && that_present_reserved))
        return false;
      if (!this.reserved.equals(that.reserved))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + dataLen;

    hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
    if (isSetExtra())
      hashCode = hashCode * 8191 + extra.hashCode();

    hashCode = hashCode * 8191 + ((isSetReserved()) ? 131071 : 524287);
    if (isSetReserved())
      hashCode = hashCode * 8191 + reserved.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Data other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetData(), other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDataLen(), other.isSetDataLen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataLen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataLen, other.dataLen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra(), other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReserved(), other.isSetReserved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserved, other.reserved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Data(");
    boolean first = true;

    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.data, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataLen:");
    sb.append(this.dataLen);
    first = false;
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.extra, sb);
      }
      first = false;
    }
    if (isSetReserved()) {
      if (!first) sb.append(", ");
      sb.append("reserved:");
      if (this.reserved == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.reserved, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public DataStandardScheme getScheme() {
      return new DataStandardScheme();
    }
  }

  private static class DataStandardScheme extends org.apache.thrift.scheme.StandardScheme<Data> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataLen = iprot.readI32();
              struct.setDataLenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extra = iprot.readBinary();
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESERVED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reserved = iprot.readBinary();
              struct.setReservedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Data struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATA_LEN_FIELD_DESC);
      oprot.writeI32(struct.dataLen);
      oprot.writeFieldEnd();
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          oprot.writeBinary(struct.extra);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reserved != null) {
        if (struct.isSetReserved()) {
          oprot.writeFieldBegin(RESERVED_FIELD_DESC);
          oprot.writeBinary(struct.reserved);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public DataTupleScheme getScheme() {
      return new DataTupleScheme();
    }
  }

  private static class DataTupleScheme extends org.apache.thrift.scheme.TupleScheme<Data> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetData()) {
        optionals.set(0);
      }
      if (struct.isSetDataLen()) {
        optionals.set(1);
      }
      if (struct.isSetExtra()) {
        optionals.set(2);
      }
      if (struct.isSetReserved()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetData()) {
        oprot.writeBinary(struct.data);
      }
      if (struct.isSetDataLen()) {
        oprot.writeI32(struct.dataLen);
      }
      if (struct.isSetExtra()) {
        oprot.writeBinary(struct.extra);
      }
      if (struct.isSetReserved()) {
        oprot.writeBinary(struct.reserved);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dataLen = iprot.readI32();
        struct.setDataLenIsSet(true);
      }
      if (incoming.get(2)) {
        struct.extra = iprot.readBinary();
        struct.setExtraIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reserved = iprot.readBinary();
        struct.setReservedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

