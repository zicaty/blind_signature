/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 机制，通过机制类型与机制参数传递不同类型参数
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class Mechanism implements org.apache.thrift.TBase<Mechanism, Mechanism._Fields>, java.io.Serializable, Cloneable, Comparable<Mechanism> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mechanism");

  private static final org.apache.thrift.protocol.TField MECHANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("mechanism", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MechanismStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MechanismTupleSchemeFactory();

  /**
   * 
   * @see MechanismType
   */
  public @org.apache.thrift.annotation.Nullable MechanismType mechanism; // required
  public @org.apache.thrift.annotation.Nullable Parameter parameter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see MechanismType
     */
    MECHANISM((short)1, "mechanism"),
    PARAMETER((short)2, "parameter");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MECHANISM
          return MECHANISM;
        case 2: // PARAMETER
          return PARAMETER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PARAMETER};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MECHANISM, new org.apache.thrift.meta_data.FieldMetaData("mechanism", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MechanismType.class)));
    tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Parameter.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mechanism.class, metaDataMap);
  }

  public Mechanism() {
  }

  public Mechanism(
    MechanismType mechanism)
  {
    this();
    this.mechanism = mechanism;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Mechanism(Mechanism other) {
    if (other.isSetMechanism()) {
      this.mechanism = other.mechanism;
    }
    if (other.isSetParameter()) {
      this.parameter = new Parameter(other.parameter);
    }
  }

  @Override
  public Mechanism deepCopy() {
    return new Mechanism(this);
  }

  @Override
  public void clear() {
    this.mechanism = null;
    this.parameter = null;
  }

  /**
   * 
   * @see MechanismType
   */
  @org.apache.thrift.annotation.Nullable
  public MechanismType getMechanism() {
    return this.mechanism;
  }

  /**
   * 
   * @see MechanismType
   */
  public Mechanism setMechanism(@org.apache.thrift.annotation.Nullable MechanismType mechanism) {
    this.mechanism = mechanism;
    return this;
  }

  public void unsetMechanism() {
    this.mechanism = null;
  }

  /** Returns true if field mechanism is set (has been assigned a value) and false otherwise */
  public boolean isSetMechanism() {
    return this.mechanism != null;
  }

  public void setMechanismIsSet(boolean value) {
    if (!value) {
      this.mechanism = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Parameter getParameter() {
    return this.parameter;
  }

  public Mechanism setParameter(@org.apache.thrift.annotation.Nullable Parameter parameter) {
    this.parameter = parameter;
    return this;
  }

  public void unsetParameter() {
    this.parameter = null;
  }

  /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
  public boolean isSetParameter() {
    return this.parameter != null;
  }

  public void setParameterIsSet(boolean value) {
    if (!value) {
      this.parameter = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MECHANISM:
      if (value == null) {
        unsetMechanism();
      } else {
        setMechanism((MechanismType)value);
      }
      break;

    case PARAMETER:
      if (value == null) {
        unsetParameter();
      } else {
        setParameter((Parameter)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MECHANISM:
      return getMechanism();

    case PARAMETER:
      return getParameter();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MECHANISM:
      return isSetMechanism();
    case PARAMETER:
      return isSetParameter();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Mechanism)
      return this.equals((Mechanism)that);
    return false;
  }

  public boolean equals(Mechanism that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mechanism = true && this.isSetMechanism();
    boolean that_present_mechanism = true && that.isSetMechanism();
    if (this_present_mechanism || that_present_mechanism) {
      if (!(this_present_mechanism && that_present_mechanism))
        return false;
      if (!this.mechanism.equals(that.mechanism))
        return false;
    }

    boolean this_present_parameter = true && this.isSetParameter();
    boolean that_present_parameter = true && that.isSetParameter();
    if (this_present_parameter || that_present_parameter) {
      if (!(this_present_parameter && that_present_parameter))
        return false;
      if (!this.parameter.equals(that.parameter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMechanism()) ? 131071 : 524287);
    if (isSetMechanism())
      hashCode = hashCode * 8191 + mechanism.getValue();

    hashCode = hashCode * 8191 + ((isSetParameter()) ? 131071 : 524287);
    if (isSetParameter())
      hashCode = hashCode * 8191 + parameter.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Mechanism other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetMechanism(), other.isSetMechanism());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMechanism()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mechanism, other.mechanism);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParameter(), other.isSetParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Mechanism(");
    boolean first = true;

    sb.append("mechanism:");
    if (this.mechanism == null) {
      sb.append("null");
    } else {
      sb.append(this.mechanism);
    }
    first = false;
    if (isSetParameter()) {
      if (!first) sb.append(", ");
      sb.append("parameter:");
      if (this.parameter == null) {
        sb.append("null");
      } else {
        sb.append(this.parameter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mechanism == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mechanism' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (parameter != null) {
      parameter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MechanismStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MechanismStandardScheme getScheme() {
      return new MechanismStandardScheme();
    }
  }

  private static class MechanismStandardScheme extends org.apache.thrift.scheme.StandardScheme<Mechanism> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Mechanism struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MECHANISM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mechanism = kl.hsm.server.svc.p11.MechanismType.findByValue(iprot.readI32());
              struct.setMechanismIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parameter = new Parameter();
              struct.parameter.read(iprot);
              struct.setParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Mechanism struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mechanism != null) {
        oprot.writeFieldBegin(MECHANISM_FIELD_DESC);
        oprot.writeI32(struct.mechanism.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.parameter != null) {
        if (struct.isSetParameter()) {
          oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
          struct.parameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MechanismTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MechanismTupleScheme getScheme() {
      return new MechanismTupleScheme();
    }
  }

  private static class MechanismTupleScheme extends org.apache.thrift.scheme.TupleScheme<Mechanism> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Mechanism struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.mechanism.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParameter()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetParameter()) {
        struct.parameter.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Mechanism struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.mechanism = kl.hsm.server.svc.p11.MechanismType.findByValue(iprot.readI32());
      struct.setMechanismIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.parameter = new Parameter();
        struct.parameter.read(iprot);
        struct.setParameterIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

