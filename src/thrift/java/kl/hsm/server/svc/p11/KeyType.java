/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;


/**
 * 密钥类型
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public enum KeyType implements org.apache.thrift.TEnum {
  TCKK_RSA(0),
  TCKK_DSA(1),
  TCKK_DH(2),
  TCKK_EC(3),
  TCKK_X9_42_DH(4),
  TCKK_KEA(5),
  TCKK_GENERIC_SECRET(16),
  TCKK_RC2(17),
  TCKK_RC4(18),
  TCKK_DES(19),
  TCKK_DES2(20),
  TCKK_DES3(21),
  TCKK_CAST(22),
  TCKK_CAST3(23),
  TCKK_CAST128(24),
  TCKK_RC5(25),
  TCKK_IDEA(26),
  TCKK_SKIPJACK(27),
  TCKK_BATON(28),
  TCKK_JUNIPER(29),
  TCKK_CDMF(30),
  TCKK_AES(31),
  TCKK_BLOWFISH(32),
  TCKK_TWOFISH(33),
  TCKK_SECURID(34),
  TCKK_HOTP(35),
  TCKK_ACTI(36),
  TCKK_CAMELLIA(37),
  TCKK_ARIA(38),
  TCKK_MD5_HMAC(39),
  TCKK_SHA_1_HMAC(40),
  TCKK_RIPEMD128_HMAC(41),
  TCKK_RIPEMD160_HMAC(42),
  TCKK_SHA256_HMAC(43),
  TCKK_SHA384_HMAC(44),
  TCKK_SHA512_HMAC(45),
  TCKK_SHA224_HMAC(46),
  TCKK_SEED(47),
  TCKK_VENDOR_DEFINED(-2147483648),
  TCKK_SM1(-2147483647),
  TCKK_SM4(-2147483646),
  TCKK_SM2(-2147483644),
  TCKK_SM9(-2147483640),
  TCKK_INVALID(-1);

  private final int value;

  private KeyType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  @Override
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static KeyType findByValue(int value) { 
    switch (value) {
      case 0:
        return TCKK_RSA;
      case 1:
        return TCKK_DSA;
      case 2:
        return TCKK_DH;
      case 3:
        return TCKK_EC;
      case 4:
        return TCKK_X9_42_DH;
      case 5:
        return TCKK_KEA;
      case 16:
        return TCKK_GENERIC_SECRET;
      case 17:
        return TCKK_RC2;
      case 18:
        return TCKK_RC4;
      case 19:
        return TCKK_DES;
      case 20:
        return TCKK_DES2;
      case 21:
        return TCKK_DES3;
      case 22:
        return TCKK_CAST;
      case 23:
        return TCKK_CAST3;
      case 24:
        return TCKK_CAST128;
      case 25:
        return TCKK_RC5;
      case 26:
        return TCKK_IDEA;
      case 27:
        return TCKK_SKIPJACK;
      case 28:
        return TCKK_BATON;
      case 29:
        return TCKK_JUNIPER;
      case 30:
        return TCKK_CDMF;
      case 31:
        return TCKK_AES;
      case 32:
        return TCKK_BLOWFISH;
      case 33:
        return TCKK_TWOFISH;
      case 34:
        return TCKK_SECURID;
      case 35:
        return TCKK_HOTP;
      case 36:
        return TCKK_ACTI;
      case 37:
        return TCKK_CAMELLIA;
      case 38:
        return TCKK_ARIA;
      case 39:
        return TCKK_MD5_HMAC;
      case 40:
        return TCKK_SHA_1_HMAC;
      case 41:
        return TCKK_RIPEMD128_HMAC;
      case 42:
        return TCKK_RIPEMD160_HMAC;
      case 43:
        return TCKK_SHA256_HMAC;
      case 44:
        return TCKK_SHA384_HMAC;
      case 45:
        return TCKK_SHA512_HMAC;
      case 46:
        return TCKK_SHA224_HMAC;
      case 47:
        return TCKK_SEED;
      case -2147483648:
        return TCKK_VENDOR_DEFINED;
      case -2147483647:
        return TCKK_SM1;
      case -2147483646:
        return TCKK_SM4;
      case -2147483644:
        return TCKK_SM2;
      case -2147483640:
        return TCKK_SM9;
      case -1:
        return TCKK_INVALID;
      default:
        return null;
    }
  }
}
