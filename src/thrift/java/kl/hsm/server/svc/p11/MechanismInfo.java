/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 机制信息
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class MechanismInfo implements org.apache.thrift.TBase<MechanismInfo, MechanismInfo._Fields>, java.io.Serializable, Cloneable, Comparable<MechanismInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MechanismInfo");

  private static final org.apache.thrift.protocol.TField UL_MIN_KEY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("ulMinKeySize", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UL_MAX_KEY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("ulMaxKeySize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MechanismInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MechanismInfoTupleSchemeFactory();

  public int ulMinKeySize; // required
  public int ulMaxKeySize; // required
  public int flags; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UL_MIN_KEY_SIZE((short)1, "ulMinKeySize"),
    UL_MAX_KEY_SIZE((short)2, "ulMaxKeySize"),
    FLAGS((short)3, "flags");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UL_MIN_KEY_SIZE
          return UL_MIN_KEY_SIZE;
        case 2: // UL_MAX_KEY_SIZE
          return UL_MAX_KEY_SIZE;
        case 3: // FLAGS
          return FLAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ULMINKEYSIZE_ISSET_ID = 0;
  private static final int __ULMAXKEYSIZE_ISSET_ID = 1;
  private static final int __FLAGS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UL_MIN_KEY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("ulMinKeySize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_MAX_KEY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("ulMaxKeySize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MechanismInfo.class, metaDataMap);
  }

  public MechanismInfo() {
  }

  public MechanismInfo(
    int ulMinKeySize,
    int ulMaxKeySize,
    int flags)
  {
    this();
    this.ulMinKeySize = ulMinKeySize;
    setUlMinKeySizeIsSet(true);
    this.ulMaxKeySize = ulMaxKeySize;
    setUlMaxKeySizeIsSet(true);
    this.flags = flags;
    setFlagsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MechanismInfo(MechanismInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ulMinKeySize = other.ulMinKeySize;
    this.ulMaxKeySize = other.ulMaxKeySize;
    this.flags = other.flags;
  }

  @Override
  public MechanismInfo deepCopy() {
    return new MechanismInfo(this);
  }

  @Override
  public void clear() {
    setUlMinKeySizeIsSet(false);
    this.ulMinKeySize = 0;
    setUlMaxKeySizeIsSet(false);
    this.ulMaxKeySize = 0;
    setFlagsIsSet(false);
    this.flags = 0;
  }

  public int getUlMinKeySize() {
    return this.ulMinKeySize;
  }

  public MechanismInfo setUlMinKeySize(int ulMinKeySize) {
    this.ulMinKeySize = ulMinKeySize;
    setUlMinKeySizeIsSet(true);
    return this;
  }

  public void unsetUlMinKeySize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULMINKEYSIZE_ISSET_ID);
  }

  /** Returns true if field ulMinKeySize is set (has been assigned a value) and false otherwise */
  public boolean isSetUlMinKeySize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULMINKEYSIZE_ISSET_ID);
  }

  public void setUlMinKeySizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULMINKEYSIZE_ISSET_ID, value);
  }

  public int getUlMaxKeySize() {
    return this.ulMaxKeySize;
  }

  public MechanismInfo setUlMaxKeySize(int ulMaxKeySize) {
    this.ulMaxKeySize = ulMaxKeySize;
    setUlMaxKeySizeIsSet(true);
    return this;
  }

  public void unsetUlMaxKeySize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULMAXKEYSIZE_ISSET_ID);
  }

  /** Returns true if field ulMaxKeySize is set (has been assigned a value) and false otherwise */
  public boolean isSetUlMaxKeySize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULMAXKEYSIZE_ISSET_ID);
  }

  public void setUlMaxKeySizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULMAXKEYSIZE_ISSET_ID, value);
  }

  public int getFlags() {
    return this.flags;
  }

  public MechanismInfo setFlags(int flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UL_MIN_KEY_SIZE:
      if (value == null) {
        unsetUlMinKeySize();
      } else {
        setUlMinKeySize((java.lang.Integer)value);
      }
      break;

    case UL_MAX_KEY_SIZE:
      if (value == null) {
        unsetUlMaxKeySize();
      } else {
        setUlMaxKeySize((java.lang.Integer)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UL_MIN_KEY_SIZE:
      return getUlMinKeySize();

    case UL_MAX_KEY_SIZE:
      return getUlMaxKeySize();

    case FLAGS:
      return getFlags();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UL_MIN_KEY_SIZE:
      return isSetUlMinKeySize();
    case UL_MAX_KEY_SIZE:
      return isSetUlMaxKeySize();
    case FLAGS:
      return isSetFlags();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof MechanismInfo)
      return this.equals((MechanismInfo)that);
    return false;
  }

  public boolean equals(MechanismInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ulMinKeySize = true;
    boolean that_present_ulMinKeySize = true;
    if (this_present_ulMinKeySize || that_present_ulMinKeySize) {
      if (!(this_present_ulMinKeySize && that_present_ulMinKeySize))
        return false;
      if (this.ulMinKeySize != that.ulMinKeySize)
        return false;
    }

    boolean this_present_ulMaxKeySize = true;
    boolean that_present_ulMaxKeySize = true;
    if (this_present_ulMaxKeySize || that_present_ulMaxKeySize) {
      if (!(this_present_ulMaxKeySize && that_present_ulMaxKeySize))
        return false;
      if (this.ulMaxKeySize != that.ulMaxKeySize)
        return false;
    }

    boolean this_present_flags = true;
    boolean that_present_flags = true;
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ulMinKeySize;

    hashCode = hashCode * 8191 + ulMaxKeySize;

    hashCode = hashCode * 8191 + flags;

    return hashCode;
  }

  @Override
  public int compareTo(MechanismInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUlMinKeySize(), other.isSetUlMinKeySize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlMinKeySize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulMinKeySize, other.ulMinKeySize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlMaxKeySize(), other.isSetUlMaxKeySize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlMaxKeySize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulMaxKeySize, other.ulMaxKeySize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlags(), other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MechanismInfo(");
    boolean first = true;

    sb.append("ulMinKeySize:");
    sb.append(this.ulMinKeySize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulMaxKeySize:");
    sb.append(this.ulMaxKeySize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    sb.append(this.flags);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MechanismInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MechanismInfoStandardScheme getScheme() {
      return new MechanismInfoStandardScheme();
    }
  }

  private static class MechanismInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<MechanismInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, MechanismInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UL_MIN_KEY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulMinKeySize = iprot.readI32();
              struct.setUlMinKeySizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UL_MAX_KEY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulMaxKeySize = iprot.readI32();
              struct.setUlMaxKeySizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flags = iprot.readI32();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, MechanismInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UL_MIN_KEY_SIZE_FIELD_DESC);
      oprot.writeI32(struct.ulMinKeySize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_MAX_KEY_SIZE_FIELD_DESC);
      oprot.writeI32(struct.ulMaxKeySize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(struct.flags);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MechanismInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MechanismInfoTupleScheme getScheme() {
      return new MechanismInfoTupleScheme();
    }
  }

  private static class MechanismInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<MechanismInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MechanismInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUlMinKeySize()) {
        optionals.set(0);
      }
      if (struct.isSetUlMaxKeySize()) {
        optionals.set(1);
      }
      if (struct.isSetFlags()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUlMinKeySize()) {
        oprot.writeI32(struct.ulMinKeySize);
      }
      if (struct.isSetUlMaxKeySize()) {
        oprot.writeI32(struct.ulMaxKeySize);
      }
      if (struct.isSetFlags()) {
        oprot.writeI32(struct.flags);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MechanismInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ulMinKeySize = iprot.readI32();
        struct.setUlMinKeySizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ulMaxKeySize = iprot.readI32();
        struct.setUlMaxKeySizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.flags = iprot.readI32();
        struct.setFlagsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

