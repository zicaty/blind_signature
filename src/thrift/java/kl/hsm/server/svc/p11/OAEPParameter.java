/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * RSA-OAEP机制参数
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class OAEPParameter implements org.apache.thrift.TBase<OAEPParameter, OAEPParameter._Fields>, java.io.Serializable, Cloneable, Comparable<OAEPParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OAEPParameter");

  private static final org.apache.thrift.protocol.TField HASH_ALG_FIELD_DESC = new org.apache.thrift.protocol.TField("hashAlg", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MGF_FIELD_DESC = new org.apache.thrift.protocol.TField("mgf", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OAEPParameterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OAEPParameterTupleSchemeFactory();

  /**
   * 
   * @see MechanismType
   */
  public @org.apache.thrift.annotation.Nullable MechanismType hashAlg; // required
  /**
   * 
   * @see MGF
   */
  public @org.apache.thrift.annotation.Nullable MGF mgf; // required
  /**
   * 
   * @see OAEPSourceType
   */
  public @org.apache.thrift.annotation.Nullable OAEPSourceType source; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see MechanismType
     */
    HASH_ALG((short)1, "hashAlg"),
    /**
     * 
     * @see MGF
     */
    MGF((short)2, "mgf"),
    /**
     * 
     * @see OAEPSourceType
     */
    SOURCE((short)3, "source"),
    DATA((short)4, "data");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HASH_ALG
          return HASH_ALG;
        case 2: // MGF
          return MGF;
        case 3: // SOURCE
          return SOURCE;
        case 4: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HASH_ALG, new org.apache.thrift.meta_data.FieldMetaData("hashAlg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MechanismType.class)));
    tmpMap.put(_Fields.MGF, new org.apache.thrift.meta_data.FieldMetaData("mgf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MGF.class)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OAEPSourceType.class)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OAEPParameter.class, metaDataMap);
  }

  public OAEPParameter() {
    this.hashAlg = kl.hsm.server.svc.p11.MechanismType.TCKM_INVALID;

    this.mgf = kl.hsm.server.svc.p11.MGF.TCKG_MGF1_INVALID;

    this.source = kl.hsm.server.svc.p11.OAEPSourceType.TCKZ_DATA_INVALID;

  }

  public OAEPParameter(
    MechanismType hashAlg,
    MGF mgf,
    OAEPSourceType source,
    java.nio.ByteBuffer data)
  {
    this();
    this.hashAlg = hashAlg;
    this.mgf = mgf;
    this.source = source;
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OAEPParameter(OAEPParameter other) {
    if (other.isSetHashAlg()) {
      this.hashAlg = other.hashAlg;
    }
    if (other.isSetMgf()) {
      this.mgf = other.mgf;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
    }
  }

  @Override
  public OAEPParameter deepCopy() {
    return new OAEPParameter(this);
  }

  @Override
  public void clear() {
    this.hashAlg = kl.hsm.server.svc.p11.MechanismType.TCKM_INVALID;

    this.mgf = kl.hsm.server.svc.p11.MGF.TCKG_MGF1_INVALID;

    this.source = kl.hsm.server.svc.p11.OAEPSourceType.TCKZ_DATA_INVALID;

    this.data = null;
  }

  /**
   * 
   * @see MechanismType
   */
  @org.apache.thrift.annotation.Nullable
  public MechanismType getHashAlg() {
    return this.hashAlg;
  }

  /**
   * 
   * @see MechanismType
   */
  public OAEPParameter setHashAlg(@org.apache.thrift.annotation.Nullable MechanismType hashAlg) {
    this.hashAlg = hashAlg;
    return this;
  }

  public void unsetHashAlg() {
    this.hashAlg = null;
  }

  /** Returns true if field hashAlg is set (has been assigned a value) and false otherwise */
  public boolean isSetHashAlg() {
    return this.hashAlg != null;
  }

  public void setHashAlgIsSet(boolean value) {
    if (!value) {
      this.hashAlg = null;
    }
  }

  /**
   * 
   * @see MGF
   */
  @org.apache.thrift.annotation.Nullable
  public MGF getMgf() {
    return this.mgf;
  }

  /**
   * 
   * @see MGF
   */
  public OAEPParameter setMgf(@org.apache.thrift.annotation.Nullable MGF mgf) {
    this.mgf = mgf;
    return this;
  }

  public void unsetMgf() {
    this.mgf = null;
  }

  /** Returns true if field mgf is set (has been assigned a value) and false otherwise */
  public boolean isSetMgf() {
    return this.mgf != null;
  }

  public void setMgfIsSet(boolean value) {
    if (!value) {
      this.mgf = null;
    }
  }

  /**
   * 
   * @see OAEPSourceType
   */
  @org.apache.thrift.annotation.Nullable
  public OAEPSourceType getSource() {
    return this.source;
  }

  /**
   * 
   * @see OAEPSourceType
   */
  public OAEPParameter setSource(@org.apache.thrift.annotation.Nullable OAEPSourceType source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public java.nio.ByteBuffer bufferForData() {
    return org.apache.thrift.TBaseHelper.copyBinary(data);
  }

  public OAEPParameter setData(byte[] data) {
    this.data = data == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(data.clone());
    return this;
  }

  public OAEPParameter setData(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer data) {
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case HASH_ALG:
      if (value == null) {
        unsetHashAlg();
      } else {
        setHashAlg((MechanismType)value);
      }
      break;

    case MGF:
      if (value == null) {
        unsetMgf();
      } else {
        setMgf((MGF)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((OAEPSourceType)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        if (value instanceof byte[]) {
          setData((byte[])value);
        } else {
          setData((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HASH_ALG:
      return getHashAlg();

    case MGF:
      return getMgf();

    case SOURCE:
      return getSource();

    case DATA:
      return getData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HASH_ALG:
      return isSetHashAlg();
    case MGF:
      return isSetMgf();
    case SOURCE:
      return isSetSource();
    case DATA:
      return isSetData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof OAEPParameter)
      return this.equals((OAEPParameter)that);
    return false;
  }

  public boolean equals(OAEPParameter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hashAlg = true && this.isSetHashAlg();
    boolean that_present_hashAlg = true && that.isSetHashAlg();
    if (this_present_hashAlg || that_present_hashAlg) {
      if (!(this_present_hashAlg && that_present_hashAlg))
        return false;
      if (!this.hashAlg.equals(that.hashAlg))
        return false;
    }

    boolean this_present_mgf = true && this.isSetMgf();
    boolean that_present_mgf = true && that.isSetMgf();
    if (this_present_mgf || that_present_mgf) {
      if (!(this_present_mgf && that_present_mgf))
        return false;
      if (!this.mgf.equals(that.mgf))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHashAlg()) ? 131071 : 524287);
    if (isSetHashAlg())
      hashCode = hashCode * 8191 + hashAlg.getValue();

    hashCode = hashCode * 8191 + ((isSetMgf()) ? 131071 : 524287);
    if (isSetMgf())
      hashCode = hashCode * 8191 + mgf.getValue();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source.getValue();

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OAEPParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetHashAlg(), other.isSetHashAlg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashAlg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashAlg, other.hashAlg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMgf(), other.isSetMgf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMgf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mgf, other.mgf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource(), other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData(), other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OAEPParameter(");
    boolean first = true;

    sb.append("hashAlg:");
    if (this.hashAlg == null) {
      sb.append("null");
    } else {
      sb.append(this.hashAlg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mgf:");
    if (this.mgf == null) {
      sb.append("null");
    } else {
      sb.append(this.mgf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.data, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OAEPParameterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public OAEPParameterStandardScheme getScheme() {
      return new OAEPParameterStandardScheme();
    }
  }

  private static class OAEPParameterStandardScheme extends org.apache.thrift.scheme.StandardScheme<OAEPParameter> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, OAEPParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HASH_ALG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hashAlg = kl.hsm.server.svc.p11.MechanismType.findByValue(iprot.readI32());
              struct.setHashAlgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MGF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mgf = kl.hsm.server.svc.p11.MGF.findByValue(iprot.readI32());
              struct.setMgfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = kl.hsm.server.svc.p11.OAEPSourceType.findByValue(iprot.readI32());
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, OAEPParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hashAlg != null) {
        oprot.writeFieldBegin(HASH_ALG_FIELD_DESC);
        oprot.writeI32(struct.hashAlg.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.mgf != null) {
        oprot.writeFieldBegin(MGF_FIELD_DESC);
        oprot.writeI32(struct.mgf.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeI32(struct.source.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OAEPParameterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public OAEPParameterTupleScheme getScheme() {
      return new OAEPParameterTupleScheme();
    }
  }

  private static class OAEPParameterTupleScheme extends org.apache.thrift.scheme.TupleScheme<OAEPParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OAEPParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHashAlg()) {
        optionals.set(0);
      }
      if (struct.isSetMgf()) {
        optionals.set(1);
      }
      if (struct.isSetSource()) {
        optionals.set(2);
      }
      if (struct.isSetData()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetHashAlg()) {
        oprot.writeI32(struct.hashAlg.getValue());
      }
      if (struct.isSetMgf()) {
        oprot.writeI32(struct.mgf.getValue());
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source.getValue());
      }
      if (struct.isSetData()) {
        oprot.writeBinary(struct.data);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OAEPParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.hashAlg = kl.hsm.server.svc.p11.MechanismType.findByValue(iprot.readI32());
        struct.setHashAlgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mgf = kl.hsm.server.svc.p11.MGF.findByValue(iprot.readI32());
        struct.setMgfIsSet(true);
      }
      if (incoming.get(2)) {
        struct.source = kl.hsm.server.svc.p11.OAEPSourceType.findByValue(iprot.readI32());
        struct.setSourceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

