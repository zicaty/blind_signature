/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 槽位信息
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class SlotInfo implements org.apache.thrift.TBase<SlotInfo, SlotInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SlotInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SlotInfo");

  private static final org.apache.thrift.protocol.TField SLOT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("slotDescription", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MANUFACTURER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("manufacturerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HARDWARE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("hardwareVersion", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField FIRMWARE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("firmwareVersion", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SlotInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SlotInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String slotDescription; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String manufacturerID; // required
  public int flags; // required
  public @org.apache.thrift.annotation.Nullable Version hardwareVersion; // required
  public @org.apache.thrift.annotation.Nullable Version firmwareVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLOT_DESCRIPTION((short)1, "slotDescription"),
    MANUFACTURER_ID((short)2, "manufacturerID"),
    FLAGS((short)3, "flags"),
    HARDWARE_VERSION((short)4, "hardwareVersion"),
    FIRMWARE_VERSION((short)5, "firmwareVersion");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLOT_DESCRIPTION
          return SLOT_DESCRIPTION;
        case 2: // MANUFACTURER_ID
          return MANUFACTURER_ID;
        case 3: // FLAGS
          return FLAGS;
        case 4: // HARDWARE_VERSION
          return HARDWARE_VERSION;
        case 5: // FIRMWARE_VERSION
          return FIRMWARE_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLAGS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLOT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("slotDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANUFACTURER_ID, new org.apache.thrift.meta_data.FieldMetaData("manufacturerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HARDWARE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("hardwareVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Version.class)));
    tmpMap.put(_Fields.FIRMWARE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("firmwareVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Version.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SlotInfo.class, metaDataMap);
  }

  public SlotInfo() {
  }

  public SlotInfo(
    java.lang.String slotDescription,
    java.lang.String manufacturerID,
    int flags,
    Version hardwareVersion,
    Version firmwareVersion)
  {
    this();
    this.slotDescription = slotDescription;
    this.manufacturerID = manufacturerID;
    this.flags = flags;
    setFlagsIsSet(true);
    this.hardwareVersion = hardwareVersion;
    this.firmwareVersion = firmwareVersion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SlotInfo(SlotInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSlotDescription()) {
      this.slotDescription = other.slotDescription;
    }
    if (other.isSetManufacturerID()) {
      this.manufacturerID = other.manufacturerID;
    }
    this.flags = other.flags;
    if (other.isSetHardwareVersion()) {
      this.hardwareVersion = new Version(other.hardwareVersion);
    }
    if (other.isSetFirmwareVersion()) {
      this.firmwareVersion = new Version(other.firmwareVersion);
    }
  }

  @Override
  public SlotInfo deepCopy() {
    return new SlotInfo(this);
  }

  @Override
  public void clear() {
    this.slotDescription = null;
    this.manufacturerID = null;
    setFlagsIsSet(false);
    this.flags = 0;
    this.hardwareVersion = null;
    this.firmwareVersion = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSlotDescription() {
    return this.slotDescription;
  }

  public SlotInfo setSlotDescription(@org.apache.thrift.annotation.Nullable java.lang.String slotDescription) {
    this.slotDescription = slotDescription;
    return this;
  }

  public void unsetSlotDescription() {
    this.slotDescription = null;
  }

  /** Returns true if field slotDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotDescription() {
    return this.slotDescription != null;
  }

  public void setSlotDescriptionIsSet(boolean value) {
    if (!value) {
      this.slotDescription = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getManufacturerID() {
    return this.manufacturerID;
  }

  public SlotInfo setManufacturerID(@org.apache.thrift.annotation.Nullable java.lang.String manufacturerID) {
    this.manufacturerID = manufacturerID;
    return this;
  }

  public void unsetManufacturerID() {
    this.manufacturerID = null;
  }

  /** Returns true if field manufacturerID is set (has been assigned a value) and false otherwise */
  public boolean isSetManufacturerID() {
    return this.manufacturerID != null;
  }

  public void setManufacturerIDIsSet(boolean value) {
    if (!value) {
      this.manufacturerID = null;
    }
  }

  public int getFlags() {
    return this.flags;
  }

  public SlotInfo setFlags(int flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Version getHardwareVersion() {
    return this.hardwareVersion;
  }

  public SlotInfo setHardwareVersion(@org.apache.thrift.annotation.Nullable Version hardwareVersion) {
    this.hardwareVersion = hardwareVersion;
    return this;
  }

  public void unsetHardwareVersion() {
    this.hardwareVersion = null;
  }

  /** Returns true if field hardwareVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetHardwareVersion() {
    return this.hardwareVersion != null;
  }

  public void setHardwareVersionIsSet(boolean value) {
    if (!value) {
      this.hardwareVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Version getFirmwareVersion() {
    return this.firmwareVersion;
  }

  public SlotInfo setFirmwareVersion(@org.apache.thrift.annotation.Nullable Version firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
    return this;
  }

  public void unsetFirmwareVersion() {
    this.firmwareVersion = null;
  }

  /** Returns true if field firmwareVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetFirmwareVersion() {
    return this.firmwareVersion != null;
  }

  public void setFirmwareVersionIsSet(boolean value) {
    if (!value) {
      this.firmwareVersion = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SLOT_DESCRIPTION:
      if (value == null) {
        unsetSlotDescription();
      } else {
        setSlotDescription((java.lang.String)value);
      }
      break;

    case MANUFACTURER_ID:
      if (value == null) {
        unsetManufacturerID();
      } else {
        setManufacturerID((java.lang.String)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((java.lang.Integer)value);
      }
      break;

    case HARDWARE_VERSION:
      if (value == null) {
        unsetHardwareVersion();
      } else {
        setHardwareVersion((Version)value);
      }
      break;

    case FIRMWARE_VERSION:
      if (value == null) {
        unsetFirmwareVersion();
      } else {
        setFirmwareVersion((Version)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SLOT_DESCRIPTION:
      return getSlotDescription();

    case MANUFACTURER_ID:
      return getManufacturerID();

    case FLAGS:
      return getFlags();

    case HARDWARE_VERSION:
      return getHardwareVersion();

    case FIRMWARE_VERSION:
      return getFirmwareVersion();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SLOT_DESCRIPTION:
      return isSetSlotDescription();
    case MANUFACTURER_ID:
      return isSetManufacturerID();
    case FLAGS:
      return isSetFlags();
    case HARDWARE_VERSION:
      return isSetHardwareVersion();
    case FIRMWARE_VERSION:
      return isSetFirmwareVersion();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SlotInfo)
      return this.equals((SlotInfo)that);
    return false;
  }

  public boolean equals(SlotInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_slotDescription = true && this.isSetSlotDescription();
    boolean that_present_slotDescription = true && that.isSetSlotDescription();
    if (this_present_slotDescription || that_present_slotDescription) {
      if (!(this_present_slotDescription && that_present_slotDescription))
        return false;
      if (!this.slotDescription.equals(that.slotDescription))
        return false;
    }

    boolean this_present_manufacturerID = true && this.isSetManufacturerID();
    boolean that_present_manufacturerID = true && that.isSetManufacturerID();
    if (this_present_manufacturerID || that_present_manufacturerID) {
      if (!(this_present_manufacturerID && that_present_manufacturerID))
        return false;
      if (!this.manufacturerID.equals(that.manufacturerID))
        return false;
    }

    boolean this_present_flags = true;
    boolean that_present_flags = true;
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    boolean this_present_hardwareVersion = true && this.isSetHardwareVersion();
    boolean that_present_hardwareVersion = true && that.isSetHardwareVersion();
    if (this_present_hardwareVersion || that_present_hardwareVersion) {
      if (!(this_present_hardwareVersion && that_present_hardwareVersion))
        return false;
      if (!this.hardwareVersion.equals(that.hardwareVersion))
        return false;
    }

    boolean this_present_firmwareVersion = true && this.isSetFirmwareVersion();
    boolean that_present_firmwareVersion = true && that.isSetFirmwareVersion();
    if (this_present_firmwareVersion || that_present_firmwareVersion) {
      if (!(this_present_firmwareVersion && that_present_firmwareVersion))
        return false;
      if (!this.firmwareVersion.equals(that.firmwareVersion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSlotDescription()) ? 131071 : 524287);
    if (isSetSlotDescription())
      hashCode = hashCode * 8191 + slotDescription.hashCode();

    hashCode = hashCode * 8191 + ((isSetManufacturerID()) ? 131071 : 524287);
    if (isSetManufacturerID())
      hashCode = hashCode * 8191 + manufacturerID.hashCode();

    hashCode = hashCode * 8191 + flags;

    hashCode = hashCode * 8191 + ((isSetHardwareVersion()) ? 131071 : 524287);
    if (isSetHardwareVersion())
      hashCode = hashCode * 8191 + hardwareVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirmwareVersion()) ? 131071 : 524287);
    if (isSetFirmwareVersion())
      hashCode = hashCode * 8191 + firmwareVersion.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SlotInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSlotDescription(), other.isSetSlotDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slotDescription, other.slotDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetManufacturerID(), other.isSetManufacturerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufacturerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufacturerID, other.manufacturerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlags(), other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHardwareVersion(), other.isSetHardwareVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHardwareVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hardwareVersion, other.hardwareVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFirmwareVersion(), other.isSetFirmwareVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirmwareVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firmwareVersion, other.firmwareVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SlotInfo(");
    boolean first = true;

    sb.append("slotDescription:");
    if (this.slotDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.slotDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manufacturerID:");
    if (this.manufacturerID == null) {
      sb.append("null");
    } else {
      sb.append(this.manufacturerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    sb.append(this.flags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hardwareVersion:");
    if (this.hardwareVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.hardwareVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firmwareVersion:");
    if (this.firmwareVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.firmwareVersion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hardwareVersion != null) {
      hardwareVersion.validate();
    }
    if (firmwareVersion != null) {
      firmwareVersion.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SlotInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SlotInfoStandardScheme getScheme() {
      return new SlotInfoStandardScheme();
    }
  }

  private static class SlotInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<SlotInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SlotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLOT_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.slotDescription = iprot.readString();
              struct.setSlotDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MANUFACTURER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manufacturerID = iprot.readString();
              struct.setManufacturerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flags = iprot.readI32();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HARDWARE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hardwareVersion = new Version();
              struct.hardwareVersion.read(iprot);
              struct.setHardwareVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIRMWARE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.firmwareVersion = new Version();
              struct.firmwareVersion.read(iprot);
              struct.setFirmwareVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SlotInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.slotDescription != null) {
        oprot.writeFieldBegin(SLOT_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.slotDescription);
        oprot.writeFieldEnd();
      }
      if (struct.manufacturerID != null) {
        oprot.writeFieldBegin(MANUFACTURER_ID_FIELD_DESC);
        oprot.writeString(struct.manufacturerID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(struct.flags);
      oprot.writeFieldEnd();
      if (struct.hardwareVersion != null) {
        oprot.writeFieldBegin(HARDWARE_VERSION_FIELD_DESC);
        struct.hardwareVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.firmwareVersion != null) {
        oprot.writeFieldBegin(FIRMWARE_VERSION_FIELD_DESC);
        struct.firmwareVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SlotInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SlotInfoTupleScheme getScheme() {
      return new SlotInfoTupleScheme();
    }
  }

  private static class SlotInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<SlotInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SlotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSlotDescription()) {
        optionals.set(0);
      }
      if (struct.isSetManufacturerID()) {
        optionals.set(1);
      }
      if (struct.isSetFlags()) {
        optionals.set(2);
      }
      if (struct.isSetHardwareVersion()) {
        optionals.set(3);
      }
      if (struct.isSetFirmwareVersion()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSlotDescription()) {
        oprot.writeString(struct.slotDescription);
      }
      if (struct.isSetManufacturerID()) {
        oprot.writeString(struct.manufacturerID);
      }
      if (struct.isSetFlags()) {
        oprot.writeI32(struct.flags);
      }
      if (struct.isSetHardwareVersion()) {
        struct.hardwareVersion.write(oprot);
      }
      if (struct.isSetFirmwareVersion()) {
        struct.firmwareVersion.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SlotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.slotDescription = iprot.readString();
        struct.setSlotDescriptionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.manufacturerID = iprot.readString();
        struct.setManufacturerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.flags = iprot.readI32();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hardwareVersion = new Version();
        struct.hardwareVersion.read(iprot);
        struct.setHardwareVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.firmwareVersion = new Version();
        struct.firmwareVersion.read(iprot);
        struct.setFirmwareVersionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

