/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 密钥
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class Object implements org.apache.thrift.TBase<Object, Object._Fields>, java.io.Serializable, Cloneable, Comparable<Object> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Object");

  private static final org.apache.thrift.protocol.TField IS_LMK_FIELD_DESC = new org.apache.thrift.protocol.TField("isLMK", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IS_ENCRYPTED_WITH_LMK_FIELD_DESC = new org.apache.thrift.protocol.TField("isEncryptedWithLMK", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ObjectTupleSchemeFactory();

  public boolean isLMK; // required
  public boolean isEncryptedWithLMK; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer value; // required
  public @org.apache.thrift.annotation.Nullable Attribute attribute; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_LMK((short)1, "isLMK"),
    IS_ENCRYPTED_WITH_LMK((short)2, "isEncryptedWithLMK"),
    VALUE((short)3, "value"),
    ATTRIBUTE((short)4, "attribute");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_LMK
          return IS_LMK;
        case 2: // IS_ENCRYPTED_WITH_LMK
          return IS_ENCRYPTED_WITH_LMK;
        case 3: // VALUE
          return VALUE;
        case 4: // ATTRIBUTE
          return ATTRIBUTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISLMK_ISSET_ID = 0;
  private static final int __ISENCRYPTEDWITHLMK_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_LMK, new org.apache.thrift.meta_data.FieldMetaData("isLMK", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ENCRYPTED_WITH_LMK, new org.apache.thrift.meta_data.FieldMetaData("isEncryptedWithLMK", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("attribute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Attribute.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Object.class, metaDataMap);
  }

  public Object() {
    this.isLMK = false;

    this.isEncryptedWithLMK = false;

  }

  public Object(
    boolean isLMK,
    boolean isEncryptedWithLMK,
    java.nio.ByteBuffer value,
    Attribute attribute)
  {
    this();
    this.isLMK = isLMK;
    setIsLMKIsSet(true);
    this.isEncryptedWithLMK = isEncryptedWithLMK;
    setIsEncryptedWithLMKIsSet(true);
    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
    this.attribute = attribute;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Object(Object other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isLMK = other.isLMK;
    this.isEncryptedWithLMK = other.isEncryptedWithLMK;
    if (other.isSetValue()) {
      this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
    }
    if (other.isSetAttribute()) {
      this.attribute = new Attribute(other.attribute);
    }
  }

  @Override
  public Object deepCopy() {
    return new Object(this);
  }

  @Override
  public void clear() {
    this.isLMK = false;

    this.isEncryptedWithLMK = false;

    this.value = null;
    this.attribute = null;
  }

  public boolean isIsLMK() {
    return this.isLMK;
  }

  public Object setIsLMK(boolean isLMK) {
    this.isLMK = isLMK;
    setIsLMKIsSet(true);
    return this;
  }

  public void unsetIsLMK() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLMK_ISSET_ID);
  }

  /** Returns true if field isLMK is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLMK() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLMK_ISSET_ID);
  }

  public void setIsLMKIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLMK_ISSET_ID, value);
  }

  public boolean isIsEncryptedWithLMK() {
    return this.isEncryptedWithLMK;
  }

  public Object setIsEncryptedWithLMK(boolean isEncryptedWithLMK) {
    this.isEncryptedWithLMK = isEncryptedWithLMK;
    setIsEncryptedWithLMKIsSet(true);
    return this;
  }

  public void unsetIsEncryptedWithLMK() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISENCRYPTEDWITHLMK_ISSET_ID);
  }

  /** Returns true if field isEncryptedWithLMK is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEncryptedWithLMK() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISENCRYPTEDWITHLMK_ISSET_ID);
  }

  public void setIsEncryptedWithLMKIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISENCRYPTEDWITHLMK_ISSET_ID, value);
  }

  public byte[] getValue() {
    setValue(org.apache.thrift.TBaseHelper.rightSize(value));
    return value == null ? null : value.array();
  }

  public java.nio.ByteBuffer bufferForValue() {
    return org.apache.thrift.TBaseHelper.copyBinary(value);
  }

  public Object setValue(byte[] value) {
    this.value = value == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(value.clone());
    return this;
  }

  public Object setValue(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer value) {
    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Attribute getAttribute() {
    return this.attribute;
  }

  public Object setAttribute(@org.apache.thrift.annotation.Nullable Attribute attribute) {
    this.attribute = attribute;
    return this;
  }

  public void unsetAttribute() {
    this.attribute = null;
  }

  /** Returns true if field attribute is set (has been assigned a value) and false otherwise */
  public boolean isSetAttribute() {
    return this.attribute != null;
  }

  public void setAttributeIsSet(boolean value) {
    if (!value) {
      this.attribute = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IS_LMK:
      if (value == null) {
        unsetIsLMK();
      } else {
        setIsLMK((java.lang.Boolean)value);
      }
      break;

    case IS_ENCRYPTED_WITH_LMK:
      if (value == null) {
        unsetIsEncryptedWithLMK();
      } else {
        setIsEncryptedWithLMK((java.lang.Boolean)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        if (value instanceof byte[]) {
          setValue((byte[])value);
        } else {
          setValue((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ATTRIBUTE:
      if (value == null) {
        unsetAttribute();
      } else {
        setAttribute((Attribute)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_LMK:
      return isIsLMK();

    case IS_ENCRYPTED_WITH_LMK:
      return isIsEncryptedWithLMK();

    case VALUE:
      return getValue();

    case ATTRIBUTE:
      return getAttribute();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IS_LMK:
      return isSetIsLMK();
    case IS_ENCRYPTED_WITH_LMK:
      return isSetIsEncryptedWithLMK();
    case VALUE:
      return isSetValue();
    case ATTRIBUTE:
      return isSetAttribute();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Object)
      return this.equals((Object)that);
    return false;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_isLMK = true;
    boolean that_present_isLMK = true;
    if (this_present_isLMK || that_present_isLMK) {
      if (!(this_present_isLMK && that_present_isLMK))
        return false;
      if (this.isLMK != that.isLMK)
        return false;
    }

    boolean this_present_isEncryptedWithLMK = true;
    boolean that_present_isEncryptedWithLMK = true;
    if (this_present_isEncryptedWithLMK || that_present_isEncryptedWithLMK) {
      if (!(this_present_isEncryptedWithLMK && that_present_isEncryptedWithLMK))
        return false;
      if (this.isEncryptedWithLMK != that.isEncryptedWithLMK)
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_attribute = true && this.isSetAttribute();
    boolean that_present_attribute = true && that.isSetAttribute();
    if (this_present_attribute || that_present_attribute) {
      if (!(this_present_attribute && that_present_attribute))
        return false;
      if (!this.attribute.equals(that.attribute))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isLMK) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isEncryptedWithLMK) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttribute()) ? 131071 : 524287);
    if (isSetAttribute())
      hashCode = hashCode * 8191 + attribute.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Object other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIsLMK(), other.isSetIsLMK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLMK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLMK, other.isLMK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsEncryptedWithLMK(), other.isSetIsEncryptedWithLMK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEncryptedWithLMK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEncryptedWithLMK, other.isEncryptedWithLMK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAttribute(), other.isSetAttribute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttribute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute, other.attribute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Object(");
    boolean first = true;

    sb.append("isLMK:");
    sb.append(this.isLMK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEncryptedWithLMK:");
    sb.append(this.isEncryptedWithLMK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.value, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attribute:");
    if (this.attribute == null) {
      sb.append("null");
    } else {
      sb.append(this.attribute);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (attribute != null) {
      attribute.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ObjectStandardScheme getScheme() {
      return new ObjectStandardScheme();
    }
  }

  private static class ObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<Object> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Object struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_LMK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLMK = iprot.readBool();
              struct.setIsLMKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_ENCRYPTED_WITH_LMK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEncryptedWithLMK = iprot.readBool();
              struct.setIsEncryptedWithLMKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readBinary();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTRIBUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.attribute = new Attribute();
              struct.attribute.read(iprot);
              struct.setAttributeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Object struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_LMK_FIELD_DESC);
      oprot.writeBool(struct.isLMK);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENCRYPTED_WITH_LMK_FIELD_DESC);
      oprot.writeBool(struct.isEncryptedWithLMK);
      oprot.writeFieldEnd();
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBinary(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.attribute != null) {
        oprot.writeFieldBegin(ATTRIBUTE_FIELD_DESC);
        struct.attribute.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ObjectTupleScheme getScheme() {
      return new ObjectTupleScheme();
    }
  }

  private static class ObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<Object> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Object struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIsLMK()) {
        optionals.set(0);
      }
      if (struct.isSetIsEncryptedWithLMK()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetAttribute()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIsLMK()) {
        oprot.writeBool(struct.isLMK);
      }
      if (struct.isSetIsEncryptedWithLMK()) {
        oprot.writeBool(struct.isEncryptedWithLMK);
      }
      if (struct.isSetValue()) {
        oprot.writeBinary(struct.value);
      }
      if (struct.isSetAttribute()) {
        struct.attribute.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Object struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.isLMK = iprot.readBool();
        struct.setIsLMKIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isEncryptedWithLMK = iprot.readBool();
        struct.setIsEncryptedWithLMKIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readBinary();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.attribute = new Attribute();
        struct.attribute.read(iprot);
        struct.setAttributeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

