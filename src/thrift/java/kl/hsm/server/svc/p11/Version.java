/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 版本号
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class Version implements org.apache.thrift.TBase<Version, Version._Fields>, java.io.Serializable, Cloneable, Comparable<Version> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Version");

  private static final org.apache.thrift.protocol.TField U8_MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField("u8Major", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField U8_MINOR_FIELD_DESC = new org.apache.thrift.protocol.TField("u8Minor", org.apache.thrift.protocol.TType.BYTE, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VersionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VersionTupleSchemeFactory();

  public byte u8Major; // required
  public byte u8Minor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    U8_MAJOR((short)1, "u8Major"),
    U8_MINOR((short)2, "u8Minor");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // U8_MAJOR
          return U8_MAJOR;
        case 2: // U8_MINOR
          return U8_MINOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __U8MAJOR_ISSET_ID = 0;
  private static final int __U8MINOR_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.U8_MAJOR, new org.apache.thrift.meta_data.FieldMetaData("u8Major", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.U8_MINOR, new org.apache.thrift.meta_data.FieldMetaData("u8Minor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Version.class, metaDataMap);
  }

  public Version() {
  }

  public Version(
    byte u8Major,
    byte u8Minor)
  {
    this();
    this.u8Major = u8Major;
    setU8MajorIsSet(true);
    this.u8Minor = u8Minor;
    setU8MinorIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Version(Version other) {
    __isset_bitfield = other.__isset_bitfield;
    this.u8Major = other.u8Major;
    this.u8Minor = other.u8Minor;
  }

  @Override
  public Version deepCopy() {
    return new Version(this);
  }

  @Override
  public void clear() {
    setU8MajorIsSet(false);
    this.u8Major = 0;
    setU8MinorIsSet(false);
    this.u8Minor = 0;
  }

  public byte getU8Major() {
    return this.u8Major;
  }

  public Version setU8Major(byte u8Major) {
    this.u8Major = u8Major;
    setU8MajorIsSet(true);
    return this;
  }

  public void unsetU8Major() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __U8MAJOR_ISSET_ID);
  }

  /** Returns true if field u8Major is set (has been assigned a value) and false otherwise */
  public boolean isSetU8Major() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __U8MAJOR_ISSET_ID);
  }

  public void setU8MajorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __U8MAJOR_ISSET_ID, value);
  }

  public byte getU8Minor() {
    return this.u8Minor;
  }

  public Version setU8Minor(byte u8Minor) {
    this.u8Minor = u8Minor;
    setU8MinorIsSet(true);
    return this;
  }

  public void unsetU8Minor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __U8MINOR_ISSET_ID);
  }

  /** Returns true if field u8Minor is set (has been assigned a value) and false otherwise */
  public boolean isSetU8Minor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __U8MINOR_ISSET_ID);
  }

  public void setU8MinorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __U8MINOR_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case U8_MAJOR:
      if (value == null) {
        unsetU8Major();
      } else {
        setU8Major((java.lang.Byte)value);
      }
      break;

    case U8_MINOR:
      if (value == null) {
        unsetU8Minor();
      } else {
        setU8Minor((java.lang.Byte)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case U8_MAJOR:
      return getU8Major();

    case U8_MINOR:
      return getU8Minor();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case U8_MAJOR:
      return isSetU8Major();
    case U8_MINOR:
      return isSetU8Minor();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Version)
      return this.equals((Version)that);
    return false;
  }

  public boolean equals(Version that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_u8Major = true;
    boolean that_present_u8Major = true;
    if (this_present_u8Major || that_present_u8Major) {
      if (!(this_present_u8Major && that_present_u8Major))
        return false;
      if (this.u8Major != that.u8Major)
        return false;
    }

    boolean this_present_u8Minor = true;
    boolean that_present_u8Minor = true;
    if (this_present_u8Minor || that_present_u8Minor) {
      if (!(this_present_u8Minor && that_present_u8Minor))
        return false;
      if (this.u8Minor != that.u8Minor)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (u8Major);

    hashCode = hashCode * 8191 + (int) (u8Minor);

    return hashCode;
  }

  @Override
  public int compareTo(Version other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetU8Major(), other.isSetU8Major());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetU8Major()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u8Major, other.u8Major);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetU8Minor(), other.isSetU8Minor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetU8Minor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u8Minor, other.u8Minor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Version(");
    boolean first = true;

    sb.append("u8Major:");
    sb.append(this.u8Major);
    first = false;
    if (!first) sb.append(", ");
    sb.append("u8Minor:");
    sb.append(this.u8Minor);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VersionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public VersionStandardScheme getScheme() {
      return new VersionStandardScheme();
    }
  }

  private static class VersionStandardScheme extends org.apache.thrift.scheme.StandardScheme<Version> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Version struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // U8_MAJOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.u8Major = iprot.readByte();
              struct.setU8MajorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // U8_MINOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.u8Minor = iprot.readByte();
              struct.setU8MinorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Version struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(U8_MAJOR_FIELD_DESC);
      oprot.writeByte(struct.u8Major);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(U8_MINOR_FIELD_DESC);
      oprot.writeByte(struct.u8Minor);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VersionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public VersionTupleScheme getScheme() {
      return new VersionTupleScheme();
    }
  }

  private static class VersionTupleScheme extends org.apache.thrift.scheme.TupleScheme<Version> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Version struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetU8Major()) {
        optionals.set(0);
      }
      if (struct.isSetU8Minor()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetU8Major()) {
        oprot.writeByte(struct.u8Major);
      }
      if (struct.isSetU8Minor()) {
        oprot.writeByte(struct.u8Minor);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Version struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.u8Major = iprot.readByte();
        struct.setU8MajorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.u8Minor = iprot.readByte();
        struct.setU8MinorIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

