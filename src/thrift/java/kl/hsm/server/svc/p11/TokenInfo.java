/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.p11;

/**
 * 令牌信息
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class TokenInfo implements org.apache.thrift.TBase<TokenInfo, TokenInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TokenInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenInfo");

  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MANUFACTURER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("manufacturerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField UL_MAX_SESSION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ulMaxSessionCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField UL_SESSION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ulSessionCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField UL_MAX_RW_SESSION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ulMaxRwSessionCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField UL_RW_SESSION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ulRwSessionCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField UL_MAX_PIN_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("ulMaxPinLen", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UL_MIN_PIN_LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("ulMinPinLen", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UL_TOTAL_PUBLIC_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("ulTotalPublicMemory", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UL_FREE_PUBLIC_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("ulFreePublicMemory", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField UL_TOTAL_PRIVATE_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("ulTotalPrivateMemory", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField UL_FREE_PRIVATE_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("ulFreePrivateMemory", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HARDWARE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("hardwareVersion", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField FIRMWARE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("firmwareVersion", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField UTC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("utcTime", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TokenInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TokenInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String label; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String manufacturerID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String model; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String serialNumber; // required
  public int flags; // required
  public int ulMaxSessionCount; // required
  public int ulSessionCount; // required
  public int ulMaxRwSessionCount; // required
  public int ulRwSessionCount; // required
  public int ulMaxPinLen; // required
  public int ulMinPinLen; // required
  public int ulTotalPublicMemory; // required
  public int ulFreePublicMemory; // required
  public int ulTotalPrivateMemory; // required
  public int ulFreePrivateMemory; // required
  public @org.apache.thrift.annotation.Nullable Version hardwareVersion; // required
  public @org.apache.thrift.annotation.Nullable Version firmwareVersion; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String utcTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LABEL((short)1, "label"),
    MANUFACTURER_ID((short)2, "manufacturerID"),
    MODEL((short)3, "model"),
    SERIAL_NUMBER((short)4, "serialNumber"),
    FLAGS((short)5, "flags"),
    UL_MAX_SESSION_COUNT((short)6, "ulMaxSessionCount"),
    UL_SESSION_COUNT((short)7, "ulSessionCount"),
    UL_MAX_RW_SESSION_COUNT((short)8, "ulMaxRwSessionCount"),
    UL_RW_SESSION_COUNT((short)9, "ulRwSessionCount"),
    UL_MAX_PIN_LEN((short)10, "ulMaxPinLen"),
    UL_MIN_PIN_LEN((short)11, "ulMinPinLen"),
    UL_TOTAL_PUBLIC_MEMORY((short)12, "ulTotalPublicMemory"),
    UL_FREE_PUBLIC_MEMORY((short)13, "ulFreePublicMemory"),
    UL_TOTAL_PRIVATE_MEMORY((short)14, "ulTotalPrivateMemory"),
    UL_FREE_PRIVATE_MEMORY((short)15, "ulFreePrivateMemory"),
    HARDWARE_VERSION((short)16, "hardwareVersion"),
    FIRMWARE_VERSION((short)17, "firmwareVersion"),
    UTC_TIME((short)18, "utcTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LABEL
          return LABEL;
        case 2: // MANUFACTURER_ID
          return MANUFACTURER_ID;
        case 3: // MODEL
          return MODEL;
        case 4: // SERIAL_NUMBER
          return SERIAL_NUMBER;
        case 5: // FLAGS
          return FLAGS;
        case 6: // UL_MAX_SESSION_COUNT
          return UL_MAX_SESSION_COUNT;
        case 7: // UL_SESSION_COUNT
          return UL_SESSION_COUNT;
        case 8: // UL_MAX_RW_SESSION_COUNT
          return UL_MAX_RW_SESSION_COUNT;
        case 9: // UL_RW_SESSION_COUNT
          return UL_RW_SESSION_COUNT;
        case 10: // UL_MAX_PIN_LEN
          return UL_MAX_PIN_LEN;
        case 11: // UL_MIN_PIN_LEN
          return UL_MIN_PIN_LEN;
        case 12: // UL_TOTAL_PUBLIC_MEMORY
          return UL_TOTAL_PUBLIC_MEMORY;
        case 13: // UL_FREE_PUBLIC_MEMORY
          return UL_FREE_PUBLIC_MEMORY;
        case 14: // UL_TOTAL_PRIVATE_MEMORY
          return UL_TOTAL_PRIVATE_MEMORY;
        case 15: // UL_FREE_PRIVATE_MEMORY
          return UL_FREE_PRIVATE_MEMORY;
        case 16: // HARDWARE_VERSION
          return HARDWARE_VERSION;
        case 17: // FIRMWARE_VERSION
          return FIRMWARE_VERSION;
        case 18: // UTC_TIME
          return UTC_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLAGS_ISSET_ID = 0;
  private static final int __ULMAXSESSIONCOUNT_ISSET_ID = 1;
  private static final int __ULSESSIONCOUNT_ISSET_ID = 2;
  private static final int __ULMAXRWSESSIONCOUNT_ISSET_ID = 3;
  private static final int __ULRWSESSIONCOUNT_ISSET_ID = 4;
  private static final int __ULMAXPINLEN_ISSET_ID = 5;
  private static final int __ULMINPINLEN_ISSET_ID = 6;
  private static final int __ULTOTALPUBLICMEMORY_ISSET_ID = 7;
  private static final int __ULFREEPUBLICMEMORY_ISSET_ID = 8;
  private static final int __ULTOTALPRIVATEMEMORY_ISSET_ID = 9;
  private static final int __ULFREEPRIVATEMEMORY_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANUFACTURER_ID, new org.apache.thrift.meta_data.FieldMetaData("manufacturerID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_MAX_SESSION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ulMaxSessionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_SESSION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ulSessionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_MAX_RW_SESSION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ulMaxRwSessionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_RW_SESSION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ulRwSessionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_MAX_PIN_LEN, new org.apache.thrift.meta_data.FieldMetaData("ulMaxPinLen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_MIN_PIN_LEN, new org.apache.thrift.meta_data.FieldMetaData("ulMinPinLen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_TOTAL_PUBLIC_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("ulTotalPublicMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_FREE_PUBLIC_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("ulFreePublicMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_TOTAL_PRIVATE_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("ulTotalPrivateMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UL_FREE_PRIVATE_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("ulFreePrivateMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HARDWARE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("hardwareVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Version.class)));
    tmpMap.put(_Fields.FIRMWARE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("firmwareVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Version.class)));
    tmpMap.put(_Fields.UTC_TIME, new org.apache.thrift.meta_data.FieldMetaData("utcTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenInfo.class, metaDataMap);
  }

  public TokenInfo() {
  }

  public TokenInfo(
    java.lang.String label,
    java.lang.String manufacturerID,
    java.lang.String model,
    java.lang.String serialNumber,
    int flags,
    int ulMaxSessionCount,
    int ulSessionCount,
    int ulMaxRwSessionCount,
    int ulRwSessionCount,
    int ulMaxPinLen,
    int ulMinPinLen,
    int ulTotalPublicMemory,
    int ulFreePublicMemory,
    int ulTotalPrivateMemory,
    int ulFreePrivateMemory,
    Version hardwareVersion,
    Version firmwareVersion,
    java.lang.String utcTime)
  {
    this();
    this.label = label;
    this.manufacturerID = manufacturerID;
    this.model = model;
    this.serialNumber = serialNumber;
    this.flags = flags;
    setFlagsIsSet(true);
    this.ulMaxSessionCount = ulMaxSessionCount;
    setUlMaxSessionCountIsSet(true);
    this.ulSessionCount = ulSessionCount;
    setUlSessionCountIsSet(true);
    this.ulMaxRwSessionCount = ulMaxRwSessionCount;
    setUlMaxRwSessionCountIsSet(true);
    this.ulRwSessionCount = ulRwSessionCount;
    setUlRwSessionCountIsSet(true);
    this.ulMaxPinLen = ulMaxPinLen;
    setUlMaxPinLenIsSet(true);
    this.ulMinPinLen = ulMinPinLen;
    setUlMinPinLenIsSet(true);
    this.ulTotalPublicMemory = ulTotalPublicMemory;
    setUlTotalPublicMemoryIsSet(true);
    this.ulFreePublicMemory = ulFreePublicMemory;
    setUlFreePublicMemoryIsSet(true);
    this.ulTotalPrivateMemory = ulTotalPrivateMemory;
    setUlTotalPrivateMemoryIsSet(true);
    this.ulFreePrivateMemory = ulFreePrivateMemory;
    setUlFreePrivateMemoryIsSet(true);
    this.hardwareVersion = hardwareVersion;
    this.firmwareVersion = firmwareVersion;
    this.utcTime = utcTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenInfo(TokenInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetManufacturerID()) {
      this.manufacturerID = other.manufacturerID;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    if (other.isSetSerialNumber()) {
      this.serialNumber = other.serialNumber;
    }
    this.flags = other.flags;
    this.ulMaxSessionCount = other.ulMaxSessionCount;
    this.ulSessionCount = other.ulSessionCount;
    this.ulMaxRwSessionCount = other.ulMaxRwSessionCount;
    this.ulRwSessionCount = other.ulRwSessionCount;
    this.ulMaxPinLen = other.ulMaxPinLen;
    this.ulMinPinLen = other.ulMinPinLen;
    this.ulTotalPublicMemory = other.ulTotalPublicMemory;
    this.ulFreePublicMemory = other.ulFreePublicMemory;
    this.ulTotalPrivateMemory = other.ulTotalPrivateMemory;
    this.ulFreePrivateMemory = other.ulFreePrivateMemory;
    if (other.isSetHardwareVersion()) {
      this.hardwareVersion = new Version(other.hardwareVersion);
    }
    if (other.isSetFirmwareVersion()) {
      this.firmwareVersion = new Version(other.firmwareVersion);
    }
    if (other.isSetUtcTime()) {
      this.utcTime = other.utcTime;
    }
  }

  @Override
  public TokenInfo deepCopy() {
    return new TokenInfo(this);
  }

  @Override
  public void clear() {
    this.label = null;
    this.manufacturerID = null;
    this.model = null;
    this.serialNumber = null;
    setFlagsIsSet(false);
    this.flags = 0;
    setUlMaxSessionCountIsSet(false);
    this.ulMaxSessionCount = 0;
    setUlSessionCountIsSet(false);
    this.ulSessionCount = 0;
    setUlMaxRwSessionCountIsSet(false);
    this.ulMaxRwSessionCount = 0;
    setUlRwSessionCountIsSet(false);
    this.ulRwSessionCount = 0;
    setUlMaxPinLenIsSet(false);
    this.ulMaxPinLen = 0;
    setUlMinPinLenIsSet(false);
    this.ulMinPinLen = 0;
    setUlTotalPublicMemoryIsSet(false);
    this.ulTotalPublicMemory = 0;
    setUlFreePublicMemoryIsSet(false);
    this.ulFreePublicMemory = 0;
    setUlTotalPrivateMemoryIsSet(false);
    this.ulTotalPrivateMemory = 0;
    setUlFreePrivateMemoryIsSet(false);
    this.ulFreePrivateMemory = 0;
    this.hardwareVersion = null;
    this.firmwareVersion = null;
    this.utcTime = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TokenInfo setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getManufacturerID() {
    return this.manufacturerID;
  }

  public TokenInfo setManufacturerID(@org.apache.thrift.annotation.Nullable java.lang.String manufacturerID) {
    this.manufacturerID = manufacturerID;
    return this;
  }

  public void unsetManufacturerID() {
    this.manufacturerID = null;
  }

  /** Returns true if field manufacturerID is set (has been assigned a value) and false otherwise */
  public boolean isSetManufacturerID() {
    return this.manufacturerID != null;
  }

  public void setManufacturerIDIsSet(boolean value) {
    if (!value) {
      this.manufacturerID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getModel() {
    return this.model;
  }

  public TokenInfo setModel(@org.apache.thrift.annotation.Nullable java.lang.String model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSerialNumber() {
    return this.serialNumber;
  }

  public TokenInfo setSerialNumber(@org.apache.thrift.annotation.Nullable java.lang.String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  public void unsetSerialNumber() {
    this.serialNumber = null;
  }

  /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialNumber() {
    return this.serialNumber != null;
  }

  public void setSerialNumberIsSet(boolean value) {
    if (!value) {
      this.serialNumber = null;
    }
  }

  public int getFlags() {
    return this.flags;
  }

  public TokenInfo setFlags(int flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
  }

  public int getUlMaxSessionCount() {
    return this.ulMaxSessionCount;
  }

  public TokenInfo setUlMaxSessionCount(int ulMaxSessionCount) {
    this.ulMaxSessionCount = ulMaxSessionCount;
    setUlMaxSessionCountIsSet(true);
    return this;
  }

  public void unsetUlMaxSessionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULMAXSESSIONCOUNT_ISSET_ID);
  }

  /** Returns true if field ulMaxSessionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUlMaxSessionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULMAXSESSIONCOUNT_ISSET_ID);
  }

  public void setUlMaxSessionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULMAXSESSIONCOUNT_ISSET_ID, value);
  }

  public int getUlSessionCount() {
    return this.ulSessionCount;
  }

  public TokenInfo setUlSessionCount(int ulSessionCount) {
    this.ulSessionCount = ulSessionCount;
    setUlSessionCountIsSet(true);
    return this;
  }

  public void unsetUlSessionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULSESSIONCOUNT_ISSET_ID);
  }

  /** Returns true if field ulSessionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUlSessionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULSESSIONCOUNT_ISSET_ID);
  }

  public void setUlSessionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULSESSIONCOUNT_ISSET_ID, value);
  }

  public int getUlMaxRwSessionCount() {
    return this.ulMaxRwSessionCount;
  }

  public TokenInfo setUlMaxRwSessionCount(int ulMaxRwSessionCount) {
    this.ulMaxRwSessionCount = ulMaxRwSessionCount;
    setUlMaxRwSessionCountIsSet(true);
    return this;
  }

  public void unsetUlMaxRwSessionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULMAXRWSESSIONCOUNT_ISSET_ID);
  }

  /** Returns true if field ulMaxRwSessionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUlMaxRwSessionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULMAXRWSESSIONCOUNT_ISSET_ID);
  }

  public void setUlMaxRwSessionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULMAXRWSESSIONCOUNT_ISSET_ID, value);
  }

  public int getUlRwSessionCount() {
    return this.ulRwSessionCount;
  }

  public TokenInfo setUlRwSessionCount(int ulRwSessionCount) {
    this.ulRwSessionCount = ulRwSessionCount;
    setUlRwSessionCountIsSet(true);
    return this;
  }

  public void unsetUlRwSessionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULRWSESSIONCOUNT_ISSET_ID);
  }

  /** Returns true if field ulRwSessionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUlRwSessionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULRWSESSIONCOUNT_ISSET_ID);
  }

  public void setUlRwSessionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULRWSESSIONCOUNT_ISSET_ID, value);
  }

  public int getUlMaxPinLen() {
    return this.ulMaxPinLen;
  }

  public TokenInfo setUlMaxPinLen(int ulMaxPinLen) {
    this.ulMaxPinLen = ulMaxPinLen;
    setUlMaxPinLenIsSet(true);
    return this;
  }

  public void unsetUlMaxPinLen() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULMAXPINLEN_ISSET_ID);
  }

  /** Returns true if field ulMaxPinLen is set (has been assigned a value) and false otherwise */
  public boolean isSetUlMaxPinLen() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULMAXPINLEN_ISSET_ID);
  }

  public void setUlMaxPinLenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULMAXPINLEN_ISSET_ID, value);
  }

  public int getUlMinPinLen() {
    return this.ulMinPinLen;
  }

  public TokenInfo setUlMinPinLen(int ulMinPinLen) {
    this.ulMinPinLen = ulMinPinLen;
    setUlMinPinLenIsSet(true);
    return this;
  }

  public void unsetUlMinPinLen() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULMINPINLEN_ISSET_ID);
  }

  /** Returns true if field ulMinPinLen is set (has been assigned a value) and false otherwise */
  public boolean isSetUlMinPinLen() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULMINPINLEN_ISSET_ID);
  }

  public void setUlMinPinLenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULMINPINLEN_ISSET_ID, value);
  }

  public int getUlTotalPublicMemory() {
    return this.ulTotalPublicMemory;
  }

  public TokenInfo setUlTotalPublicMemory(int ulTotalPublicMemory) {
    this.ulTotalPublicMemory = ulTotalPublicMemory;
    setUlTotalPublicMemoryIsSet(true);
    return this;
  }

  public void unsetUlTotalPublicMemory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULTOTALPUBLICMEMORY_ISSET_ID);
  }

  /** Returns true if field ulTotalPublicMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetUlTotalPublicMemory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULTOTALPUBLICMEMORY_ISSET_ID);
  }

  public void setUlTotalPublicMemoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULTOTALPUBLICMEMORY_ISSET_ID, value);
  }

  public int getUlFreePublicMemory() {
    return this.ulFreePublicMemory;
  }

  public TokenInfo setUlFreePublicMemory(int ulFreePublicMemory) {
    this.ulFreePublicMemory = ulFreePublicMemory;
    setUlFreePublicMemoryIsSet(true);
    return this;
  }

  public void unsetUlFreePublicMemory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULFREEPUBLICMEMORY_ISSET_ID);
  }

  /** Returns true if field ulFreePublicMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetUlFreePublicMemory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULFREEPUBLICMEMORY_ISSET_ID);
  }

  public void setUlFreePublicMemoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULFREEPUBLICMEMORY_ISSET_ID, value);
  }

  public int getUlTotalPrivateMemory() {
    return this.ulTotalPrivateMemory;
  }

  public TokenInfo setUlTotalPrivateMemory(int ulTotalPrivateMemory) {
    this.ulTotalPrivateMemory = ulTotalPrivateMemory;
    setUlTotalPrivateMemoryIsSet(true);
    return this;
  }

  public void unsetUlTotalPrivateMemory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULTOTALPRIVATEMEMORY_ISSET_ID);
  }

  /** Returns true if field ulTotalPrivateMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetUlTotalPrivateMemory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULTOTALPRIVATEMEMORY_ISSET_ID);
  }

  public void setUlTotalPrivateMemoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULTOTALPRIVATEMEMORY_ISSET_ID, value);
  }

  public int getUlFreePrivateMemory() {
    return this.ulFreePrivateMemory;
  }

  public TokenInfo setUlFreePrivateMemory(int ulFreePrivateMemory) {
    this.ulFreePrivateMemory = ulFreePrivateMemory;
    setUlFreePrivateMemoryIsSet(true);
    return this;
  }

  public void unsetUlFreePrivateMemory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ULFREEPRIVATEMEMORY_ISSET_ID);
  }

  /** Returns true if field ulFreePrivateMemory is set (has been assigned a value) and false otherwise */
  public boolean isSetUlFreePrivateMemory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ULFREEPRIVATEMEMORY_ISSET_ID);
  }

  public void setUlFreePrivateMemoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ULFREEPRIVATEMEMORY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Version getHardwareVersion() {
    return this.hardwareVersion;
  }

  public TokenInfo setHardwareVersion(@org.apache.thrift.annotation.Nullable Version hardwareVersion) {
    this.hardwareVersion = hardwareVersion;
    return this;
  }

  public void unsetHardwareVersion() {
    this.hardwareVersion = null;
  }

  /** Returns true if field hardwareVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetHardwareVersion() {
    return this.hardwareVersion != null;
  }

  public void setHardwareVersionIsSet(boolean value) {
    if (!value) {
      this.hardwareVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Version getFirmwareVersion() {
    return this.firmwareVersion;
  }

  public TokenInfo setFirmwareVersion(@org.apache.thrift.annotation.Nullable Version firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
    return this;
  }

  public void unsetFirmwareVersion() {
    this.firmwareVersion = null;
  }

  /** Returns true if field firmwareVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetFirmwareVersion() {
    return this.firmwareVersion != null;
  }

  public void setFirmwareVersionIsSet(boolean value) {
    if (!value) {
      this.firmwareVersion = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUtcTime() {
    return this.utcTime;
  }

  public TokenInfo setUtcTime(@org.apache.thrift.annotation.Nullable java.lang.String utcTime) {
    this.utcTime = utcTime;
    return this;
  }

  public void unsetUtcTime() {
    this.utcTime = null;
  }

  /** Returns true if field utcTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUtcTime() {
    return this.utcTime != null;
  }

  public void setUtcTimeIsSet(boolean value) {
    if (!value) {
      this.utcTime = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case MANUFACTURER_ID:
      if (value == null) {
        unsetManufacturerID();
      } else {
        setManufacturerID((java.lang.String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((java.lang.String)value);
      }
      break;

    case SERIAL_NUMBER:
      if (value == null) {
        unsetSerialNumber();
      } else {
        setSerialNumber((java.lang.String)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((java.lang.Integer)value);
      }
      break;

    case UL_MAX_SESSION_COUNT:
      if (value == null) {
        unsetUlMaxSessionCount();
      } else {
        setUlMaxSessionCount((java.lang.Integer)value);
      }
      break;

    case UL_SESSION_COUNT:
      if (value == null) {
        unsetUlSessionCount();
      } else {
        setUlSessionCount((java.lang.Integer)value);
      }
      break;

    case UL_MAX_RW_SESSION_COUNT:
      if (value == null) {
        unsetUlMaxRwSessionCount();
      } else {
        setUlMaxRwSessionCount((java.lang.Integer)value);
      }
      break;

    case UL_RW_SESSION_COUNT:
      if (value == null) {
        unsetUlRwSessionCount();
      } else {
        setUlRwSessionCount((java.lang.Integer)value);
      }
      break;

    case UL_MAX_PIN_LEN:
      if (value == null) {
        unsetUlMaxPinLen();
      } else {
        setUlMaxPinLen((java.lang.Integer)value);
      }
      break;

    case UL_MIN_PIN_LEN:
      if (value == null) {
        unsetUlMinPinLen();
      } else {
        setUlMinPinLen((java.lang.Integer)value);
      }
      break;

    case UL_TOTAL_PUBLIC_MEMORY:
      if (value == null) {
        unsetUlTotalPublicMemory();
      } else {
        setUlTotalPublicMemory((java.lang.Integer)value);
      }
      break;

    case UL_FREE_PUBLIC_MEMORY:
      if (value == null) {
        unsetUlFreePublicMemory();
      } else {
        setUlFreePublicMemory((java.lang.Integer)value);
      }
      break;

    case UL_TOTAL_PRIVATE_MEMORY:
      if (value == null) {
        unsetUlTotalPrivateMemory();
      } else {
        setUlTotalPrivateMemory((java.lang.Integer)value);
      }
      break;

    case UL_FREE_PRIVATE_MEMORY:
      if (value == null) {
        unsetUlFreePrivateMemory();
      } else {
        setUlFreePrivateMemory((java.lang.Integer)value);
      }
      break;

    case HARDWARE_VERSION:
      if (value == null) {
        unsetHardwareVersion();
      } else {
        setHardwareVersion((Version)value);
      }
      break;

    case FIRMWARE_VERSION:
      if (value == null) {
        unsetFirmwareVersion();
      } else {
        setFirmwareVersion((Version)value);
      }
      break;

    case UTC_TIME:
      if (value == null) {
        unsetUtcTime();
      } else {
        setUtcTime((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LABEL:
      return getLabel();

    case MANUFACTURER_ID:
      return getManufacturerID();

    case MODEL:
      return getModel();

    case SERIAL_NUMBER:
      return getSerialNumber();

    case FLAGS:
      return getFlags();

    case UL_MAX_SESSION_COUNT:
      return getUlMaxSessionCount();

    case UL_SESSION_COUNT:
      return getUlSessionCount();

    case UL_MAX_RW_SESSION_COUNT:
      return getUlMaxRwSessionCount();

    case UL_RW_SESSION_COUNT:
      return getUlRwSessionCount();

    case UL_MAX_PIN_LEN:
      return getUlMaxPinLen();

    case UL_MIN_PIN_LEN:
      return getUlMinPinLen();

    case UL_TOTAL_PUBLIC_MEMORY:
      return getUlTotalPublicMemory();

    case UL_FREE_PUBLIC_MEMORY:
      return getUlFreePublicMemory();

    case UL_TOTAL_PRIVATE_MEMORY:
      return getUlTotalPrivateMemory();

    case UL_FREE_PRIVATE_MEMORY:
      return getUlFreePrivateMemory();

    case HARDWARE_VERSION:
      return getHardwareVersion();

    case FIRMWARE_VERSION:
      return getFirmwareVersion();

    case UTC_TIME:
      return getUtcTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LABEL:
      return isSetLabel();
    case MANUFACTURER_ID:
      return isSetManufacturerID();
    case MODEL:
      return isSetModel();
    case SERIAL_NUMBER:
      return isSetSerialNumber();
    case FLAGS:
      return isSetFlags();
    case UL_MAX_SESSION_COUNT:
      return isSetUlMaxSessionCount();
    case UL_SESSION_COUNT:
      return isSetUlSessionCount();
    case UL_MAX_RW_SESSION_COUNT:
      return isSetUlMaxRwSessionCount();
    case UL_RW_SESSION_COUNT:
      return isSetUlRwSessionCount();
    case UL_MAX_PIN_LEN:
      return isSetUlMaxPinLen();
    case UL_MIN_PIN_LEN:
      return isSetUlMinPinLen();
    case UL_TOTAL_PUBLIC_MEMORY:
      return isSetUlTotalPublicMemory();
    case UL_FREE_PUBLIC_MEMORY:
      return isSetUlFreePublicMemory();
    case UL_TOTAL_PRIVATE_MEMORY:
      return isSetUlTotalPrivateMemory();
    case UL_FREE_PRIVATE_MEMORY:
      return isSetUlFreePrivateMemory();
    case HARDWARE_VERSION:
      return isSetHardwareVersion();
    case FIRMWARE_VERSION:
      return isSetFirmwareVersion();
    case UTC_TIME:
      return isSetUtcTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TokenInfo)
      return this.equals((TokenInfo)that);
    return false;
  }

  public boolean equals(TokenInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_manufacturerID = true && this.isSetManufacturerID();
    boolean that_present_manufacturerID = true && that.isSetManufacturerID();
    if (this_present_manufacturerID || that_present_manufacturerID) {
      if (!(this_present_manufacturerID && that_present_manufacturerID))
        return false;
      if (!this.manufacturerID.equals(that.manufacturerID))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_serialNumber = true && this.isSetSerialNumber();
    boolean that_present_serialNumber = true && that.isSetSerialNumber();
    if (this_present_serialNumber || that_present_serialNumber) {
      if (!(this_present_serialNumber && that_present_serialNumber))
        return false;
      if (!this.serialNumber.equals(that.serialNumber))
        return false;
    }

    boolean this_present_flags = true;
    boolean that_present_flags = true;
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    boolean this_present_ulMaxSessionCount = true;
    boolean that_present_ulMaxSessionCount = true;
    if (this_present_ulMaxSessionCount || that_present_ulMaxSessionCount) {
      if (!(this_present_ulMaxSessionCount && that_present_ulMaxSessionCount))
        return false;
      if (this.ulMaxSessionCount != that.ulMaxSessionCount)
        return false;
    }

    boolean this_present_ulSessionCount = true;
    boolean that_present_ulSessionCount = true;
    if (this_present_ulSessionCount || that_present_ulSessionCount) {
      if (!(this_present_ulSessionCount && that_present_ulSessionCount))
        return false;
      if (this.ulSessionCount != that.ulSessionCount)
        return false;
    }

    boolean this_present_ulMaxRwSessionCount = true;
    boolean that_present_ulMaxRwSessionCount = true;
    if (this_present_ulMaxRwSessionCount || that_present_ulMaxRwSessionCount) {
      if (!(this_present_ulMaxRwSessionCount && that_present_ulMaxRwSessionCount))
        return false;
      if (this.ulMaxRwSessionCount != that.ulMaxRwSessionCount)
        return false;
    }

    boolean this_present_ulRwSessionCount = true;
    boolean that_present_ulRwSessionCount = true;
    if (this_present_ulRwSessionCount || that_present_ulRwSessionCount) {
      if (!(this_present_ulRwSessionCount && that_present_ulRwSessionCount))
        return false;
      if (this.ulRwSessionCount != that.ulRwSessionCount)
        return false;
    }

    boolean this_present_ulMaxPinLen = true;
    boolean that_present_ulMaxPinLen = true;
    if (this_present_ulMaxPinLen || that_present_ulMaxPinLen) {
      if (!(this_present_ulMaxPinLen && that_present_ulMaxPinLen))
        return false;
      if (this.ulMaxPinLen != that.ulMaxPinLen)
        return false;
    }

    boolean this_present_ulMinPinLen = true;
    boolean that_present_ulMinPinLen = true;
    if (this_present_ulMinPinLen || that_present_ulMinPinLen) {
      if (!(this_present_ulMinPinLen && that_present_ulMinPinLen))
        return false;
      if (this.ulMinPinLen != that.ulMinPinLen)
        return false;
    }

    boolean this_present_ulTotalPublicMemory = true;
    boolean that_present_ulTotalPublicMemory = true;
    if (this_present_ulTotalPublicMemory || that_present_ulTotalPublicMemory) {
      if (!(this_present_ulTotalPublicMemory && that_present_ulTotalPublicMemory))
        return false;
      if (this.ulTotalPublicMemory != that.ulTotalPublicMemory)
        return false;
    }

    boolean this_present_ulFreePublicMemory = true;
    boolean that_present_ulFreePublicMemory = true;
    if (this_present_ulFreePublicMemory || that_present_ulFreePublicMemory) {
      if (!(this_present_ulFreePublicMemory && that_present_ulFreePublicMemory))
        return false;
      if (this.ulFreePublicMemory != that.ulFreePublicMemory)
        return false;
    }

    boolean this_present_ulTotalPrivateMemory = true;
    boolean that_present_ulTotalPrivateMemory = true;
    if (this_present_ulTotalPrivateMemory || that_present_ulTotalPrivateMemory) {
      if (!(this_present_ulTotalPrivateMemory && that_present_ulTotalPrivateMemory))
        return false;
      if (this.ulTotalPrivateMemory != that.ulTotalPrivateMemory)
        return false;
    }

    boolean this_present_ulFreePrivateMemory = true;
    boolean that_present_ulFreePrivateMemory = true;
    if (this_present_ulFreePrivateMemory || that_present_ulFreePrivateMemory) {
      if (!(this_present_ulFreePrivateMemory && that_present_ulFreePrivateMemory))
        return false;
      if (this.ulFreePrivateMemory != that.ulFreePrivateMemory)
        return false;
    }

    boolean this_present_hardwareVersion = true && this.isSetHardwareVersion();
    boolean that_present_hardwareVersion = true && that.isSetHardwareVersion();
    if (this_present_hardwareVersion || that_present_hardwareVersion) {
      if (!(this_present_hardwareVersion && that_present_hardwareVersion))
        return false;
      if (!this.hardwareVersion.equals(that.hardwareVersion))
        return false;
    }

    boolean this_present_firmwareVersion = true && this.isSetFirmwareVersion();
    boolean that_present_firmwareVersion = true && that.isSetFirmwareVersion();
    if (this_present_firmwareVersion || that_present_firmwareVersion) {
      if (!(this_present_firmwareVersion && that_present_firmwareVersion))
        return false;
      if (!this.firmwareVersion.equals(that.firmwareVersion))
        return false;
    }

    boolean this_present_utcTime = true && this.isSetUtcTime();
    boolean that_present_utcTime = true && that.isSetUtcTime();
    if (this_present_utcTime || that_present_utcTime) {
      if (!(this_present_utcTime && that_present_utcTime))
        return false;
      if (!this.utcTime.equals(that.utcTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetManufacturerID()) ? 131071 : 524287);
    if (isSetManufacturerID())
      hashCode = hashCode * 8191 + manufacturerID.hashCode();

    hashCode = hashCode * 8191 + ((isSetModel()) ? 131071 : 524287);
    if (isSetModel())
      hashCode = hashCode * 8191 + model.hashCode();

    hashCode = hashCode * 8191 + ((isSetSerialNumber()) ? 131071 : 524287);
    if (isSetSerialNumber())
      hashCode = hashCode * 8191 + serialNumber.hashCode();

    hashCode = hashCode * 8191 + flags;

    hashCode = hashCode * 8191 + ulMaxSessionCount;

    hashCode = hashCode * 8191 + ulSessionCount;

    hashCode = hashCode * 8191 + ulMaxRwSessionCount;

    hashCode = hashCode * 8191 + ulRwSessionCount;

    hashCode = hashCode * 8191 + ulMaxPinLen;

    hashCode = hashCode * 8191 + ulMinPinLen;

    hashCode = hashCode * 8191 + ulTotalPublicMemory;

    hashCode = hashCode * 8191 + ulFreePublicMemory;

    hashCode = hashCode * 8191 + ulTotalPrivateMemory;

    hashCode = hashCode * 8191 + ulFreePrivateMemory;

    hashCode = hashCode * 8191 + ((isSetHardwareVersion()) ? 131071 : 524287);
    if (isSetHardwareVersion())
      hashCode = hashCode * 8191 + hardwareVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirmwareVersion()) ? 131071 : 524287);
    if (isSetFirmwareVersion())
      hashCode = hashCode * 8191 + firmwareVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetUtcTime()) ? 131071 : 524287);
    if (isSetUtcTime())
      hashCode = hashCode * 8191 + utcTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TokenInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetManufacturerID(), other.isSetManufacturerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufacturerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufacturerID, other.manufacturerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetModel(), other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSerialNumber(), other.isSetSerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlags(), other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlMaxSessionCount(), other.isSetUlMaxSessionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlMaxSessionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulMaxSessionCount, other.ulMaxSessionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlSessionCount(), other.isSetUlSessionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlSessionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulSessionCount, other.ulSessionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlMaxRwSessionCount(), other.isSetUlMaxRwSessionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlMaxRwSessionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulMaxRwSessionCount, other.ulMaxRwSessionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlRwSessionCount(), other.isSetUlRwSessionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlRwSessionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulRwSessionCount, other.ulRwSessionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlMaxPinLen(), other.isSetUlMaxPinLen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlMaxPinLen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulMaxPinLen, other.ulMaxPinLen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlMinPinLen(), other.isSetUlMinPinLen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlMinPinLen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulMinPinLen, other.ulMinPinLen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlTotalPublicMemory(), other.isSetUlTotalPublicMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlTotalPublicMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulTotalPublicMemory, other.ulTotalPublicMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlFreePublicMemory(), other.isSetUlFreePublicMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlFreePublicMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulFreePublicMemory, other.ulFreePublicMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlTotalPrivateMemory(), other.isSetUlTotalPrivateMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlTotalPrivateMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulTotalPrivateMemory, other.ulTotalPrivateMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUlFreePrivateMemory(), other.isSetUlFreePrivateMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUlFreePrivateMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ulFreePrivateMemory, other.ulFreePrivateMemory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHardwareVersion(), other.isSetHardwareVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHardwareVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hardwareVersion, other.hardwareVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFirmwareVersion(), other.isSetFirmwareVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirmwareVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firmwareVersion, other.firmwareVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUtcTime(), other.isSetUtcTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtcTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utcTime, other.utcTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TokenInfo(");
    boolean first = true;

    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("manufacturerID:");
    if (this.manufacturerID == null) {
      sb.append("null");
    } else {
      sb.append(this.manufacturerID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialNumber:");
    if (this.serialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.serialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flags:");
    sb.append(this.flags);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulMaxSessionCount:");
    sb.append(this.ulMaxSessionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulSessionCount:");
    sb.append(this.ulSessionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulMaxRwSessionCount:");
    sb.append(this.ulMaxRwSessionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulRwSessionCount:");
    sb.append(this.ulRwSessionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulMaxPinLen:");
    sb.append(this.ulMaxPinLen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulMinPinLen:");
    sb.append(this.ulMinPinLen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulTotalPublicMemory:");
    sb.append(this.ulTotalPublicMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulFreePublicMemory:");
    sb.append(this.ulFreePublicMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulTotalPrivateMemory:");
    sb.append(this.ulTotalPrivateMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ulFreePrivateMemory:");
    sb.append(this.ulFreePrivateMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hardwareVersion:");
    if (this.hardwareVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.hardwareVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firmwareVersion:");
    if (this.firmwareVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.firmwareVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("utcTime:");
    if (this.utcTime == null) {
      sb.append("null");
    } else {
      sb.append(this.utcTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hardwareVersion != null) {
      hardwareVersion.validate();
    }
    if (firmwareVersion != null) {
      firmwareVersion.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TokenInfoStandardScheme getScheme() {
      return new TokenInfoStandardScheme();
    }
  }

  private static class TokenInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TokenInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MANUFACTURER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.manufacturerID = iprot.readString();
              struct.setManufacturerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.model = iprot.readString();
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialNumber = iprot.readString();
              struct.setSerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flags = iprot.readI32();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UL_MAX_SESSION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulMaxSessionCount = iprot.readI32();
              struct.setUlMaxSessionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UL_SESSION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulSessionCount = iprot.readI32();
              struct.setUlSessionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UL_MAX_RW_SESSION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulMaxRwSessionCount = iprot.readI32();
              struct.setUlMaxRwSessionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UL_RW_SESSION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulRwSessionCount = iprot.readI32();
              struct.setUlRwSessionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UL_MAX_PIN_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulMaxPinLen = iprot.readI32();
              struct.setUlMaxPinLenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UL_MIN_PIN_LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulMinPinLen = iprot.readI32();
              struct.setUlMinPinLenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UL_TOTAL_PUBLIC_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulTotalPublicMemory = iprot.readI32();
              struct.setUlTotalPublicMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UL_FREE_PUBLIC_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulFreePublicMemory = iprot.readI32();
              struct.setUlFreePublicMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UL_TOTAL_PRIVATE_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulTotalPrivateMemory = iprot.readI32();
              struct.setUlTotalPrivateMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UL_FREE_PRIVATE_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ulFreePrivateMemory = iprot.readI32();
              struct.setUlFreePrivateMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HARDWARE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hardwareVersion = new Version();
              struct.hardwareVersion.read(iprot);
              struct.setHardwareVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FIRMWARE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.firmwareVersion = new Version();
              struct.firmwareVersion.read(iprot);
              struct.setFirmwareVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UTC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.utcTime = iprot.readString();
              struct.setUtcTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      if (struct.manufacturerID != null) {
        oprot.writeFieldBegin(MANUFACTURER_ID_FIELD_DESC);
        oprot.writeString(struct.manufacturerID);
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        oprot.writeString(struct.model);
        oprot.writeFieldEnd();
      }
      if (struct.serialNumber != null) {
        oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.serialNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(struct.flags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_MAX_SESSION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.ulMaxSessionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_SESSION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.ulSessionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_MAX_RW_SESSION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.ulMaxRwSessionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_RW_SESSION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.ulRwSessionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_MAX_PIN_LEN_FIELD_DESC);
      oprot.writeI32(struct.ulMaxPinLen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_MIN_PIN_LEN_FIELD_DESC);
      oprot.writeI32(struct.ulMinPinLen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_TOTAL_PUBLIC_MEMORY_FIELD_DESC);
      oprot.writeI32(struct.ulTotalPublicMemory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_FREE_PUBLIC_MEMORY_FIELD_DESC);
      oprot.writeI32(struct.ulFreePublicMemory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_TOTAL_PRIVATE_MEMORY_FIELD_DESC);
      oprot.writeI32(struct.ulTotalPrivateMemory);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UL_FREE_PRIVATE_MEMORY_FIELD_DESC);
      oprot.writeI32(struct.ulFreePrivateMemory);
      oprot.writeFieldEnd();
      if (struct.hardwareVersion != null) {
        oprot.writeFieldBegin(HARDWARE_VERSION_FIELD_DESC);
        struct.hardwareVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.firmwareVersion != null) {
        oprot.writeFieldBegin(FIRMWARE_VERSION_FIELD_DESC);
        struct.firmwareVersion.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.utcTime != null) {
        oprot.writeFieldBegin(UTC_TIME_FIELD_DESC);
        oprot.writeString(struct.utcTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TokenInfoTupleScheme getScheme() {
      return new TokenInfoTupleScheme();
    }
  }

  private static class TokenInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TokenInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLabel()) {
        optionals.set(0);
      }
      if (struct.isSetManufacturerID()) {
        optionals.set(1);
      }
      if (struct.isSetModel()) {
        optionals.set(2);
      }
      if (struct.isSetSerialNumber()) {
        optionals.set(3);
      }
      if (struct.isSetFlags()) {
        optionals.set(4);
      }
      if (struct.isSetUlMaxSessionCount()) {
        optionals.set(5);
      }
      if (struct.isSetUlSessionCount()) {
        optionals.set(6);
      }
      if (struct.isSetUlMaxRwSessionCount()) {
        optionals.set(7);
      }
      if (struct.isSetUlRwSessionCount()) {
        optionals.set(8);
      }
      if (struct.isSetUlMaxPinLen()) {
        optionals.set(9);
      }
      if (struct.isSetUlMinPinLen()) {
        optionals.set(10);
      }
      if (struct.isSetUlTotalPublicMemory()) {
        optionals.set(11);
      }
      if (struct.isSetUlFreePublicMemory()) {
        optionals.set(12);
      }
      if (struct.isSetUlTotalPrivateMemory()) {
        optionals.set(13);
      }
      if (struct.isSetUlFreePrivateMemory()) {
        optionals.set(14);
      }
      if (struct.isSetHardwareVersion()) {
        optionals.set(15);
      }
      if (struct.isSetFirmwareVersion()) {
        optionals.set(16);
      }
      if (struct.isSetUtcTime()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetManufacturerID()) {
        oprot.writeString(struct.manufacturerID);
      }
      if (struct.isSetModel()) {
        oprot.writeString(struct.model);
      }
      if (struct.isSetSerialNumber()) {
        oprot.writeString(struct.serialNumber);
      }
      if (struct.isSetFlags()) {
        oprot.writeI32(struct.flags);
      }
      if (struct.isSetUlMaxSessionCount()) {
        oprot.writeI32(struct.ulMaxSessionCount);
      }
      if (struct.isSetUlSessionCount()) {
        oprot.writeI32(struct.ulSessionCount);
      }
      if (struct.isSetUlMaxRwSessionCount()) {
        oprot.writeI32(struct.ulMaxRwSessionCount);
      }
      if (struct.isSetUlRwSessionCount()) {
        oprot.writeI32(struct.ulRwSessionCount);
      }
      if (struct.isSetUlMaxPinLen()) {
        oprot.writeI32(struct.ulMaxPinLen);
      }
      if (struct.isSetUlMinPinLen()) {
        oprot.writeI32(struct.ulMinPinLen);
      }
      if (struct.isSetUlTotalPublicMemory()) {
        oprot.writeI32(struct.ulTotalPublicMemory);
      }
      if (struct.isSetUlFreePublicMemory()) {
        oprot.writeI32(struct.ulFreePublicMemory);
      }
      if (struct.isSetUlTotalPrivateMemory()) {
        oprot.writeI32(struct.ulTotalPrivateMemory);
      }
      if (struct.isSetUlFreePrivateMemory()) {
        oprot.writeI32(struct.ulFreePrivateMemory);
      }
      if (struct.isSetHardwareVersion()) {
        struct.hardwareVersion.write(oprot);
      }
      if (struct.isSetFirmwareVersion()) {
        struct.firmwareVersion.write(oprot);
      }
      if (struct.isSetUtcTime()) {
        oprot.writeString(struct.utcTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.manufacturerID = iprot.readString();
        struct.setManufacturerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.model = iprot.readString();
        struct.setModelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serialNumber = iprot.readString();
        struct.setSerialNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.flags = iprot.readI32();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ulMaxSessionCount = iprot.readI32();
        struct.setUlMaxSessionCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ulSessionCount = iprot.readI32();
        struct.setUlSessionCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ulMaxRwSessionCount = iprot.readI32();
        struct.setUlMaxRwSessionCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ulRwSessionCount = iprot.readI32();
        struct.setUlRwSessionCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ulMaxPinLen = iprot.readI32();
        struct.setUlMaxPinLenIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ulMinPinLen = iprot.readI32();
        struct.setUlMinPinLenIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ulTotalPublicMemory = iprot.readI32();
        struct.setUlTotalPublicMemoryIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ulFreePublicMemory = iprot.readI32();
        struct.setUlFreePublicMemoryIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ulTotalPrivateMemory = iprot.readI32();
        struct.setUlTotalPrivateMemoryIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ulFreePrivateMemory = iprot.readI32();
        struct.setUlFreePrivateMemoryIsSet(true);
      }
      if (incoming.get(15)) {
        struct.hardwareVersion = new Version();
        struct.hardwareVersion.read(iprot);
        struct.setHardwareVersionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.firmwareVersion = new Version();
        struct.firmwareVersion.read(iprot);
        struct.setFirmwareVersionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.utcTime = iprot.readString();
        struct.setUtcTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

