/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class SymParam implements org.apache.thrift.TBase<SymParam, SymParam._Fields>, java.io.Serializable, Cloneable, Comparable<SymParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SymParam");

  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IV_FIELD_DESC = new org.apache.thrift.protocol.TField("iv", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PADDING_FIELD_DESC = new org.apache.thrift.protocol.TField("padding", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField AAD_FIELD_DESC = new org.apache.thrift.protocol.TField("aad", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TAGBITS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagbits", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SymParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SymParamTupleSchemeFactory();

  /**
   * 
   * @see EncMode
   */
  public @org.apache.thrift.annotation.Nullable EncMode mode; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer iv; // required
  /**
   * 
   * @see Padding
   */
  public @org.apache.thrift.annotation.Nullable Padding padding; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer aad; // required
  public int tagbits; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see EncMode
     */
    MODE((short)1, "mode"),
    IV((short)2, "iv"),
    /**
     * 
     * @see Padding
     */
    PADDING((short)3, "padding"),
    AAD((short)4, "aad"),
    TAGBITS((short)5, "tagbits");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODE
          return MODE;
        case 2: // IV
          return IV;
        case 3: // PADDING
          return PADDING;
        case 4: // AAD
          return AAD;
        case 5: // TAGBITS
          return TAGBITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TAGBITS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EncMode.class)));
    tmpMap.put(_Fields.IV, new org.apache.thrift.meta_data.FieldMetaData("iv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PADDING, new org.apache.thrift.meta_data.FieldMetaData("padding", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Padding.class)));
    tmpMap.put(_Fields.AAD, new org.apache.thrift.meta_data.FieldMetaData("aad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TAGBITS, new org.apache.thrift.meta_data.FieldMetaData("tagbits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SymParam.class, metaDataMap);
  }

  public SymParam() {
    this.padding = kl.hsm.server.svc.base.Padding.PKCS7Padding;

  }

  public SymParam(
    EncMode mode,
    java.nio.ByteBuffer iv,
    Padding padding,
    java.nio.ByteBuffer aad,
    int tagbits)
  {
    this();
    this.mode = mode;
    this.iv = org.apache.thrift.TBaseHelper.copyBinary(iv);
    this.padding = padding;
    this.aad = org.apache.thrift.TBaseHelper.copyBinary(aad);
    this.tagbits = tagbits;
    setTagbitsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SymParam(SymParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMode()) {
      this.mode = other.mode;
    }
    if (other.isSetIv()) {
      this.iv = org.apache.thrift.TBaseHelper.copyBinary(other.iv);
    }
    if (other.isSetPadding()) {
      this.padding = other.padding;
    }
    if (other.isSetAad()) {
      this.aad = org.apache.thrift.TBaseHelper.copyBinary(other.aad);
    }
    this.tagbits = other.tagbits;
  }

  @Override
  public SymParam deepCopy() {
    return new SymParam(this);
  }

  @Override
  public void clear() {
    this.mode = null;
    this.iv = null;
    this.padding = kl.hsm.server.svc.base.Padding.PKCS7Padding;

    this.aad = null;
    setTagbitsIsSet(false);
    this.tagbits = 0;
  }

  /**
   * 
   * @see EncMode
   */
  @org.apache.thrift.annotation.Nullable
  public EncMode getMode() {
    return this.mode;
  }

  /**
   * 
   * @see EncMode
   */
  public SymParam setMode(@org.apache.thrift.annotation.Nullable EncMode mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    this.mode = null;
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return this.mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      this.mode = null;
    }
  }

  public byte[] getIv() {
    setIv(org.apache.thrift.TBaseHelper.rightSize(iv));
    return iv == null ? null : iv.array();
  }

  public java.nio.ByteBuffer bufferForIv() {
    return org.apache.thrift.TBaseHelper.copyBinary(iv);
  }

  public SymParam setIv(byte[] iv) {
    this.iv = iv == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(iv.clone());
    return this;
  }

  public SymParam setIv(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer iv) {
    this.iv = org.apache.thrift.TBaseHelper.copyBinary(iv);
    return this;
  }

  public void unsetIv() {
    this.iv = null;
  }

  /** Returns true if field iv is set (has been assigned a value) and false otherwise */
  public boolean isSetIv() {
    return this.iv != null;
  }

  public void setIvIsSet(boolean value) {
    if (!value) {
      this.iv = null;
    }
  }

  /**
   * 
   * @see Padding
   */
  @org.apache.thrift.annotation.Nullable
  public Padding getPadding() {
    return this.padding;
  }

  /**
   * 
   * @see Padding
   */
  public SymParam setPadding(@org.apache.thrift.annotation.Nullable Padding padding) {
    this.padding = padding;
    return this;
  }

  public void unsetPadding() {
    this.padding = null;
  }

  /** Returns true if field padding is set (has been assigned a value) and false otherwise */
  public boolean isSetPadding() {
    return this.padding != null;
  }

  public void setPaddingIsSet(boolean value) {
    if (!value) {
      this.padding = null;
    }
  }

  public byte[] getAad() {
    setAad(org.apache.thrift.TBaseHelper.rightSize(aad));
    return aad == null ? null : aad.array();
  }

  public java.nio.ByteBuffer bufferForAad() {
    return org.apache.thrift.TBaseHelper.copyBinary(aad);
  }

  public SymParam setAad(byte[] aad) {
    this.aad = aad == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(aad.clone());
    return this;
  }

  public SymParam setAad(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer aad) {
    this.aad = org.apache.thrift.TBaseHelper.copyBinary(aad);
    return this;
  }

  public void unsetAad() {
    this.aad = null;
  }

  /** Returns true if field aad is set (has been assigned a value) and false otherwise */
  public boolean isSetAad() {
    return this.aad != null;
  }

  public void setAadIsSet(boolean value) {
    if (!value) {
      this.aad = null;
    }
  }

  public int getTagbits() {
    return this.tagbits;
  }

  public SymParam setTagbits(int tagbits) {
    this.tagbits = tagbits;
    setTagbitsIsSet(true);
    return this;
  }

  public void unsetTagbits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TAGBITS_ISSET_ID);
  }

  /** Returns true if field tagbits is set (has been assigned a value) and false otherwise */
  public boolean isSetTagbits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TAGBITS_ISSET_ID);
  }

  public void setTagbitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TAGBITS_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((EncMode)value);
      }
      break;

    case IV:
      if (value == null) {
        unsetIv();
      } else {
        if (value instanceof byte[]) {
          setIv((byte[])value);
        } else {
          setIv((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PADDING:
      if (value == null) {
        unsetPadding();
      } else {
        setPadding((Padding)value);
      }
      break;

    case AAD:
      if (value == null) {
        unsetAad();
      } else {
        if (value instanceof byte[]) {
          setAad((byte[])value);
        } else {
          setAad((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TAGBITS:
      if (value == null) {
        unsetTagbits();
      } else {
        setTagbits((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MODE:
      return getMode();

    case IV:
      return getIv();

    case PADDING:
      return getPadding();

    case AAD:
      return getAad();

    case TAGBITS:
      return getTagbits();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MODE:
      return isSetMode();
    case IV:
      return isSetIv();
    case PADDING:
      return isSetPadding();
    case AAD:
      return isSetAad();
    case TAGBITS:
      return isSetTagbits();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SymParam)
      return this.equals((SymParam)that);
    return false;
  }

  public boolean equals(SymParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (!this.mode.equals(that.mode))
        return false;
    }

    boolean this_present_iv = true && this.isSetIv();
    boolean that_present_iv = true && that.isSetIv();
    if (this_present_iv || that_present_iv) {
      if (!(this_present_iv && that_present_iv))
        return false;
      if (!this.iv.equals(that.iv))
        return false;
    }

    boolean this_present_padding = true && this.isSetPadding();
    boolean that_present_padding = true && that.isSetPadding();
    if (this_present_padding || that_present_padding) {
      if (!(this_present_padding && that_present_padding))
        return false;
      if (!this.padding.equals(that.padding))
        return false;
    }

    boolean this_present_aad = true && this.isSetAad();
    boolean that_present_aad = true && that.isSetAad();
    if (this_present_aad || that_present_aad) {
      if (!(this_present_aad && that_present_aad))
        return false;
      if (!this.aad.equals(that.aad))
        return false;
    }

    boolean this_present_tagbits = true;
    boolean that_present_tagbits = true;
    if (this_present_tagbits || that_present_tagbits) {
      if (!(this_present_tagbits && that_present_tagbits))
        return false;
      if (this.tagbits != that.tagbits)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMode()) ? 131071 : 524287);
    if (isSetMode())
      hashCode = hashCode * 8191 + mode.getValue();

    hashCode = hashCode * 8191 + ((isSetIv()) ? 131071 : 524287);
    if (isSetIv())
      hashCode = hashCode * 8191 + iv.hashCode();

    hashCode = hashCode * 8191 + ((isSetPadding()) ? 131071 : 524287);
    if (isSetPadding())
      hashCode = hashCode * 8191 + padding.getValue();

    hashCode = hashCode * 8191 + ((isSetAad()) ? 131071 : 524287);
    if (isSetAad())
      hashCode = hashCode * 8191 + aad.hashCode();

    hashCode = hashCode * 8191 + tagbits;

    return hashCode;
  }

  @Override
  public int compareTo(SymParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetMode(), other.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, other.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIv(), other.isSetIv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iv, other.iv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPadding(), other.isSetPadding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPadding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.padding, other.padding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAad(), other.isSetAad());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAad()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aad, other.aad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTagbits(), other.isSetTagbits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagbits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagbits, other.tagbits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SymParam(");
    boolean first = true;

    sb.append("mode:");
    if (this.mode == null) {
      sb.append("null");
    } else {
      sb.append(this.mode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iv:");
    if (this.iv == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.iv, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("padding:");
    if (this.padding == null) {
      sb.append("null");
    } else {
      sb.append(this.padding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aad:");
    if (this.aad == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.aad, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagbits:");
    sb.append(this.tagbits);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SymParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SymParamStandardScheme getScheme() {
      return new SymParamStandardScheme();
    }
  }

  private static class SymParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<SymParam> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SymParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mode = kl.hsm.server.svc.base.EncMode.findByValue(iprot.readI32());
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iv = iprot.readBinary();
              struct.setIvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PADDING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.padding = kl.hsm.server.svc.base.Padding.findByValue(iprot.readI32());
              struct.setPaddingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aad = iprot.readBinary();
              struct.setAadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TAGBITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tagbits = iprot.readI32();
              struct.setTagbitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SymParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mode != null) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI32(struct.mode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.iv != null) {
        oprot.writeFieldBegin(IV_FIELD_DESC);
        oprot.writeBinary(struct.iv);
        oprot.writeFieldEnd();
      }
      if (struct.padding != null) {
        oprot.writeFieldBegin(PADDING_FIELD_DESC);
        oprot.writeI32(struct.padding.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.aad != null) {
        oprot.writeFieldBegin(AAD_FIELD_DESC);
        oprot.writeBinary(struct.aad);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TAGBITS_FIELD_DESC);
      oprot.writeI32(struct.tagbits);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SymParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SymParamTupleScheme getScheme() {
      return new SymParamTupleScheme();
    }
  }

  private static class SymParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<SymParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SymParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMode()) {
        optionals.set(0);
      }
      if (struct.isSetIv()) {
        optionals.set(1);
      }
      if (struct.isSetPadding()) {
        optionals.set(2);
      }
      if (struct.isSetAad()) {
        optionals.set(3);
      }
      if (struct.isSetTagbits()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMode()) {
        oprot.writeI32(struct.mode.getValue());
      }
      if (struct.isSetIv()) {
        oprot.writeBinary(struct.iv);
      }
      if (struct.isSetPadding()) {
        oprot.writeI32(struct.padding.getValue());
      }
      if (struct.isSetAad()) {
        oprot.writeBinary(struct.aad);
      }
      if (struct.isSetTagbits()) {
        oprot.writeI32(struct.tagbits);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SymParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.mode = kl.hsm.server.svc.base.EncMode.findByValue(iprot.readI32());
        struct.setModeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.iv = iprot.readBinary();
        struct.setIvIsSet(true);
      }
      if (incoming.get(2)) {
        struct.padding = kl.hsm.server.svc.base.Padding.findByValue(iprot.readI32());
        struct.setPaddingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.aad = iprot.readBinary();
        struct.setAadIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tagbits = iprot.readI32();
        struct.setTagbitsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

