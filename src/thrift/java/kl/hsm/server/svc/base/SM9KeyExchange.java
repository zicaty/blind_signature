/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class SM9KeyExchange implements org.apache.thrift.TBase<SM9KeyExchange, SM9KeyExchange._Fields>, java.io.Serializable, Cloneable, Comparable<SM9KeyExchange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SM9KeyExchange");

  private static final org.apache.thrift.protocol.TField S_KEY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sKeyHandle", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SP_TMP_PUB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("spTmpPubKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HASH_SA_FIELD_DESC = new org.apache.thrift.protocol.TField("hashSA", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HASH_SB_FIELD_DESC = new org.apache.thrift.protocol.TField("hashSB", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SM9KeyExchangeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SM9KeyExchangeTupleSchemeFactory();

  public int sKeyHandle; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer spTmpPubKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hashSA; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hashSB; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    S_KEY_HANDLE((short)1, "sKeyHandle"),
    SP_TMP_PUB_KEY((short)2, "spTmpPubKey"),
    HASH_SA((short)3, "hashSA"),
    HASH_SB((short)4, "hashSB");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // S_KEY_HANDLE
          return S_KEY_HANDLE;
        case 2: // SP_TMP_PUB_KEY
          return SP_TMP_PUB_KEY;
        case 3: // HASH_SA
          return HASH_SA;
        case 4: // HASH_SB
          return HASH_SB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SKEYHANDLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.S_KEY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("sKeyHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SP_TMP_PUB_KEY, new org.apache.thrift.meta_data.FieldMetaData("spTmpPubKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.HASH_SA, new org.apache.thrift.meta_data.FieldMetaData("hashSA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.HASH_SB, new org.apache.thrift.meta_data.FieldMetaData("hashSB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SM9KeyExchange.class, metaDataMap);
  }

  public SM9KeyExchange() {
  }

  public SM9KeyExchange(
    int sKeyHandle,
    java.nio.ByteBuffer spTmpPubKey,
    java.nio.ByteBuffer hashSA,
    java.nio.ByteBuffer hashSB)
  {
    this();
    this.sKeyHandle = sKeyHandle;
    setSKeyHandleIsSet(true);
    this.spTmpPubKey = org.apache.thrift.TBaseHelper.copyBinary(spTmpPubKey);
    this.hashSA = org.apache.thrift.TBaseHelper.copyBinary(hashSA);
    this.hashSB = org.apache.thrift.TBaseHelper.copyBinary(hashSB);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SM9KeyExchange(SM9KeyExchange other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sKeyHandle = other.sKeyHandle;
    if (other.isSetSpTmpPubKey()) {
      this.spTmpPubKey = org.apache.thrift.TBaseHelper.copyBinary(other.spTmpPubKey);
    }
    if (other.isSetHashSA()) {
      this.hashSA = org.apache.thrift.TBaseHelper.copyBinary(other.hashSA);
    }
    if (other.isSetHashSB()) {
      this.hashSB = org.apache.thrift.TBaseHelper.copyBinary(other.hashSB);
    }
  }

  @Override
  public SM9KeyExchange deepCopy() {
    return new SM9KeyExchange(this);
  }

  @Override
  public void clear() {
    setSKeyHandleIsSet(false);
    this.sKeyHandle = 0;
    this.spTmpPubKey = null;
    this.hashSA = null;
    this.hashSB = null;
  }

  public int getSKeyHandle() {
    return this.sKeyHandle;
  }

  public SM9KeyExchange setSKeyHandle(int sKeyHandle) {
    this.sKeyHandle = sKeyHandle;
    setSKeyHandleIsSet(true);
    return this;
  }

  public void unsetSKeyHandle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKEYHANDLE_ISSET_ID);
  }

  /** Returns true if field sKeyHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetSKeyHandle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKEYHANDLE_ISSET_ID);
  }

  public void setSKeyHandleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKEYHANDLE_ISSET_ID, value);
  }

  public byte[] getSpTmpPubKey() {
    setSpTmpPubKey(org.apache.thrift.TBaseHelper.rightSize(spTmpPubKey));
    return spTmpPubKey == null ? null : spTmpPubKey.array();
  }

  public java.nio.ByteBuffer bufferForSpTmpPubKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(spTmpPubKey);
  }

  public SM9KeyExchange setSpTmpPubKey(byte[] spTmpPubKey) {
    this.spTmpPubKey = spTmpPubKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(spTmpPubKey.clone());
    return this;
  }

  public SM9KeyExchange setSpTmpPubKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer spTmpPubKey) {
    this.spTmpPubKey = org.apache.thrift.TBaseHelper.copyBinary(spTmpPubKey);
    return this;
  }

  public void unsetSpTmpPubKey() {
    this.spTmpPubKey = null;
  }

  /** Returns true if field spTmpPubKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSpTmpPubKey() {
    return this.spTmpPubKey != null;
  }

  public void setSpTmpPubKeyIsSet(boolean value) {
    if (!value) {
      this.spTmpPubKey = null;
    }
  }

  public byte[] getHashSA() {
    setHashSA(org.apache.thrift.TBaseHelper.rightSize(hashSA));
    return hashSA == null ? null : hashSA.array();
  }

  public java.nio.ByteBuffer bufferForHashSA() {
    return org.apache.thrift.TBaseHelper.copyBinary(hashSA);
  }

  public SM9KeyExchange setHashSA(byte[] hashSA) {
    this.hashSA = hashSA == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(hashSA.clone());
    return this;
  }

  public SM9KeyExchange setHashSA(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hashSA) {
    this.hashSA = org.apache.thrift.TBaseHelper.copyBinary(hashSA);
    return this;
  }

  public void unsetHashSA() {
    this.hashSA = null;
  }

  /** Returns true if field hashSA is set (has been assigned a value) and false otherwise */
  public boolean isSetHashSA() {
    return this.hashSA != null;
  }

  public void setHashSAIsSet(boolean value) {
    if (!value) {
      this.hashSA = null;
    }
  }

  public byte[] getHashSB() {
    setHashSB(org.apache.thrift.TBaseHelper.rightSize(hashSB));
    return hashSB == null ? null : hashSB.array();
  }

  public java.nio.ByteBuffer bufferForHashSB() {
    return org.apache.thrift.TBaseHelper.copyBinary(hashSB);
  }

  public SM9KeyExchange setHashSB(byte[] hashSB) {
    this.hashSB = hashSB == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(hashSB.clone());
    return this;
  }

  public SM9KeyExchange setHashSB(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hashSB) {
    this.hashSB = org.apache.thrift.TBaseHelper.copyBinary(hashSB);
    return this;
  }

  public void unsetHashSB() {
    this.hashSB = null;
  }

  /** Returns true if field hashSB is set (has been assigned a value) and false otherwise */
  public boolean isSetHashSB() {
    return this.hashSB != null;
  }

  public void setHashSBIsSet(boolean value) {
    if (!value) {
      this.hashSB = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case S_KEY_HANDLE:
      if (value == null) {
        unsetSKeyHandle();
      } else {
        setSKeyHandle((java.lang.Integer)value);
      }
      break;

    case SP_TMP_PUB_KEY:
      if (value == null) {
        unsetSpTmpPubKey();
      } else {
        if (value instanceof byte[]) {
          setSpTmpPubKey((byte[])value);
        } else {
          setSpTmpPubKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case HASH_SA:
      if (value == null) {
        unsetHashSA();
      } else {
        if (value instanceof byte[]) {
          setHashSA((byte[])value);
        } else {
          setHashSA((java.nio.ByteBuffer)value);
        }
      }
      break;

    case HASH_SB:
      if (value == null) {
        unsetHashSB();
      } else {
        if (value instanceof byte[]) {
          setHashSB((byte[])value);
        } else {
          setHashSB((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case S_KEY_HANDLE:
      return getSKeyHandle();

    case SP_TMP_PUB_KEY:
      return getSpTmpPubKey();

    case HASH_SA:
      return getHashSA();

    case HASH_SB:
      return getHashSB();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case S_KEY_HANDLE:
      return isSetSKeyHandle();
    case SP_TMP_PUB_KEY:
      return isSetSpTmpPubKey();
    case HASH_SA:
      return isSetHashSA();
    case HASH_SB:
      return isSetHashSB();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SM9KeyExchange)
      return this.equals((SM9KeyExchange)that);
    return false;
  }

  public boolean equals(SM9KeyExchange that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sKeyHandle = true;
    boolean that_present_sKeyHandle = true;
    if (this_present_sKeyHandle || that_present_sKeyHandle) {
      if (!(this_present_sKeyHandle && that_present_sKeyHandle))
        return false;
      if (this.sKeyHandle != that.sKeyHandle)
        return false;
    }

    boolean this_present_spTmpPubKey = true && this.isSetSpTmpPubKey();
    boolean that_present_spTmpPubKey = true && that.isSetSpTmpPubKey();
    if (this_present_spTmpPubKey || that_present_spTmpPubKey) {
      if (!(this_present_spTmpPubKey && that_present_spTmpPubKey))
        return false;
      if (!this.spTmpPubKey.equals(that.spTmpPubKey))
        return false;
    }

    boolean this_present_hashSA = true && this.isSetHashSA();
    boolean that_present_hashSA = true && that.isSetHashSA();
    if (this_present_hashSA || that_present_hashSA) {
      if (!(this_present_hashSA && that_present_hashSA))
        return false;
      if (!this.hashSA.equals(that.hashSA))
        return false;
    }

    boolean this_present_hashSB = true && this.isSetHashSB();
    boolean that_present_hashSB = true && that.isSetHashSB();
    if (this_present_hashSB || that_present_hashSB) {
      if (!(this_present_hashSB && that_present_hashSB))
        return false;
      if (!this.hashSB.equals(that.hashSB))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + sKeyHandle;

    hashCode = hashCode * 8191 + ((isSetSpTmpPubKey()) ? 131071 : 524287);
    if (isSetSpTmpPubKey())
      hashCode = hashCode * 8191 + spTmpPubKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetHashSA()) ? 131071 : 524287);
    if (isSetHashSA())
      hashCode = hashCode * 8191 + hashSA.hashCode();

    hashCode = hashCode * 8191 + ((isSetHashSB()) ? 131071 : 524287);
    if (isSetHashSB())
      hashCode = hashCode * 8191 + hashSB.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SM9KeyExchange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSKeyHandle(), other.isSetSKeyHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSKeyHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sKeyHandle, other.sKeyHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpTmpPubKey(), other.isSetSpTmpPubKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpTmpPubKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spTmpPubKey, other.spTmpPubKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHashSA(), other.isSetHashSA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashSA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashSA, other.hashSA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHashSB(), other.isSetHashSB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashSB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashSB, other.hashSB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SM9KeyExchange(");
    boolean first = true;

    sb.append("sKeyHandle:");
    sb.append(this.sKeyHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spTmpPubKey:");
    if (this.spTmpPubKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.spTmpPubKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hashSA:");
    if (this.hashSA == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.hashSA, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hashSB:");
    if (this.hashSB == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.hashSB, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SM9KeyExchangeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SM9KeyExchangeStandardScheme getScheme() {
      return new SM9KeyExchangeStandardScheme();
    }
  }

  private static class SM9KeyExchangeStandardScheme extends org.apache.thrift.scheme.StandardScheme<SM9KeyExchange> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SM9KeyExchange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // S_KEY_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sKeyHandle = iprot.readI32();
              struct.setSKeyHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SP_TMP_PUB_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spTmpPubKey = iprot.readBinary();
              struct.setSpTmpPubKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HASH_SA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hashSA = iprot.readBinary();
              struct.setHashSAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HASH_SB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hashSB = iprot.readBinary();
              struct.setHashSBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SM9KeyExchange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(S_KEY_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.sKeyHandle);
      oprot.writeFieldEnd();
      if (struct.spTmpPubKey != null) {
        oprot.writeFieldBegin(SP_TMP_PUB_KEY_FIELD_DESC);
        oprot.writeBinary(struct.spTmpPubKey);
        oprot.writeFieldEnd();
      }
      if (struct.hashSA != null) {
        oprot.writeFieldBegin(HASH_SA_FIELD_DESC);
        oprot.writeBinary(struct.hashSA);
        oprot.writeFieldEnd();
      }
      if (struct.hashSB != null) {
        oprot.writeFieldBegin(HASH_SB_FIELD_DESC);
        oprot.writeBinary(struct.hashSB);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SM9KeyExchangeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SM9KeyExchangeTupleScheme getScheme() {
      return new SM9KeyExchangeTupleScheme();
    }
  }

  private static class SM9KeyExchangeTupleScheme extends org.apache.thrift.scheme.TupleScheme<SM9KeyExchange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SM9KeyExchange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSKeyHandle()) {
        optionals.set(0);
      }
      if (struct.isSetSpTmpPubKey()) {
        optionals.set(1);
      }
      if (struct.isSetHashSA()) {
        optionals.set(2);
      }
      if (struct.isSetHashSB()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSKeyHandle()) {
        oprot.writeI32(struct.sKeyHandle);
      }
      if (struct.isSetSpTmpPubKey()) {
        oprot.writeBinary(struct.spTmpPubKey);
      }
      if (struct.isSetHashSA()) {
        oprot.writeBinary(struct.hashSA);
      }
      if (struct.isSetHashSB()) {
        oprot.writeBinary(struct.hashSB);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SM9KeyExchange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sKeyHandle = iprot.readI32();
        struct.setSKeyHandleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spTmpPubKey = iprot.readBinary();
        struct.setSpTmpPubKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hashSA = iprot.readBinary();
        struct.setHashSAIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hashSB = iprot.readBinary();
        struct.setHashSBIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

