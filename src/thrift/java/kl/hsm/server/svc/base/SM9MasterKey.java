/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class SM9MasterKey implements org.apache.thrift.TBase<SM9MasterKey, SM9MasterKey._Fields>, java.io.Serializable, Cloneable, Comparable<SM9MasterKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SM9MasterKey");

  private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("sign", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ENC_FIELD_DESC = new org.apache.thrift.protocol.TField("enc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SM9MasterKeyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SM9MasterKeyTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable SM9SignMasterKeyPair sign; // required
  public @org.apache.thrift.annotation.Nullable SM9EncMasterKeyPair enc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIGN((short)1, "sign"),
    ENC((short)2, "enc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIGN
          return SIGN;
        case 2: // ENC
          return ENC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("sign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SM9SignMasterKeyPair.class)));
    tmpMap.put(_Fields.ENC, new org.apache.thrift.meta_data.FieldMetaData("enc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SM9EncMasterKeyPair.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SM9MasterKey.class, metaDataMap);
  }

  public SM9MasterKey() {
  }

  public SM9MasterKey(
    SM9SignMasterKeyPair sign,
    SM9EncMasterKeyPair enc)
  {
    this();
    this.sign = sign;
    this.enc = enc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SM9MasterKey(SM9MasterKey other) {
    if (other.isSetSign()) {
      this.sign = new SM9SignMasterKeyPair(other.sign);
    }
    if (other.isSetEnc()) {
      this.enc = new SM9EncMasterKeyPair(other.enc);
    }
  }

  @Override
  public SM9MasterKey deepCopy() {
    return new SM9MasterKey(this);
  }

  @Override
  public void clear() {
    this.sign = null;
    this.enc = null;
  }

  @org.apache.thrift.annotation.Nullable
  public SM9SignMasterKeyPair getSign() {
    return this.sign;
  }

  public SM9MasterKey setSign(@org.apache.thrift.annotation.Nullable SM9SignMasterKeyPair sign) {
    this.sign = sign;
    return this;
  }

  public void unsetSign() {
    this.sign = null;
  }

  /** Returns true if field sign is set (has been assigned a value) and false otherwise */
  public boolean isSetSign() {
    return this.sign != null;
  }

  public void setSignIsSet(boolean value) {
    if (!value) {
      this.sign = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public SM9EncMasterKeyPair getEnc() {
    return this.enc;
  }

  public SM9MasterKey setEnc(@org.apache.thrift.annotation.Nullable SM9EncMasterKeyPair enc) {
    this.enc = enc;
    return this;
  }

  public void unsetEnc() {
    this.enc = null;
  }

  /** Returns true if field enc is set (has been assigned a value) and false otherwise */
  public boolean isSetEnc() {
    return this.enc != null;
  }

  public void setEncIsSet(boolean value) {
    if (!value) {
      this.enc = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SIGN:
      if (value == null) {
        unsetSign();
      } else {
        setSign((SM9SignMasterKeyPair)value);
      }
      break;

    case ENC:
      if (value == null) {
        unsetEnc();
      } else {
        setEnc((SM9EncMasterKeyPair)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SIGN:
      return getSign();

    case ENC:
      return getEnc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SIGN:
      return isSetSign();
    case ENC:
      return isSetEnc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SM9MasterKey)
      return this.equals((SM9MasterKey)that);
    return false;
  }

  public boolean equals(SM9MasterKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sign = true && this.isSetSign();
    boolean that_present_sign = true && that.isSetSign();
    if (this_present_sign || that_present_sign) {
      if (!(this_present_sign && that_present_sign))
        return false;
      if (!this.sign.equals(that.sign))
        return false;
    }

    boolean this_present_enc = true && this.isSetEnc();
    boolean that_present_enc = true && that.isSetEnc();
    if (this_present_enc || that_present_enc) {
      if (!(this_present_enc && that_present_enc))
        return false;
      if (!this.enc.equals(that.enc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSign()) ? 131071 : 524287);
    if (isSetSign())
      hashCode = hashCode * 8191 + sign.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnc()) ? 131071 : 524287);
    if (isSetEnc())
      hashCode = hashCode * 8191 + enc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SM9MasterKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSign(), other.isSetSign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign, other.sign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnc(), other.isSetEnc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enc, other.enc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SM9MasterKey(");
    boolean first = true;

    sb.append("sign:");
    if (this.sign == null) {
      sb.append("null");
    } else {
      sb.append(this.sign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enc:");
    if (this.enc == null) {
      sb.append("null");
    } else {
      sb.append(this.enc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sign != null) {
      sign.validate();
    }
    if (enc != null) {
      enc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SM9MasterKeyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SM9MasterKeyStandardScheme getScheme() {
      return new SM9MasterKeyStandardScheme();
    }
  }

  private static class SM9MasterKeyStandardScheme extends org.apache.thrift.scheme.StandardScheme<SM9MasterKey> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SM9MasterKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sign = new SM9SignMasterKeyPair();
              struct.sign.read(iprot);
              struct.setSignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.enc = new SM9EncMasterKeyPair();
              struct.enc.read(iprot);
              struct.setEncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SM9MasterKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sign != null) {
        oprot.writeFieldBegin(SIGN_FIELD_DESC);
        struct.sign.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.enc != null) {
        oprot.writeFieldBegin(ENC_FIELD_DESC);
        struct.enc.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SM9MasterKeyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SM9MasterKeyTupleScheme getScheme() {
      return new SM9MasterKeyTupleScheme();
    }
  }

  private static class SM9MasterKeyTupleScheme extends org.apache.thrift.scheme.TupleScheme<SM9MasterKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SM9MasterKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSign()) {
        optionals.set(0);
      }
      if (struct.isSetEnc()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSign()) {
        struct.sign.write(oprot);
      }
      if (struct.isSetEnc()) {
        struct.enc.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SM9MasterKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.sign = new SM9SignMasterKeyPair();
        struct.sign.read(iprot);
        struct.setSignIsSet(true);
      }
      if (incoming.get(1)) {
        struct.enc = new SM9EncMasterKeyPair();
        struct.enc.read(iprot);
        struct.setEncIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

