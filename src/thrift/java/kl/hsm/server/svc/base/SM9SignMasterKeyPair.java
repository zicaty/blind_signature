/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class SM9SignMasterKeyPair implements org.apache.thrift.TBase<SM9SignMasterKeyPair, SM9SignMasterKeyPair._Fields>, java.io.Serializable, Cloneable, Comparable<SM9SignMasterKeyPair> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SM9SignMasterKeyPair");

  private static final org.apache.thrift.protocol.TField PRIVATE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("privateKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAIR_G_FIELD_DESC = new org.apache.thrift.protocol.TField("pairG", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SM9SignMasterKeyPairStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SM9SignMasterKeyPairTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer privateKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer publicKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer pairG; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIVATE_KEY((short)1, "privateKey"),
    PUBLIC_KEY((short)2, "publicKey"),
    PAIR_G((short)3, "pairG");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIVATE_KEY
          return PRIVATE_KEY;
        case 2: // PUBLIC_KEY
          return PUBLIC_KEY;
        case 3: // PAIR_G
          return PAIR_G;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIVATE_KEY, new org.apache.thrift.meta_data.FieldMetaData("privateKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PAIR_G, new org.apache.thrift.meta_data.FieldMetaData("pairG", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SM9SignMasterKeyPair.class, metaDataMap);
  }

  public SM9SignMasterKeyPair() {
  }

  public SM9SignMasterKeyPair(
    java.nio.ByteBuffer privateKey,
    java.nio.ByteBuffer publicKey,
    java.nio.ByteBuffer pairG)
  {
    this();
    this.privateKey = org.apache.thrift.TBaseHelper.copyBinary(privateKey);
    this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(publicKey);
    this.pairG = org.apache.thrift.TBaseHelper.copyBinary(pairG);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SM9SignMasterKeyPair(SM9SignMasterKeyPair other) {
    if (other.isSetPrivateKey()) {
      this.privateKey = org.apache.thrift.TBaseHelper.copyBinary(other.privateKey);
    }
    if (other.isSetPublicKey()) {
      this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(other.publicKey);
    }
    if (other.isSetPairG()) {
      this.pairG = org.apache.thrift.TBaseHelper.copyBinary(other.pairG);
    }
  }

  @Override
  public SM9SignMasterKeyPair deepCopy() {
    return new SM9SignMasterKeyPair(this);
  }

  @Override
  public void clear() {
    this.privateKey = null;
    this.publicKey = null;
    this.pairG = null;
  }

  public byte[] getPrivateKey() {
    setPrivateKey(org.apache.thrift.TBaseHelper.rightSize(privateKey));
    return privateKey == null ? null : privateKey.array();
  }

  public java.nio.ByteBuffer bufferForPrivateKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(privateKey);
  }

  public SM9SignMasterKeyPair setPrivateKey(byte[] privateKey) {
    this.privateKey = privateKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(privateKey.clone());
    return this;
  }

  public SM9SignMasterKeyPair setPrivateKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer privateKey) {
    this.privateKey = org.apache.thrift.TBaseHelper.copyBinary(privateKey);
    return this;
  }

  public void unsetPrivateKey() {
    this.privateKey = null;
  }

  /** Returns true if field privateKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivateKey() {
    return this.privateKey != null;
  }

  public void setPrivateKeyIsSet(boolean value) {
    if (!value) {
      this.privateKey = null;
    }
  }

  public byte[] getPublicKey() {
    setPublicKey(org.apache.thrift.TBaseHelper.rightSize(publicKey));
    return publicKey == null ? null : publicKey.array();
  }

  public java.nio.ByteBuffer bufferForPublicKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(publicKey);
  }

  public SM9SignMasterKeyPair setPublicKey(byte[] publicKey) {
    this.publicKey = publicKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(publicKey.clone());
    return this;
  }

  public SM9SignMasterKeyPair setPublicKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer publicKey) {
    this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(publicKey);
    return this;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  public byte[] getPairG() {
    setPairG(org.apache.thrift.TBaseHelper.rightSize(pairG));
    return pairG == null ? null : pairG.array();
  }

  public java.nio.ByteBuffer bufferForPairG() {
    return org.apache.thrift.TBaseHelper.copyBinary(pairG);
  }

  public SM9SignMasterKeyPair setPairG(byte[] pairG) {
    this.pairG = pairG == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(pairG.clone());
    return this;
  }

  public SM9SignMasterKeyPair setPairG(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer pairG) {
    this.pairG = org.apache.thrift.TBaseHelper.copyBinary(pairG);
    return this;
  }

  public void unsetPairG() {
    this.pairG = null;
  }

  /** Returns true if field pairG is set (has been assigned a value) and false otherwise */
  public boolean isSetPairG() {
    return this.pairG != null;
  }

  public void setPairGIsSet(boolean value) {
    if (!value) {
      this.pairG = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PRIVATE_KEY:
      if (value == null) {
        unsetPrivateKey();
      } else {
        if (value instanceof byte[]) {
          setPrivateKey((byte[])value);
        } else {
          setPrivateKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PUBLIC_KEY:
      if (value == null) {
        unsetPublicKey();
      } else {
        if (value instanceof byte[]) {
          setPublicKey((byte[])value);
        } else {
          setPublicKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PAIR_G:
      if (value == null) {
        unsetPairG();
      } else {
        if (value instanceof byte[]) {
          setPairG((byte[])value);
        } else {
          setPairG((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PRIVATE_KEY:
      return getPrivateKey();

    case PUBLIC_KEY:
      return getPublicKey();

    case PAIR_G:
      return getPairG();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PRIVATE_KEY:
      return isSetPrivateKey();
    case PUBLIC_KEY:
      return isSetPublicKey();
    case PAIR_G:
      return isSetPairG();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SM9SignMasterKeyPair)
      return this.equals((SM9SignMasterKeyPair)that);
    return false;
  }

  public boolean equals(SM9SignMasterKeyPair that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_privateKey = true && this.isSetPrivateKey();
    boolean that_present_privateKey = true && that.isSetPrivateKey();
    if (this_present_privateKey || that_present_privateKey) {
      if (!(this_present_privateKey && that_present_privateKey))
        return false;
      if (!this.privateKey.equals(that.privateKey))
        return false;
    }

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!this.publicKey.equals(that.publicKey))
        return false;
    }

    boolean this_present_pairG = true && this.isSetPairG();
    boolean that_present_pairG = true && that.isSetPairG();
    if (this_present_pairG || that_present_pairG) {
      if (!(this_present_pairG && that_present_pairG))
        return false;
      if (!this.pairG.equals(that.pairG))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPrivateKey()) ? 131071 : 524287);
    if (isSetPrivateKey())
      hashCode = hashCode * 8191 + privateKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublicKey()) ? 131071 : 524287);
    if (isSetPublicKey())
      hashCode = hashCode * 8191 + publicKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetPairG()) ? 131071 : 524287);
    if (isSetPairG())
      hashCode = hashCode * 8191 + pairG.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SM9SignMasterKeyPair other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPrivateKey(), other.isSetPrivateKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivateKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privateKey, other.privateKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPublicKey(), other.isSetPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPairG(), other.isSetPairG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPairG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pairG, other.pairG);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SM9SignMasterKeyPair(");
    boolean first = true;

    sb.append("privateKey:");
    if (this.privateKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.privateKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicKey:");
    if (this.publicKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.publicKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pairG:");
    if (this.pairG == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.pairG, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SM9SignMasterKeyPairStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SM9SignMasterKeyPairStandardScheme getScheme() {
      return new SM9SignMasterKeyPairStandardScheme();
    }
  }

  private static class SM9SignMasterKeyPairStandardScheme extends org.apache.thrift.scheme.StandardScheme<SM9SignMasterKeyPair> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SM9SignMasterKeyPair struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRIVATE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privateKey = iprot.readBinary();
              struct.setPrivateKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PUBLIC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicKey = iprot.readBinary();
              struct.setPublicKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAIR_G
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pairG = iprot.readBinary();
              struct.setPairGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SM9SignMasterKeyPair struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.privateKey != null) {
        oprot.writeFieldBegin(PRIVATE_KEY_FIELD_DESC);
        oprot.writeBinary(struct.privateKey);
        oprot.writeFieldEnd();
      }
      if (struct.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        oprot.writeBinary(struct.publicKey);
        oprot.writeFieldEnd();
      }
      if (struct.pairG != null) {
        oprot.writeFieldBegin(PAIR_G_FIELD_DESC);
        oprot.writeBinary(struct.pairG);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SM9SignMasterKeyPairTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SM9SignMasterKeyPairTupleScheme getScheme() {
      return new SM9SignMasterKeyPairTupleScheme();
    }
  }

  private static class SM9SignMasterKeyPairTupleScheme extends org.apache.thrift.scheme.TupleScheme<SM9SignMasterKeyPair> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SM9SignMasterKeyPair struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPrivateKey()) {
        optionals.set(0);
      }
      if (struct.isSetPublicKey()) {
        optionals.set(1);
      }
      if (struct.isSetPairG()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPrivateKey()) {
        oprot.writeBinary(struct.privateKey);
      }
      if (struct.isSetPublicKey()) {
        oprot.writeBinary(struct.publicKey);
      }
      if (struct.isSetPairG()) {
        oprot.writeBinary(struct.pairG);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SM9SignMasterKeyPair struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.privateKey = iprot.readBinary();
        struct.setPrivateKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.publicKey = iprot.readBinary();
        struct.setPublicKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pairG = iprot.readBinary();
        struct.setPairGIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

