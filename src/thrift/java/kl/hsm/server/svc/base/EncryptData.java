/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class EncryptData implements org.apache.thrift.TBase<EncryptData, EncryptData._Fields>, java.io.Serializable, Cloneable, Comparable<EncryptData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EncryptData");

  private static final org.apache.thrift.protocol.TField ENC_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("encData", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EncryptDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EncryptDataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encData; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer tag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENC_DATA((short)1, "encData"),
    TAG((short)2, "tag");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENC_DATA
          return ENC_DATA;
        case 2: // TAG
          return TAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENC_DATA, new org.apache.thrift.meta_data.FieldMetaData("encData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EncryptData.class, metaDataMap);
  }

  public EncryptData() {
  }

  public EncryptData(
    java.nio.ByteBuffer encData,
    java.nio.ByteBuffer tag)
  {
    this();
    this.encData = org.apache.thrift.TBaseHelper.copyBinary(encData);
    this.tag = org.apache.thrift.TBaseHelper.copyBinary(tag);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EncryptData(EncryptData other) {
    if (other.isSetEncData()) {
      this.encData = org.apache.thrift.TBaseHelper.copyBinary(other.encData);
    }
    if (other.isSetTag()) {
      this.tag = org.apache.thrift.TBaseHelper.copyBinary(other.tag);
    }
  }

  @Override
  public EncryptData deepCopy() {
    return new EncryptData(this);
  }

  @Override
  public void clear() {
    this.encData = null;
    this.tag = null;
  }

  public byte[] getEncData() {
    setEncData(org.apache.thrift.TBaseHelper.rightSize(encData));
    return encData == null ? null : encData.array();
  }

  public java.nio.ByteBuffer bufferForEncData() {
    return org.apache.thrift.TBaseHelper.copyBinary(encData);
  }

  public EncryptData setEncData(byte[] encData) {
    this.encData = encData == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(encData.clone());
    return this;
  }

  public EncryptData setEncData(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encData) {
    this.encData = org.apache.thrift.TBaseHelper.copyBinary(encData);
    return this;
  }

  public void unsetEncData() {
    this.encData = null;
  }

  /** Returns true if field encData is set (has been assigned a value) and false otherwise */
  public boolean isSetEncData() {
    return this.encData != null;
  }

  public void setEncDataIsSet(boolean value) {
    if (!value) {
      this.encData = null;
    }
  }

  public byte[] getTag() {
    setTag(org.apache.thrift.TBaseHelper.rightSize(tag));
    return tag == null ? null : tag.array();
  }

  public java.nio.ByteBuffer bufferForTag() {
    return org.apache.thrift.TBaseHelper.copyBinary(tag);
  }

  public EncryptData setTag(byte[] tag) {
    this.tag = tag == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(tag.clone());
    return this;
  }

  public EncryptData setTag(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer tag) {
    this.tag = org.apache.thrift.TBaseHelper.copyBinary(tag);
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ENC_DATA:
      if (value == null) {
        unsetEncData();
      } else {
        if (value instanceof byte[]) {
          setEncData((byte[])value);
        } else {
          setEncData((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        if (value instanceof byte[]) {
          setTag((byte[])value);
        } else {
          setTag((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ENC_DATA:
      return getEncData();

    case TAG:
      return getTag();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ENC_DATA:
      return isSetEncData();
    case TAG:
      return isSetTag();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof EncryptData)
      return this.equals((EncryptData)that);
    return false;
  }

  public boolean equals(EncryptData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_encData = true && this.isSetEncData();
    boolean that_present_encData = true && that.isSetEncData();
    if (this_present_encData || that_present_encData) {
      if (!(this_present_encData && that_present_encData))
        return false;
      if (!this.encData.equals(that.encData))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEncData()) ? 131071 : 524287);
    if (isSetEncData())
      hashCode = hashCode * 8191 + encData.hashCode();

    hashCode = hashCode * 8191 + ((isSetTag()) ? 131071 : 524287);
    if (isSetTag())
      hashCode = hashCode * 8191 + tag.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EncryptData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEncData(), other.isSetEncData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encData, other.encData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTag(), other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EncryptData(");
    boolean first = true;

    sb.append("encData:");
    if (this.encData == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.encData, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tag:");
    if (this.tag == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.tag, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EncryptDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public EncryptDataStandardScheme getScheme() {
      return new EncryptDataStandardScheme();
    }
  }

  private static class EncryptDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<EncryptData> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, EncryptData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENC_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encData = iprot.readBinary();
              struct.setEncDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readBinary();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, EncryptData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.encData != null) {
        oprot.writeFieldBegin(ENC_DATA_FIELD_DESC);
        oprot.writeBinary(struct.encData);
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeBinary(struct.tag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EncryptDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public EncryptDataTupleScheme getScheme() {
      return new EncryptDataTupleScheme();
    }
  }

  private static class EncryptDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<EncryptData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EncryptData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEncData()) {
        optionals.set(0);
      }
      if (struct.isSetTag()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetEncData()) {
        oprot.writeBinary(struct.encData);
      }
      if (struct.isSetTag()) {
        oprot.writeBinary(struct.tag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EncryptData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.encData = iprot.readBinary();
        struct.setEncDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tag = iprot.readBinary();
        struct.setTagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

