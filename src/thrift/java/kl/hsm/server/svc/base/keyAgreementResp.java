/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class keyAgreementResp implements org.apache.thrift.TBase<keyAgreementResp, keyAgreementResp._Fields>, java.io.Serializable, Cloneable, Comparable<keyAgreementResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keyAgreementResp");

  private static final org.apache.thrift.protocol.TField OK_FIELD_DESC = new org.apache.thrift.protocol.TField("ok", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PUB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pubKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SP_TMP_PUB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("spTmpPubKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField S_KEY_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sKeyHandle", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new keyAgreementRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new keyAgreementRespTupleSchemeFactory();

  public boolean ok; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String error; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer pubKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer spTmpPubKey; // required
  public long sKeyHandle; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OK((short)1, "ok"),
    ERROR((short)2, "error"),
    PUB_KEY((short)3, "pubKey"),
    SP_TMP_PUB_KEY((short)4, "spTmpPubKey"),
    S_KEY_HANDLE((short)5, "sKeyHandle");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OK
          return OK;
        case 2: // ERROR
          return ERROR;
        case 3: // PUB_KEY
          return PUB_KEY;
        case 4: // SP_TMP_PUB_KEY
          return SP_TMP_PUB_KEY;
        case 5: // S_KEY_HANDLE
          return S_KEY_HANDLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OK_ISSET_ID = 0;
  private static final int __SKEYHANDLE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OK, new org.apache.thrift.meta_data.FieldMetaData("ok", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUB_KEY, new org.apache.thrift.meta_data.FieldMetaData("pubKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SP_TMP_PUB_KEY, new org.apache.thrift.meta_data.FieldMetaData("spTmpPubKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.S_KEY_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("sKeyHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keyAgreementResp.class, metaDataMap);
  }

  public keyAgreementResp() {
  }

  public keyAgreementResp(
    boolean ok,
    java.lang.String error,
    java.nio.ByteBuffer pubKey,
    java.nio.ByteBuffer spTmpPubKey,
    long sKeyHandle)
  {
    this();
    this.ok = ok;
    setOkIsSet(true);
    this.error = error;
    this.pubKey = org.apache.thrift.TBaseHelper.copyBinary(pubKey);
    this.spTmpPubKey = org.apache.thrift.TBaseHelper.copyBinary(spTmpPubKey);
    this.sKeyHandle = sKeyHandle;
    setSKeyHandleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public keyAgreementResp(keyAgreementResp other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ok = other.ok;
    if (other.isSetError()) {
      this.error = other.error;
    }
    if (other.isSetPubKey()) {
      this.pubKey = org.apache.thrift.TBaseHelper.copyBinary(other.pubKey);
    }
    if (other.isSetSpTmpPubKey()) {
      this.spTmpPubKey = org.apache.thrift.TBaseHelper.copyBinary(other.spTmpPubKey);
    }
    this.sKeyHandle = other.sKeyHandle;
  }

  @Override
  public keyAgreementResp deepCopy() {
    return new keyAgreementResp(this);
  }

  @Override
  public void clear() {
    setOkIsSet(false);
    this.ok = false;
    this.error = null;
    this.pubKey = null;
    this.spTmpPubKey = null;
    setSKeyHandleIsSet(false);
    this.sKeyHandle = 0;
  }

  public boolean isOk() {
    return this.ok;
  }

  public keyAgreementResp setOk(boolean ok) {
    this.ok = ok;
    setOkIsSet(true);
    return this;
  }

  public void unsetOk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OK_ISSET_ID);
  }

  /** Returns true if field ok is set (has been assigned a value) and false otherwise */
  public boolean isSetOk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OK_ISSET_ID);
  }

  public void setOkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OK_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getError() {
    return this.error;
  }

  public keyAgreementResp setError(@org.apache.thrift.annotation.Nullable java.lang.String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public byte[] getPubKey() {
    setPubKey(org.apache.thrift.TBaseHelper.rightSize(pubKey));
    return pubKey == null ? null : pubKey.array();
  }

  public java.nio.ByteBuffer bufferForPubKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(pubKey);
  }

  public keyAgreementResp setPubKey(byte[] pubKey) {
    this.pubKey = pubKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(pubKey.clone());
    return this;
  }

  public keyAgreementResp setPubKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer pubKey) {
    this.pubKey = org.apache.thrift.TBaseHelper.copyBinary(pubKey);
    return this;
  }

  public void unsetPubKey() {
    this.pubKey = null;
  }

  /** Returns true if field pubKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPubKey() {
    return this.pubKey != null;
  }

  public void setPubKeyIsSet(boolean value) {
    if (!value) {
      this.pubKey = null;
    }
  }

  public byte[] getSpTmpPubKey() {
    setSpTmpPubKey(org.apache.thrift.TBaseHelper.rightSize(spTmpPubKey));
    return spTmpPubKey == null ? null : spTmpPubKey.array();
  }

  public java.nio.ByteBuffer bufferForSpTmpPubKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(spTmpPubKey);
  }

  public keyAgreementResp setSpTmpPubKey(byte[] spTmpPubKey) {
    this.spTmpPubKey = spTmpPubKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(spTmpPubKey.clone());
    return this;
  }

  public keyAgreementResp setSpTmpPubKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer spTmpPubKey) {
    this.spTmpPubKey = org.apache.thrift.TBaseHelper.copyBinary(spTmpPubKey);
    return this;
  }

  public void unsetSpTmpPubKey() {
    this.spTmpPubKey = null;
  }

  /** Returns true if field spTmpPubKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSpTmpPubKey() {
    return this.spTmpPubKey != null;
  }

  public void setSpTmpPubKeyIsSet(boolean value) {
    if (!value) {
      this.spTmpPubKey = null;
    }
  }

  public long getSKeyHandle() {
    return this.sKeyHandle;
  }

  public keyAgreementResp setSKeyHandle(long sKeyHandle) {
    this.sKeyHandle = sKeyHandle;
    setSKeyHandleIsSet(true);
    return this;
  }

  public void unsetSKeyHandle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKEYHANDLE_ISSET_ID);
  }

  /** Returns true if field sKeyHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetSKeyHandle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKEYHANDLE_ISSET_ID);
  }

  public void setSKeyHandleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKEYHANDLE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OK:
      if (value == null) {
        unsetOk();
      } else {
        setOk((java.lang.Boolean)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((java.lang.String)value);
      }
      break;

    case PUB_KEY:
      if (value == null) {
        unsetPubKey();
      } else {
        if (value instanceof byte[]) {
          setPubKey((byte[])value);
        } else {
          setPubKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SP_TMP_PUB_KEY:
      if (value == null) {
        unsetSpTmpPubKey();
      } else {
        if (value instanceof byte[]) {
          setSpTmpPubKey((byte[])value);
        } else {
          setSpTmpPubKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case S_KEY_HANDLE:
      if (value == null) {
        unsetSKeyHandle();
      } else {
        setSKeyHandle((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OK:
      return isOk();

    case ERROR:
      return getError();

    case PUB_KEY:
      return getPubKey();

    case SP_TMP_PUB_KEY:
      return getSpTmpPubKey();

    case S_KEY_HANDLE:
      return getSKeyHandle();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OK:
      return isSetOk();
    case ERROR:
      return isSetError();
    case PUB_KEY:
      return isSetPubKey();
    case SP_TMP_PUB_KEY:
      return isSetSpTmpPubKey();
    case S_KEY_HANDLE:
      return isSetSKeyHandle();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof keyAgreementResp)
      return this.equals((keyAgreementResp)that);
    return false;
  }

  public boolean equals(keyAgreementResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ok = true;
    boolean that_present_ok = true;
    if (this_present_ok || that_present_ok) {
      if (!(this_present_ok && that_present_ok))
        return false;
      if (this.ok != that.ok)
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_pubKey = true && this.isSetPubKey();
    boolean that_present_pubKey = true && that.isSetPubKey();
    if (this_present_pubKey || that_present_pubKey) {
      if (!(this_present_pubKey && that_present_pubKey))
        return false;
      if (!this.pubKey.equals(that.pubKey))
        return false;
    }

    boolean this_present_spTmpPubKey = true && this.isSetSpTmpPubKey();
    boolean that_present_spTmpPubKey = true && that.isSetSpTmpPubKey();
    if (this_present_spTmpPubKey || that_present_spTmpPubKey) {
      if (!(this_present_spTmpPubKey && that_present_spTmpPubKey))
        return false;
      if (!this.spTmpPubKey.equals(that.spTmpPubKey))
        return false;
    }

    boolean this_present_sKeyHandle = true;
    boolean that_present_sKeyHandle = true;
    if (this_present_sKeyHandle || that_present_sKeyHandle) {
      if (!(this_present_sKeyHandle && that_present_sKeyHandle))
        return false;
      if (this.sKeyHandle != that.sKeyHandle)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((ok) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + error.hashCode();

    hashCode = hashCode * 8191 + ((isSetPubKey()) ? 131071 : 524287);
    if (isSetPubKey())
      hashCode = hashCode * 8191 + pubKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpTmpPubKey()) ? 131071 : 524287);
    if (isSetSpTmpPubKey())
      hashCode = hashCode * 8191 + spTmpPubKey.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sKeyHandle);

    return hashCode;
  }

  @Override
  public int compareTo(keyAgreementResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOk(), other.isSetOk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ok, other.ok);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError(), other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPubKey(), other.isSetPubKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubKey, other.pubKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpTmpPubKey(), other.isSetSpTmpPubKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpTmpPubKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spTmpPubKey, other.spTmpPubKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSKeyHandle(), other.isSetSKeyHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSKeyHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sKeyHandle, other.sKeyHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("keyAgreementResp(");
    boolean first = true;

    sb.append("ok:");
    sb.append(this.ok);
    first = false;
    if (!first) sb.append(", ");
    sb.append("error:");
    if (this.error == null) {
      sb.append("null");
    } else {
      sb.append(this.error);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubKey:");
    if (this.pubKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.pubKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spTmpPubKey:");
    if (this.spTmpPubKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.spTmpPubKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sKeyHandle:");
    sb.append(this.sKeyHandle);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class keyAgreementRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public keyAgreementRespStandardScheme getScheme() {
      return new keyAgreementRespStandardScheme();
    }
  }

  private static class keyAgreementRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<keyAgreementResp> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, keyAgreementResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ok = iprot.readBool();
              struct.setOkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error = iprot.readString();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUB_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubKey = iprot.readBinary();
              struct.setPubKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SP_TMP_PUB_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spTmpPubKey = iprot.readBinary();
              struct.setSpTmpPubKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // S_KEY_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sKeyHandle = iprot.readI64();
              struct.setSKeyHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, keyAgreementResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OK_FIELD_DESC);
      oprot.writeBool(struct.ok);
      oprot.writeFieldEnd();
      if (struct.error != null) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeString(struct.error);
        oprot.writeFieldEnd();
      }
      if (struct.pubKey != null) {
        oprot.writeFieldBegin(PUB_KEY_FIELD_DESC);
        oprot.writeBinary(struct.pubKey);
        oprot.writeFieldEnd();
      }
      if (struct.spTmpPubKey != null) {
        oprot.writeFieldBegin(SP_TMP_PUB_KEY_FIELD_DESC);
        oprot.writeBinary(struct.spTmpPubKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(S_KEY_HANDLE_FIELD_DESC);
      oprot.writeI64(struct.sKeyHandle);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class keyAgreementRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public keyAgreementRespTupleScheme getScheme() {
      return new keyAgreementRespTupleScheme();
    }
  }

  private static class keyAgreementRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<keyAgreementResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, keyAgreementResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOk()) {
        optionals.set(0);
      }
      if (struct.isSetError()) {
        optionals.set(1);
      }
      if (struct.isSetPubKey()) {
        optionals.set(2);
      }
      if (struct.isSetSpTmpPubKey()) {
        optionals.set(3);
      }
      if (struct.isSetSKeyHandle()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOk()) {
        oprot.writeBool(struct.ok);
      }
      if (struct.isSetError()) {
        oprot.writeString(struct.error);
      }
      if (struct.isSetPubKey()) {
        oprot.writeBinary(struct.pubKey);
      }
      if (struct.isSetSpTmpPubKey()) {
        oprot.writeBinary(struct.spTmpPubKey);
      }
      if (struct.isSetSKeyHandle()) {
        oprot.writeI64(struct.sKeyHandle);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, keyAgreementResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ok = iprot.readBool();
        struct.setOkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.error = iprot.readString();
        struct.setErrorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pubKey = iprot.readBinary();
        struct.setPubKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.spTmpPubKey = iprot.readBinary();
        struct.setSpTmpPubKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sKeyHandle = iprot.readI64();
        struct.setSKeyHandleIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

