/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;


@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public enum Algo implements org.apache.thrift.TEnum {
  SM1(1),
  SM2(2),
  SM3(3),
  SM4(4),
  SM7(7),
  SM9(9),
  ZUC(10),
  DES(20),
  TriDES(21),
  RC4(22),
  AES_128(23),
  AES_256(24),
  AES_192(25),
  RSA_1024(30),
  RSA_2048(32),
  RSA_3072(34),
  RSA_4096(33),
  ECC_256(36),
  ECC_384(37),
  SECP256k1(39),
  MD5(40),
  SHA1(41),
  SHA2_256(42),
  SHA2_384(43),
  SHA2_512(44),
  SHA2_224(45),
  BRAINPOOLP256T1(51),
  BRAINPOOLP256R1(52),
  Ed25519(53),
  ECDSA(54),
  Ed25519ph(55),
  Ed25519ctx(56),
  PRIME256v1(38),
  SECP384r1(57),
  SECP521r1(258),
  SECT233K1(266),
  SECT283K1(267),
  SECT409K1(268),
  SECT571K1(269),
  SECT233R1(271),
  SECT283R1(272),
  SECT409R1(273),
  SECT571R1(274),
  BRAINPOOLP224T1(276),
  BRAINPOOLP320T1(277),
  BRAINPOOLP384T1(278),
  BRAINPOOLP512T1(279),
  BRAINPOOLP224R1(286),
  BRAINPOOLP320R1(287),
  BRAINPOOLP384R1(288),
  BRAINPOOLP512R1(289);

  private final int value;

  private Algo(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  @Override
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static Algo findByValue(int value) { 
    switch (value) {
      case 1:
        return SM1;
      case 2:
        return SM2;
      case 3:
        return SM3;
      case 4:
        return SM4;
      case 7:
        return SM7;
      case 9:
        return SM9;
      case 10:
        return ZUC;
      case 20:
        return DES;
      case 21:
        return TriDES;
      case 22:
        return RC4;
      case 23:
        return AES_128;
      case 24:
        return AES_256;
      case 25:
        return AES_192;
      case 30:
        return RSA_1024;
      case 32:
        return RSA_2048;
      case 34:
        return RSA_3072;
      case 33:
        return RSA_4096;
      case 36:
        return ECC_256;
      case 37:
        return ECC_384;
      case 39:
        return SECP256k1;
      case 40:
        return MD5;
      case 41:
        return SHA1;
      case 42:
        return SHA2_256;
      case 43:
        return SHA2_384;
      case 44:
        return SHA2_512;
      case 45:
        return SHA2_224;
      case 51:
        return BRAINPOOLP256T1;
      case 52:
        return BRAINPOOLP256R1;
      case 53:
        return Ed25519;
      case 54:
        return ECDSA;
      case 55:
        return Ed25519ph;
      case 56:
        return Ed25519ctx;
      case 38:
        return PRIME256v1;
      case 57:
        return SECP384r1;
      case 258:
        return SECP521r1;
      case 266:
        return SECT233K1;
      case 267:
        return SECT283K1;
      case 268:
        return SECT409K1;
      case 269:
        return SECT571K1;
      case 271:
        return SECT233R1;
      case 272:
        return SECT283R1;
      case 273:
        return SECT409R1;
      case 274:
        return SECT571R1;
      case 276:
        return BRAINPOOLP224T1;
      case 277:
        return BRAINPOOLP320T1;
      case 278:
        return BRAINPOOLP384T1;
      case 279:
        return BRAINPOOLP512T1;
      case 286:
        return BRAINPOOLP224R1;
      case 287:
        return BRAINPOOLP320R1;
      case 288:
        return BRAINPOOLP384R1;
      case 289:
        return BRAINPOOLP512R1;
      default:
        return null;
    }
  }
}
