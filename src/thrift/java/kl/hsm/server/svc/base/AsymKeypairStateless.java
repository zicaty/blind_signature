/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class AsymKeypairStateless implements org.apache.thrift.TBase<AsymKeypairStateless, AsymKeypairStateless._Fields>, java.io.Serializable, Cloneable, Comparable<AsymKeypairStateless> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AsymKeypairStateless");

  private static final org.apache.thrift.protocol.TField PUB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pubKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRIV_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("privKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ALGO_FIELD_DESC = new org.apache.thrift.protocol.TField("algo", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AsymKeypairStatelessStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AsymKeypairStatelessTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer pubKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer privKey; // required
  /**
   * 
   * @see Algo
   */
  public @org.apache.thrift.annotation.Nullable Algo algo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PUB_KEY((short)1, "pubKey"),
    PRIV_KEY((short)2, "privKey"),
    /**
     * 
     * @see Algo
     */
    ALGO((short)3, "algo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PUB_KEY
          return PUB_KEY;
        case 2: // PRIV_KEY
          return PRIV_KEY;
        case 3: // ALGO
          return ALGO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PUB_KEY, new org.apache.thrift.meta_data.FieldMetaData("pubKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PRIV_KEY, new org.apache.thrift.meta_data.FieldMetaData("privKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ALGO, new org.apache.thrift.meta_data.FieldMetaData("algo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Algo.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AsymKeypairStateless.class, metaDataMap);
  }

  public AsymKeypairStateless() {
  }

  public AsymKeypairStateless(
    java.nio.ByteBuffer pubKey,
    java.nio.ByteBuffer privKey,
    Algo algo)
  {
    this();
    this.pubKey = org.apache.thrift.TBaseHelper.copyBinary(pubKey);
    this.privKey = org.apache.thrift.TBaseHelper.copyBinary(privKey);
    this.algo = algo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AsymKeypairStateless(AsymKeypairStateless other) {
    if (other.isSetPubKey()) {
      this.pubKey = org.apache.thrift.TBaseHelper.copyBinary(other.pubKey);
    }
    if (other.isSetPrivKey()) {
      this.privKey = org.apache.thrift.TBaseHelper.copyBinary(other.privKey);
    }
    if (other.isSetAlgo()) {
      this.algo = other.algo;
    }
  }

  @Override
  public AsymKeypairStateless deepCopy() {
    return new AsymKeypairStateless(this);
  }

  @Override
  public void clear() {
    this.pubKey = null;
    this.privKey = null;
    this.algo = null;
  }

  public byte[] getPubKey() {
    setPubKey(org.apache.thrift.TBaseHelper.rightSize(pubKey));
    return pubKey == null ? null : pubKey.array();
  }

  public java.nio.ByteBuffer bufferForPubKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(pubKey);
  }

  public AsymKeypairStateless setPubKey(byte[] pubKey) {
    this.pubKey = pubKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(pubKey.clone());
    return this;
  }

  public AsymKeypairStateless setPubKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer pubKey) {
    this.pubKey = org.apache.thrift.TBaseHelper.copyBinary(pubKey);
    return this;
  }

  public void unsetPubKey() {
    this.pubKey = null;
  }

  /** Returns true if field pubKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPubKey() {
    return this.pubKey != null;
  }

  public void setPubKeyIsSet(boolean value) {
    if (!value) {
      this.pubKey = null;
    }
  }

  public byte[] getPrivKey() {
    setPrivKey(org.apache.thrift.TBaseHelper.rightSize(privKey));
    return privKey == null ? null : privKey.array();
  }

  public java.nio.ByteBuffer bufferForPrivKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(privKey);
  }

  public AsymKeypairStateless setPrivKey(byte[] privKey) {
    this.privKey = privKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(privKey.clone());
    return this;
  }

  public AsymKeypairStateless setPrivKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer privKey) {
    this.privKey = org.apache.thrift.TBaseHelper.copyBinary(privKey);
    return this;
  }

  public void unsetPrivKey() {
    this.privKey = null;
  }

  /** Returns true if field privKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivKey() {
    return this.privKey != null;
  }

  public void setPrivKeyIsSet(boolean value) {
    if (!value) {
      this.privKey = null;
    }
  }

  /**
   * 
   * @see Algo
   */
  @org.apache.thrift.annotation.Nullable
  public Algo getAlgo() {
    return this.algo;
  }

  /**
   * 
   * @see Algo
   */
  public AsymKeypairStateless setAlgo(@org.apache.thrift.annotation.Nullable Algo algo) {
    this.algo = algo;
    return this;
  }

  public void unsetAlgo() {
    this.algo = null;
  }

  /** Returns true if field algo is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgo() {
    return this.algo != null;
  }

  public void setAlgoIsSet(boolean value) {
    if (!value) {
      this.algo = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PUB_KEY:
      if (value == null) {
        unsetPubKey();
      } else {
        if (value instanceof byte[]) {
          setPubKey((byte[])value);
        } else {
          setPubKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PRIV_KEY:
      if (value == null) {
        unsetPrivKey();
      } else {
        if (value instanceof byte[]) {
          setPrivKey((byte[])value);
        } else {
          setPrivKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case ALGO:
      if (value == null) {
        unsetAlgo();
      } else {
        setAlgo((Algo)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PUB_KEY:
      return getPubKey();

    case PRIV_KEY:
      return getPrivKey();

    case ALGO:
      return getAlgo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PUB_KEY:
      return isSetPubKey();
    case PRIV_KEY:
      return isSetPrivKey();
    case ALGO:
      return isSetAlgo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AsymKeypairStateless)
      return this.equals((AsymKeypairStateless)that);
    return false;
  }

  public boolean equals(AsymKeypairStateless that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pubKey = true && this.isSetPubKey();
    boolean that_present_pubKey = true && that.isSetPubKey();
    if (this_present_pubKey || that_present_pubKey) {
      if (!(this_present_pubKey && that_present_pubKey))
        return false;
      if (!this.pubKey.equals(that.pubKey))
        return false;
    }

    boolean this_present_privKey = true && this.isSetPrivKey();
    boolean that_present_privKey = true && that.isSetPrivKey();
    if (this_present_privKey || that_present_privKey) {
      if (!(this_present_privKey && that_present_privKey))
        return false;
      if (!this.privKey.equals(that.privKey))
        return false;
    }

    boolean this_present_algo = true && this.isSetAlgo();
    boolean that_present_algo = true && that.isSetAlgo();
    if (this_present_algo || that_present_algo) {
      if (!(this_present_algo && that_present_algo))
        return false;
      if (!this.algo.equals(that.algo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPubKey()) ? 131071 : 524287);
    if (isSetPubKey())
      hashCode = hashCode * 8191 + pubKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrivKey()) ? 131071 : 524287);
    if (isSetPrivKey())
      hashCode = hashCode * 8191 + privKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlgo()) ? 131071 : 524287);
    if (isSetAlgo())
      hashCode = hashCode * 8191 + algo.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(AsymKeypairStateless other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPubKey(), other.isSetPubKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubKey, other.pubKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrivKey(), other.isSetPrivKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privKey, other.privKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlgo(), other.isSetAlgo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algo, other.algo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AsymKeypairStateless(");
    boolean first = true;

    sb.append("pubKey:");
    if (this.pubKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.pubKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privKey:");
    if (this.privKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.privKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("algo:");
    if (this.algo == null) {
      sb.append("null");
    } else {
      sb.append(this.algo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AsymKeypairStatelessStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AsymKeypairStatelessStandardScheme getScheme() {
      return new AsymKeypairStatelessStandardScheme();
    }
  }

  private static class AsymKeypairStatelessStandardScheme extends org.apache.thrift.scheme.StandardScheme<AsymKeypairStateless> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, AsymKeypairStateless struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PUB_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubKey = iprot.readBinary();
              struct.setPubKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIV_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privKey = iprot.readBinary();
              struct.setPrivKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALGO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.algo = kl.hsm.server.svc.base.Algo.findByValue(iprot.readI32());
              struct.setAlgoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, AsymKeypairStateless struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pubKey != null) {
        oprot.writeFieldBegin(PUB_KEY_FIELD_DESC);
        oprot.writeBinary(struct.pubKey);
        oprot.writeFieldEnd();
      }
      if (struct.privKey != null) {
        oprot.writeFieldBegin(PRIV_KEY_FIELD_DESC);
        oprot.writeBinary(struct.privKey);
        oprot.writeFieldEnd();
      }
      if (struct.algo != null) {
        oprot.writeFieldBegin(ALGO_FIELD_DESC);
        oprot.writeI32(struct.algo.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AsymKeypairStatelessTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AsymKeypairStatelessTupleScheme getScheme() {
      return new AsymKeypairStatelessTupleScheme();
    }
  }

  private static class AsymKeypairStatelessTupleScheme extends org.apache.thrift.scheme.TupleScheme<AsymKeypairStateless> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AsymKeypairStateless struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPubKey()) {
        optionals.set(0);
      }
      if (struct.isSetPrivKey()) {
        optionals.set(1);
      }
      if (struct.isSetAlgo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPubKey()) {
        oprot.writeBinary(struct.pubKey);
      }
      if (struct.isSetPrivKey()) {
        oprot.writeBinary(struct.privKey);
      }
      if (struct.isSetAlgo()) {
        oprot.writeI32(struct.algo.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AsymKeypairStateless struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pubKey = iprot.readBinary();
        struct.setPubKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.privKey = iprot.readBinary();
        struct.setPrivKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.algo = kl.hsm.server.svc.base.Algo.findByValue(iprot.readI32());
        struct.setAlgoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

