/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class SslKey implements org.apache.thrift.TBase<SslKey, SslKey._Fields>, java.io.Serializable, Cloneable, Comparable<SslKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SslKey");

  private static final org.apache.thrift.protocol.TField CLIENT_HASH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("clientHashKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_HASH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHashKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_ENC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("clientEncKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERVER_ENC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serverEncKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_IV_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIv", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SERVER_IV_FIELD_DESC = new org.apache.thrift.protocol.TField("serverIv", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SslKeyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SslKeyTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer clientHashKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverHashKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer clientEncKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverEncKey; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer clientIv; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverIv; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_HASH_KEY((short)1, "clientHashKey"),
    SERVER_HASH_KEY((short)2, "serverHashKey"),
    CLIENT_ENC_KEY((short)3, "clientEncKey"),
    SERVER_ENC_KEY((short)4, "serverEncKey"),
    CLIENT_IV((short)5, "clientIv"),
    SERVER_IV((short)6, "serverIv");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_HASH_KEY
          return CLIENT_HASH_KEY;
        case 2: // SERVER_HASH_KEY
          return SERVER_HASH_KEY;
        case 3: // CLIENT_ENC_KEY
          return CLIENT_ENC_KEY;
        case 4: // SERVER_ENC_KEY
          return SERVER_ENC_KEY;
        case 5: // CLIENT_IV
          return CLIENT_IV;
        case 6: // SERVER_IV
          return SERVER_IV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_HASH_KEY, new org.apache.thrift.meta_data.FieldMetaData("clientHashKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SERVER_HASH_KEY, new org.apache.thrift.meta_data.FieldMetaData("serverHashKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.CLIENT_ENC_KEY, new org.apache.thrift.meta_data.FieldMetaData("clientEncKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SERVER_ENC_KEY, new org.apache.thrift.meta_data.FieldMetaData("serverEncKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.CLIENT_IV, new org.apache.thrift.meta_data.FieldMetaData("clientIv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SERVER_IV, new org.apache.thrift.meta_data.FieldMetaData("serverIv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SslKey.class, metaDataMap);
  }

  public SslKey() {
  }

  public SslKey(
    java.nio.ByteBuffer clientHashKey,
    java.nio.ByteBuffer serverHashKey,
    java.nio.ByteBuffer clientEncKey,
    java.nio.ByteBuffer serverEncKey,
    java.nio.ByteBuffer clientIv,
    java.nio.ByteBuffer serverIv)
  {
    this();
    this.clientHashKey = org.apache.thrift.TBaseHelper.copyBinary(clientHashKey);
    this.serverHashKey = org.apache.thrift.TBaseHelper.copyBinary(serverHashKey);
    this.clientEncKey = org.apache.thrift.TBaseHelper.copyBinary(clientEncKey);
    this.serverEncKey = org.apache.thrift.TBaseHelper.copyBinary(serverEncKey);
    this.clientIv = org.apache.thrift.TBaseHelper.copyBinary(clientIv);
    this.serverIv = org.apache.thrift.TBaseHelper.copyBinary(serverIv);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SslKey(SslKey other) {
    if (other.isSetClientHashKey()) {
      this.clientHashKey = org.apache.thrift.TBaseHelper.copyBinary(other.clientHashKey);
    }
    if (other.isSetServerHashKey()) {
      this.serverHashKey = org.apache.thrift.TBaseHelper.copyBinary(other.serverHashKey);
    }
    if (other.isSetClientEncKey()) {
      this.clientEncKey = org.apache.thrift.TBaseHelper.copyBinary(other.clientEncKey);
    }
    if (other.isSetServerEncKey()) {
      this.serverEncKey = org.apache.thrift.TBaseHelper.copyBinary(other.serverEncKey);
    }
    if (other.isSetClientIv()) {
      this.clientIv = org.apache.thrift.TBaseHelper.copyBinary(other.clientIv);
    }
    if (other.isSetServerIv()) {
      this.serverIv = org.apache.thrift.TBaseHelper.copyBinary(other.serverIv);
    }
  }

  @Override
  public SslKey deepCopy() {
    return new SslKey(this);
  }

  @Override
  public void clear() {
    this.clientHashKey = null;
    this.serverHashKey = null;
    this.clientEncKey = null;
    this.serverEncKey = null;
    this.clientIv = null;
    this.serverIv = null;
  }

  public byte[] getClientHashKey() {
    setClientHashKey(org.apache.thrift.TBaseHelper.rightSize(clientHashKey));
    return clientHashKey == null ? null : clientHashKey.array();
  }

  public java.nio.ByteBuffer bufferForClientHashKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(clientHashKey);
  }

  public SslKey setClientHashKey(byte[] clientHashKey) {
    this.clientHashKey = clientHashKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(clientHashKey.clone());
    return this;
  }

  public SslKey setClientHashKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer clientHashKey) {
    this.clientHashKey = org.apache.thrift.TBaseHelper.copyBinary(clientHashKey);
    return this;
  }

  public void unsetClientHashKey() {
    this.clientHashKey = null;
  }

  /** Returns true if field clientHashKey is set (has been assigned a value) and false otherwise */
  public boolean isSetClientHashKey() {
    return this.clientHashKey != null;
  }

  public void setClientHashKeyIsSet(boolean value) {
    if (!value) {
      this.clientHashKey = null;
    }
  }

  public byte[] getServerHashKey() {
    setServerHashKey(org.apache.thrift.TBaseHelper.rightSize(serverHashKey));
    return serverHashKey == null ? null : serverHashKey.array();
  }

  public java.nio.ByteBuffer bufferForServerHashKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(serverHashKey);
  }

  public SslKey setServerHashKey(byte[] serverHashKey) {
    this.serverHashKey = serverHashKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(serverHashKey.clone());
    return this;
  }

  public SslKey setServerHashKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverHashKey) {
    this.serverHashKey = org.apache.thrift.TBaseHelper.copyBinary(serverHashKey);
    return this;
  }

  public void unsetServerHashKey() {
    this.serverHashKey = null;
  }

  /** Returns true if field serverHashKey is set (has been assigned a value) and false otherwise */
  public boolean isSetServerHashKey() {
    return this.serverHashKey != null;
  }

  public void setServerHashKeyIsSet(boolean value) {
    if (!value) {
      this.serverHashKey = null;
    }
  }

  public byte[] getClientEncKey() {
    setClientEncKey(org.apache.thrift.TBaseHelper.rightSize(clientEncKey));
    return clientEncKey == null ? null : clientEncKey.array();
  }

  public java.nio.ByteBuffer bufferForClientEncKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(clientEncKey);
  }

  public SslKey setClientEncKey(byte[] clientEncKey) {
    this.clientEncKey = clientEncKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(clientEncKey.clone());
    return this;
  }

  public SslKey setClientEncKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer clientEncKey) {
    this.clientEncKey = org.apache.thrift.TBaseHelper.copyBinary(clientEncKey);
    return this;
  }

  public void unsetClientEncKey() {
    this.clientEncKey = null;
  }

  /** Returns true if field clientEncKey is set (has been assigned a value) and false otherwise */
  public boolean isSetClientEncKey() {
    return this.clientEncKey != null;
  }

  public void setClientEncKeyIsSet(boolean value) {
    if (!value) {
      this.clientEncKey = null;
    }
  }

  public byte[] getServerEncKey() {
    setServerEncKey(org.apache.thrift.TBaseHelper.rightSize(serverEncKey));
    return serverEncKey == null ? null : serverEncKey.array();
  }

  public java.nio.ByteBuffer bufferForServerEncKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(serverEncKey);
  }

  public SslKey setServerEncKey(byte[] serverEncKey) {
    this.serverEncKey = serverEncKey == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(serverEncKey.clone());
    return this;
  }

  public SslKey setServerEncKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverEncKey) {
    this.serverEncKey = org.apache.thrift.TBaseHelper.copyBinary(serverEncKey);
    return this;
  }

  public void unsetServerEncKey() {
    this.serverEncKey = null;
  }

  /** Returns true if field serverEncKey is set (has been assigned a value) and false otherwise */
  public boolean isSetServerEncKey() {
    return this.serverEncKey != null;
  }

  public void setServerEncKeyIsSet(boolean value) {
    if (!value) {
      this.serverEncKey = null;
    }
  }

  public byte[] getClientIv() {
    setClientIv(org.apache.thrift.TBaseHelper.rightSize(clientIv));
    return clientIv == null ? null : clientIv.array();
  }

  public java.nio.ByteBuffer bufferForClientIv() {
    return org.apache.thrift.TBaseHelper.copyBinary(clientIv);
  }

  public SslKey setClientIv(byte[] clientIv) {
    this.clientIv = clientIv == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(clientIv.clone());
    return this;
  }

  public SslKey setClientIv(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer clientIv) {
    this.clientIv = org.apache.thrift.TBaseHelper.copyBinary(clientIv);
    return this;
  }

  public void unsetClientIv() {
    this.clientIv = null;
  }

  /** Returns true if field clientIv is set (has been assigned a value) and false otherwise */
  public boolean isSetClientIv() {
    return this.clientIv != null;
  }

  public void setClientIvIsSet(boolean value) {
    if (!value) {
      this.clientIv = null;
    }
  }

  public byte[] getServerIv() {
    setServerIv(org.apache.thrift.TBaseHelper.rightSize(serverIv));
    return serverIv == null ? null : serverIv.array();
  }

  public java.nio.ByteBuffer bufferForServerIv() {
    return org.apache.thrift.TBaseHelper.copyBinary(serverIv);
  }

  public SslKey setServerIv(byte[] serverIv) {
    this.serverIv = serverIv == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(serverIv.clone());
    return this;
  }

  public SslKey setServerIv(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer serverIv) {
    this.serverIv = org.apache.thrift.TBaseHelper.copyBinary(serverIv);
    return this;
  }

  public void unsetServerIv() {
    this.serverIv = null;
  }

  /** Returns true if field serverIv is set (has been assigned a value) and false otherwise */
  public boolean isSetServerIv() {
    return this.serverIv != null;
  }

  public void setServerIvIsSet(boolean value) {
    if (!value) {
      this.serverIv = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CLIENT_HASH_KEY:
      if (value == null) {
        unsetClientHashKey();
      } else {
        if (value instanceof byte[]) {
          setClientHashKey((byte[])value);
        } else {
          setClientHashKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SERVER_HASH_KEY:
      if (value == null) {
        unsetServerHashKey();
      } else {
        if (value instanceof byte[]) {
          setServerHashKey((byte[])value);
        } else {
          setServerHashKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case CLIENT_ENC_KEY:
      if (value == null) {
        unsetClientEncKey();
      } else {
        if (value instanceof byte[]) {
          setClientEncKey((byte[])value);
        } else {
          setClientEncKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SERVER_ENC_KEY:
      if (value == null) {
        unsetServerEncKey();
      } else {
        if (value instanceof byte[]) {
          setServerEncKey((byte[])value);
        } else {
          setServerEncKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case CLIENT_IV:
      if (value == null) {
        unsetClientIv();
      } else {
        if (value instanceof byte[]) {
          setClientIv((byte[])value);
        } else {
          setClientIv((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SERVER_IV:
      if (value == null) {
        unsetServerIv();
      } else {
        if (value instanceof byte[]) {
          setServerIv((byte[])value);
        } else {
          setServerIv((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_HASH_KEY:
      return getClientHashKey();

    case SERVER_HASH_KEY:
      return getServerHashKey();

    case CLIENT_ENC_KEY:
      return getClientEncKey();

    case SERVER_ENC_KEY:
      return getServerEncKey();

    case CLIENT_IV:
      return getClientIv();

    case SERVER_IV:
      return getServerIv();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_HASH_KEY:
      return isSetClientHashKey();
    case SERVER_HASH_KEY:
      return isSetServerHashKey();
    case CLIENT_ENC_KEY:
      return isSetClientEncKey();
    case SERVER_ENC_KEY:
      return isSetServerEncKey();
    case CLIENT_IV:
      return isSetClientIv();
    case SERVER_IV:
      return isSetServerIv();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SslKey)
      return this.equals((SslKey)that);
    return false;
  }

  public boolean equals(SslKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clientHashKey = true && this.isSetClientHashKey();
    boolean that_present_clientHashKey = true && that.isSetClientHashKey();
    if (this_present_clientHashKey || that_present_clientHashKey) {
      if (!(this_present_clientHashKey && that_present_clientHashKey))
        return false;
      if (!this.clientHashKey.equals(that.clientHashKey))
        return false;
    }

    boolean this_present_serverHashKey = true && this.isSetServerHashKey();
    boolean that_present_serverHashKey = true && that.isSetServerHashKey();
    if (this_present_serverHashKey || that_present_serverHashKey) {
      if (!(this_present_serverHashKey && that_present_serverHashKey))
        return false;
      if (!this.serverHashKey.equals(that.serverHashKey))
        return false;
    }

    boolean this_present_clientEncKey = true && this.isSetClientEncKey();
    boolean that_present_clientEncKey = true && that.isSetClientEncKey();
    if (this_present_clientEncKey || that_present_clientEncKey) {
      if (!(this_present_clientEncKey && that_present_clientEncKey))
        return false;
      if (!this.clientEncKey.equals(that.clientEncKey))
        return false;
    }

    boolean this_present_serverEncKey = true && this.isSetServerEncKey();
    boolean that_present_serverEncKey = true && that.isSetServerEncKey();
    if (this_present_serverEncKey || that_present_serverEncKey) {
      if (!(this_present_serverEncKey && that_present_serverEncKey))
        return false;
      if (!this.serverEncKey.equals(that.serverEncKey))
        return false;
    }

    boolean this_present_clientIv = true && this.isSetClientIv();
    boolean that_present_clientIv = true && that.isSetClientIv();
    if (this_present_clientIv || that_present_clientIv) {
      if (!(this_present_clientIv && that_present_clientIv))
        return false;
      if (!this.clientIv.equals(that.clientIv))
        return false;
    }

    boolean this_present_serverIv = true && this.isSetServerIv();
    boolean that_present_serverIv = true && that.isSetServerIv();
    if (this_present_serverIv || that_present_serverIv) {
      if (!(this_present_serverIv && that_present_serverIv))
        return false;
      if (!this.serverIv.equals(that.serverIv))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetClientHashKey()) ? 131071 : 524287);
    if (isSetClientHashKey())
      hashCode = hashCode * 8191 + clientHashKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetServerHashKey()) ? 131071 : 524287);
    if (isSetServerHashKey())
      hashCode = hashCode * 8191 + serverHashKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientEncKey()) ? 131071 : 524287);
    if (isSetClientEncKey())
      hashCode = hashCode * 8191 + clientEncKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetServerEncKey()) ? 131071 : 524287);
    if (isSetServerEncKey())
      hashCode = hashCode * 8191 + serverEncKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientIv()) ? 131071 : 524287);
    if (isSetClientIv())
      hashCode = hashCode * 8191 + clientIv.hashCode();

    hashCode = hashCode * 8191 + ((isSetServerIv()) ? 131071 : 524287);
    if (isSetServerIv())
      hashCode = hashCode * 8191 + serverIv.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SslKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetClientHashKey(), other.isSetClientHashKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientHashKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientHashKey, other.clientHashKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetServerHashKey(), other.isSetServerHashKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerHashKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHashKey, other.serverHashKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClientEncKey(), other.isSetClientEncKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientEncKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientEncKey, other.clientEncKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetServerEncKey(), other.isSetServerEncKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerEncKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverEncKey, other.serverEncKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClientIv(), other.isSetClientIv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIv, other.clientIv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetServerIv(), other.isSetServerIv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerIv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverIv, other.serverIv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SslKey(");
    boolean first = true;

    sb.append("clientHashKey:");
    if (this.clientHashKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.clientHashKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverHashKey:");
    if (this.serverHashKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.serverHashKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientEncKey:");
    if (this.clientEncKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.clientEncKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverEncKey:");
    if (this.serverEncKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.serverEncKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientIv:");
    if (this.clientIv == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.clientIv, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverIv:");
    if (this.serverIv == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.serverIv, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SslKeyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SslKeyStandardScheme getScheme() {
      return new SslKeyStandardScheme();
    }
  }

  private static class SslKeyStandardScheme extends org.apache.thrift.scheme.StandardScheme<SslKey> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SslKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_HASH_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientHashKey = iprot.readBinary();
              struct.setClientHashKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_HASH_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverHashKey = iprot.readBinary();
              struct.setServerHashKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_ENC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientEncKey = iprot.readBinary();
              struct.setClientEncKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVER_ENC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverEncKey = iprot.readBinary();
              struct.setServerEncKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_IV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientIv = iprot.readBinary();
              struct.setClientIvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVER_IV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverIv = iprot.readBinary();
              struct.setServerIvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SslKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientHashKey != null) {
        oprot.writeFieldBegin(CLIENT_HASH_KEY_FIELD_DESC);
        oprot.writeBinary(struct.clientHashKey);
        oprot.writeFieldEnd();
      }
      if (struct.serverHashKey != null) {
        oprot.writeFieldBegin(SERVER_HASH_KEY_FIELD_DESC);
        oprot.writeBinary(struct.serverHashKey);
        oprot.writeFieldEnd();
      }
      if (struct.clientEncKey != null) {
        oprot.writeFieldBegin(CLIENT_ENC_KEY_FIELD_DESC);
        oprot.writeBinary(struct.clientEncKey);
        oprot.writeFieldEnd();
      }
      if (struct.serverEncKey != null) {
        oprot.writeFieldBegin(SERVER_ENC_KEY_FIELD_DESC);
        oprot.writeBinary(struct.serverEncKey);
        oprot.writeFieldEnd();
      }
      if (struct.clientIv != null) {
        oprot.writeFieldBegin(CLIENT_IV_FIELD_DESC);
        oprot.writeBinary(struct.clientIv);
        oprot.writeFieldEnd();
      }
      if (struct.serverIv != null) {
        oprot.writeFieldBegin(SERVER_IV_FIELD_DESC);
        oprot.writeBinary(struct.serverIv);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SslKeyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SslKeyTupleScheme getScheme() {
      return new SslKeyTupleScheme();
    }
  }

  private static class SslKeyTupleScheme extends org.apache.thrift.scheme.TupleScheme<SslKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SslKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClientHashKey()) {
        optionals.set(0);
      }
      if (struct.isSetServerHashKey()) {
        optionals.set(1);
      }
      if (struct.isSetClientEncKey()) {
        optionals.set(2);
      }
      if (struct.isSetServerEncKey()) {
        optionals.set(3);
      }
      if (struct.isSetClientIv()) {
        optionals.set(4);
      }
      if (struct.isSetServerIv()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetClientHashKey()) {
        oprot.writeBinary(struct.clientHashKey);
      }
      if (struct.isSetServerHashKey()) {
        oprot.writeBinary(struct.serverHashKey);
      }
      if (struct.isSetClientEncKey()) {
        oprot.writeBinary(struct.clientEncKey);
      }
      if (struct.isSetServerEncKey()) {
        oprot.writeBinary(struct.serverEncKey);
      }
      if (struct.isSetClientIv()) {
        oprot.writeBinary(struct.clientIv);
      }
      if (struct.isSetServerIv()) {
        oprot.writeBinary(struct.serverIv);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SslKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.clientHashKey = iprot.readBinary();
        struct.setClientHashKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverHashKey = iprot.readBinary();
        struct.setServerHashKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientEncKey = iprot.readBinary();
        struct.setClientEncKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serverEncKey = iprot.readBinary();
        struct.setServerEncKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clientIv = iprot.readBinary();
        struct.setClientIvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.serverIv = iprot.readBinary();
        struct.setServerIvIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

