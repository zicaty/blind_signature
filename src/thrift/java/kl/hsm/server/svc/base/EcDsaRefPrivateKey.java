/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package kl.hsm.server.svc.base;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-01-24")
public class EcDsaRefPrivateKey implements org.apache.thrift.TBase<EcDsaRefPrivateKey, EcDsaRefPrivateKey._Fields>, java.io.Serializable, Cloneable, Comparable<EcDsaRefPrivateKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EcDsaRefPrivateKey");

  private static final org.apache.thrift.protocol.TField BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("bits", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CURVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("curveType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EcDsaRefPrivateKeyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EcDsaRefPrivateKeyTupleSchemeFactory();

  public int bits; // required
  public int curveType; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer d; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BITS((short)1, "bits"),
    CURVE_TYPE((short)2, "curveType"),
    D((short)3, "d");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BITS
          return BITS;
        case 2: // CURVE_TYPE
          return CURVE_TYPE;
        case 3: // D
          return D;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BITS_ISSET_ID = 0;
  private static final int __CURVETYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BITS, new org.apache.thrift.meta_data.FieldMetaData("bits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("curveType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EcDsaRefPrivateKey.class, metaDataMap);
  }

  public EcDsaRefPrivateKey() {
  }

  public EcDsaRefPrivateKey(
    int bits,
    int curveType,
    java.nio.ByteBuffer d)
  {
    this();
    this.bits = bits;
    setBitsIsSet(true);
    this.curveType = curveType;
    setCurveTypeIsSet(true);
    this.d = org.apache.thrift.TBaseHelper.copyBinary(d);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EcDsaRefPrivateKey(EcDsaRefPrivateKey other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bits = other.bits;
    this.curveType = other.curveType;
    if (other.isSetD()) {
      this.d = org.apache.thrift.TBaseHelper.copyBinary(other.d);
    }
  }

  @Override
  public EcDsaRefPrivateKey deepCopy() {
    return new EcDsaRefPrivateKey(this);
  }

  @Override
  public void clear() {
    setBitsIsSet(false);
    this.bits = 0;
    setCurveTypeIsSet(false);
    this.curveType = 0;
    this.d = null;
  }

  public int getBits() {
    return this.bits;
  }

  public EcDsaRefPrivateKey setBits(int bits) {
    this.bits = bits;
    setBitsIsSet(true);
    return this;
  }

  public void unsetBits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BITS_ISSET_ID);
  }

  /** Returns true if field bits is set (has been assigned a value) and false otherwise */
  public boolean isSetBits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BITS_ISSET_ID);
  }

  public void setBitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BITS_ISSET_ID, value);
  }

  public int getCurveType() {
    return this.curveType;
  }

  public EcDsaRefPrivateKey setCurveType(int curveType) {
    this.curveType = curveType;
    setCurveTypeIsSet(true);
    return this;
  }

  public void unsetCurveType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURVETYPE_ISSET_ID);
  }

  /** Returns true if field curveType is set (has been assigned a value) and false otherwise */
  public boolean isSetCurveType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURVETYPE_ISSET_ID);
  }

  public void setCurveTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURVETYPE_ISSET_ID, value);
  }

  public byte[] getD() {
    setD(org.apache.thrift.TBaseHelper.rightSize(d));
    return d == null ? null : d.array();
  }

  public java.nio.ByteBuffer bufferForD() {
    return org.apache.thrift.TBaseHelper.copyBinary(d);
  }

  public EcDsaRefPrivateKey setD(byte[] d) {
    this.d = d == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(d.clone());
    return this;
  }

  public EcDsaRefPrivateKey setD(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer d) {
    this.d = org.apache.thrift.TBaseHelper.copyBinary(d);
    return this;
  }

  public void unsetD() {
    this.d = null;
  }

  /** Returns true if field d is set (has been assigned a value) and false otherwise */
  public boolean isSetD() {
    return this.d != null;
  }

  public void setDIsSet(boolean value) {
    if (!value) {
      this.d = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BITS:
      if (value == null) {
        unsetBits();
      } else {
        setBits((java.lang.Integer)value);
      }
      break;

    case CURVE_TYPE:
      if (value == null) {
        unsetCurveType();
      } else {
        setCurveType((java.lang.Integer)value);
      }
      break;

    case D:
      if (value == null) {
        unsetD();
      } else {
        if (value instanceof byte[]) {
          setD((byte[])value);
        } else {
          setD((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BITS:
      return getBits();

    case CURVE_TYPE:
      return getCurveType();

    case D:
      return getD();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BITS:
      return isSetBits();
    case CURVE_TYPE:
      return isSetCurveType();
    case D:
      return isSetD();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof EcDsaRefPrivateKey)
      return this.equals((EcDsaRefPrivateKey)that);
    return false;
  }

  public boolean equals(EcDsaRefPrivateKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bits = true;
    boolean that_present_bits = true;
    if (this_present_bits || that_present_bits) {
      if (!(this_present_bits && that_present_bits))
        return false;
      if (this.bits != that.bits)
        return false;
    }

    boolean this_present_curveType = true;
    boolean that_present_curveType = true;
    if (this_present_curveType || that_present_curveType) {
      if (!(this_present_curveType && that_present_curveType))
        return false;
      if (this.curveType != that.curveType)
        return false;
    }

    boolean this_present_d = true && this.isSetD();
    boolean that_present_d = true && that.isSetD();
    if (this_present_d || that_present_d) {
      if (!(this_present_d && that_present_d))
        return false;
      if (!this.d.equals(that.d))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + bits;

    hashCode = hashCode * 8191 + curveType;

    hashCode = hashCode * 8191 + ((isSetD()) ? 131071 : 524287);
    if (isSetD())
      hashCode = hashCode * 8191 + d.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EcDsaRefPrivateKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBits(), other.isSetBits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bits, other.bits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurveType(), other.isSetCurveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curveType, other.curveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetD(), other.isSetD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EcDsaRefPrivateKey(");
    boolean first = true;

    sb.append("bits:");
    sb.append(this.bits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("curveType:");
    sb.append(this.curveType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d:");
    if (this.d == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.d, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EcDsaRefPrivateKeyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public EcDsaRefPrivateKeyStandardScheme getScheme() {
      return new EcDsaRefPrivateKeyStandardScheme();
    }
  }

  private static class EcDsaRefPrivateKeyStandardScheme extends org.apache.thrift.scheme.StandardScheme<EcDsaRefPrivateKey> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, EcDsaRefPrivateKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bits = iprot.readI32();
              struct.setBitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curveType = iprot.readI32();
              struct.setCurveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // D
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.d = iprot.readBinary();
              struct.setDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, EcDsaRefPrivateKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BITS_FIELD_DESC);
      oprot.writeI32(struct.bits);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURVE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.curveType);
      oprot.writeFieldEnd();
      if (struct.d != null) {
        oprot.writeFieldBegin(D_FIELD_DESC);
        oprot.writeBinary(struct.d);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EcDsaRefPrivateKeyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public EcDsaRefPrivateKeyTupleScheme getScheme() {
      return new EcDsaRefPrivateKeyTupleScheme();
    }
  }

  private static class EcDsaRefPrivateKeyTupleScheme extends org.apache.thrift.scheme.TupleScheme<EcDsaRefPrivateKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EcDsaRefPrivateKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBits()) {
        optionals.set(0);
      }
      if (struct.isSetCurveType()) {
        optionals.set(1);
      }
      if (struct.isSetD()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBits()) {
        oprot.writeI32(struct.bits);
      }
      if (struct.isSetCurveType()) {
        oprot.writeI32(struct.curveType);
      }
      if (struct.isSetD()) {
        oprot.writeBinary(struct.d);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EcDsaRefPrivateKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.bits = iprot.readI32();
        struct.setBitsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.curveType = iprot.readI32();
        struct.setCurveTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.d = iprot.readBinary();
        struct.setDIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

